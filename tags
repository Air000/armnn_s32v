!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
ARMNN_AUTO_TEST_CASE	./src/armnn/test/UnitTests.hpp	54;"	d
ARMNN_BYTES_LEAKED_IN_SCOPE	./src/armnnUtils/LeakChecking.hpp	71;"	d
ARMNN_COMPARE_REF_AUTO_TEST_CASE	./src/armnn/test/UnitTests.hpp	69;"	d
ARMNN_COMPARE_REF_FIXTURE_TEST_CASE	./src/armnn/test/UnitTests.hpp	75;"	d
ARMNN_DISABLE_LEAK_CHECKING_IN_SCOPE	./src/armnnUtils/LeakChecking.hpp	77;"	d
ARMNN_HEADER_PATH	./Android.mk	/^ARMNN_HEADER_PATH := $(LOCAL_PATH)\/include$/;"	m
ARMNN_HEAP_PROFILE_DUMP_DIR	./src/armnnUtils/HeapProfiling.hpp	15;"	d
ARMNN_LEAK_CHECKER_IS_ACTIVE	./src/armnnUtils/LeakChecking.hpp	65;"	d
ARMNN_NO_LEAKS_IN_SCOPE	./src/armnnUtils/LeakChecking.hpp	68;"	d
ARMNN_OBJECTS_LEAKED_IN_SCOPE	./src/armnnUtils/LeakChecking.hpp	74;"	d
ARMNN_SCOPED_HEAP_PROFILING	./src/armnnUtils/HeapProfiling.hpp	40;"	d
ARMNN_SCOPED_LEAK_CHECKER	./src/armnnUtils/LeakChecking.hpp	62;"	d
ARMNN_SCOPED_PROFILING_EVENT	./src/armnn/Profiling.hpp	151;"	d
ARMNN_SOURCE_HEADER_PATH	./Android.mk	/^ARMNN_SOURCE_HEADER_PATH := $(LOCAL_PATH)\/src\/armnn$/;"	m
ARMNN_SOURCE_UTILS_HEADER_PATH	./Android.mk	/^ARMNN_SOURCE_UTILS_HEADER_PATH := $(LOCAL_PATH)\/src\/armnnUtils$/;"	m
ARMNN_UPDATE_PROFILING_EVENT_TAG	./src/armnn/Profiling.hpp	148;"	d
ARMNN_VERSION	./include/armnn/Version.hpp	12;"	d
Abs	./include/armnn/Types.hpp	/^    Abs         = 7,$/;"	m	class:armnn::Status::DataType::ActivationFunction
AclBaseMemoryManager	./src/armnn/backends/AclBaseMemoryManager.cpp	/^AclBaseMemoryManager::AclBaseMemoryManager(std::unique_ptr<arm_compute::IAllocator> alloc)$/;"	f	class:armnn::AclBaseMemoryManager
AclBaseMemoryManager	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    AclBaseMemoryManager() { }$/;"	f	class:armnn::AclBaseMemoryManager
AclBaseMemoryManager	./src/armnn/backends/AclBaseMemoryManager.hpp	/^class AclBaseMemoryManager$/;"	c	namespace:armnn
Across	./include/armnn/Types.hpp	/^    Across = 0,$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel
Activation	./src/armnn/InternalTypes.hpp	/^    Activation = FirstLayer,$/;"	m	class:armnn::LayerType
Activation	./src/armnn/backends/RefWorkloads/Activation.cpp	/^void Activation(const float* in,$/;"	f	namespace:armnn
ActivationDescriptor	./include/armnn/Descriptors.hpp	/^    ActivationDescriptor() : m_Function(ActivationFunction::Sigmoid), m_A(0), m_B(0) {};$/;"	f	struct:armnn::ActivationDescriptor
ActivationDescriptor	./include/armnn/Descriptors.hpp	/^struct ActivationDescriptor$/;"	s	namespace:armnn
ActivationFixture	./src/armnn/backends/test/ActivationFixture.hpp	/^    ActivationFixture()$/;"	f	struct:ActivationFixture
ActivationFixture	./src/armnn/backends/test/ActivationFixture.hpp	/^struct ActivationFixture$/;"	s
ActivationFixture	./src/armnnTfParser/test/Activations.cpp	/^    explicit ActivationFixture(const char* activationFunction)$/;"	f	struct:ActivationFixture
ActivationFixture	./src/armnnTfParser/test/Activations.cpp	/^struct ActivationFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ActivationFunction	./include/armnn/Types.hpp	/^enum class ActivationFunction$/;"	c	class:armnn::Status::DataType
ActivationLayer	./src/armnn/layers/ActivationLayer.cpp	/^ActivationLayer::ActivationLayer(const ActivationDescriptor& param, const char* name)$/;"	f	class:armnn::ActivationLayer
ActivationLayer	./src/armnn/layers/ActivationLayer.hpp	/^class ActivationLayer : public LayerWithParameters<ActivationDescriptor>$/;"	c	namespace:armnn
ActivationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct ActivationQueueDescriptor : QueueDescriptorWithParameters<ActivationDescriptor>$/;"	s	namespace:armnn
AddActivationLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddActivationLayer(const ActivationDescriptor& activationDescriptor,$/;"	f	class:armnn::Network
AddActivationLayer	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::AddActivationLayer(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
AddAdditionLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddAdditionLayer(const char* name)$/;"	f	class:armnn::Network
AddAdditionLayer	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::AddAdditionLayer(const tensorflow::NodeDef& nodeDef, bool isBiasAdd)$/;"	f	class:armnnTfParser::TfParser
AddAttribute	./src/armnnUtils/DotSerializer.cpp	/^DotAttributeSet & DotAttributeSet::AddAttribute(const std::string& name, const std::string& value)$/;"	f	class:armnn::DotAttributeSet
AddAttribute	./src/armnnUtils/DotSerializer.cpp	/^DotAttributeSet & DotAttributeSet::AddAttribute(const std::string& name, const std::stringstream& value)$/;"	f	class:armnn::DotAttributeSet
AddAttribute	./src/armnnUtils/DotSerializer.cpp	/^DotAttributeSet & DotAttributeSet::AddAttribute(const std::string& name, int value)$/;"	f	class:armnn::DotAttributeSet
AddBatchNormalizationLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddBatchNormalizationLayer(const BatchNormalizationDescriptor& desc,$/;"	f	class:armnn::Network
AddCommandLineOptions	./tests/InferenceModel.hpp	/^    static void AddCommandLineOptions(boost::program_options::options_description& desc, CommandLineOptions& options)$/;"	f	class:InferenceModel
AddCommandLineOptions	./tests/InferenceTest.hpp	/^    virtual void AddCommandLineOptions(boost::program_options::options_description& options) {};$/;"	f	class:armnn::test::IInferenceTestCaseProvider
AddConstantLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddConstantLayer(const ConstTensor& input, const char* name)$/;"	f	class:armnn::Network
AddContent	./src/armnnUtils/DotSerializer.cpp	/^NodeContent & NodeContent::AddContent(const std::string & content)$/;"	f	class:armnn::NodeContent
AddConvolution2dLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddConvolution2dLayer(const Convolution2dDescriptor& convolution2dDescriptor,$/;"	f	class:armnn::Network
AddConvolution2dLayerImpl	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddConvolution2dLayerImpl(const Convolution2dDescriptor& convolution2dDescriptor,$/;"	f	class:armnn::Network
AddCopyLayers	./src/armnn/Graph.cpp	/^void Graph::AddCopyLayers()$/;"	f	class:armnn::Graph
AddDepthwiseConvolution2dLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddDepthwiseConvolution2dLayer($/;"	f	class:armnn::Network
AddDepthwiseConvolution2dLayerImpl	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddDepthwiseConvolution2dLayerImpl($/;"	f	class:armnn::Network
AddFixture	./src/armnnCaffeParser/test/TestAdd.cpp	/^    AddFixture()$/;"	f	struct:AddFixture
AddFixture	./src/armnnCaffeParser/test/TestAdd.cpp	/^struct AddFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
AddFloorLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddFloorLayer(const char* name)$/;"	f	class:armnn::Network
AddFullyConnectedLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddFullyConnectedLayer(const FullyConnectedDescriptor& fullyConnectedDescriptor,$/;"	f	class:armnn::Network
AddFullyConnectedLayer	./src/armnnTfParser/TfParser.cpp	/^IConnectableLayer* TfParser::AddFullyConnectedLayer(const tensorflow::NodeDef& matMulNodeDef,$/;"	f	class:armnnTfParser::TfParser
AddFullyConnectedLayerImpl	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddFullyConnectedLayerImpl(const FullyConnectedDescriptor& fullyConnectedDescriptor,$/;"	f	class:armnn::Network
AddInputLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddInputLayer(LayerBindingId id, const char* name)$/;"	f	class:armnn::Network
AddInputToWorkload	./src/armnn/backends/test/WorkloadTestUtils.hpp	/^void AddInputToWorkload(QueueDescriptor& descriptor,$/;"	f
AddL2NormalizationLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddL2NormalizationLayer(const char* name)$/;"	f	class:armnn::Network
AddLayer	./src/armnn/Graph.hpp	/^inline LayerT* Graph::AddLayer(Args&&... args)$/;"	f	class:armnn::Graph
AddLayer	./src/armnn/test/GraphTests.cpp	/^    LayerType* AddLayer(Args&&... args)$/;"	f	struct:CopyLayersFixture	file:
AddMergerLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddMergerLayer(const OriginsDescriptor& mergerDescriptor,$/;"	f	class:armnn::Network
AddMultiplicationLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddMultiplicationLayer(const char* name)$/;"	f	class:armnn::Network
AddNormalizationLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddNormalizationLayer(const NormalizationDescriptor& normalizationDescriptor,$/;"	f	class:armnn::Network
AddOutputLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddOutputLayer(LayerBindingId id, const char* name)$/;"	f	class:armnn::Network
AddOutputToWorkload	./src/armnn/backends/test/WorkloadTestUtils.hpp	/^void AddOutputToWorkload(QueueDescriptor& descriptor,$/;"	f
AddPermuteLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddPermuteLayer(const PermuteDescriptor& permuteDescriptor,$/;"	f	class:armnn::Network
AddPooling2dLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddPooling2dLayer(const Pooling2dDescriptor& pooling2dDescriptor,$/;"	f	class:armnn::Network
AddReshapeLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddReshapeLayer(const ReshapeDescriptor& reshapeDescriptor, const char* name)$/;"	f	class:armnn::Network
AddResizeBilinearLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddResizeBilinearLayer(const ResizeBilinearDescriptor& resizeDescriptor, const char* name)$/;"	f	class:armnn::Network
AddSoftmaxLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddSoftmaxLayer(const SoftmaxDescriptor& softmaxDescriptor,$/;"	f	class:armnn::Network
AddSplitterLayer	./src/armnn/Network.cpp	/^IConnectableLayer* Network::AddSplitterLayer(const ViewsDescriptor& splitterDescriptor,$/;"	f	class:armnn::Network
AddSwizzleLayer	./src/armnnTfParser/TfParser.cpp	/^IConnectableLayer* AddSwizzleLayer(INetwork& network, IOutputSlot& input, const PermutationVector& mapping,$/;"	f	namespace:armnnTfParser::__anon27
Addition	./src/armnn/InternalTypes.hpp	/^    Addition,$/;"	m	class:armnn::LayerType
Addition	./src/armnn/backends/RefWorkloads/Addition.cpp	/^void Addition(const TensorShape& inShape0,$/;"	f	namespace:armnn
AdditionBroadcast1ElementTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> AdditionBroadcast1ElementTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AdditionBroadcast1ElementTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> AdditionBroadcast1ElementTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
AdditionBroadcast1ElementUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> AdditionBroadcast1ElementUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AdditionBroadcastTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> AdditionBroadcastTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AdditionBroadcastTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> AdditionBroadcastTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
AdditionBroadcastUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> AdditionBroadcastUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AdditionFixture	./src/armnnTfParser/test/Addition.cpp	/^    AdditionFixture()$/;"	f	struct:AdditionFixture
AdditionFixture	./src/armnnTfParser/test/Addition.cpp	/^struct AdditionFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
AdditionLayer	./src/armnn/layers/AdditionLayer.cpp	/^AdditionLayer::AdditionLayer(const char* name)$/;"	f	class:armnn::AdditionLayer
AdditionLayer	./src/armnn/layers/AdditionLayer.hpp	/^class AdditionLayer : public Layer$/;"	c	namespace:armnn
AdditionQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct AdditionQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
AdditionTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> AdditionTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AdditionUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> AdditionUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Aeroplane	./tests/YoloDatabase.cpp	/^    Aeroplane,$/;"	m	class:__anon34::YoloVocClass	file:
Allocate	./src/armnn/backends/CpuTensorHandle.cpp	/^void ConstPassthroughCpuTensorHandle::Allocate()$/;"	f	class:armnn::ConstPassthroughCpuTensorHandle
Allocate	./src/armnn/backends/CpuTensorHandle.cpp	/^void PassthroughCpuTensorHandle::Allocate()$/;"	f	class:armnn::PassthroughCpuTensorHandle
Allocate	./src/armnn/backends/CpuTensorHandle.cpp	/^void ScopedCpuTensorHandle::Allocate()$/;"	f	class:armnn::ScopedCpuTensorHandle
AllocateAndCopyDataToITensorHandle	./src/armnn/backends/test/TensorCopyUtils.cpp	/^void AllocateAndCopyDataToITensorHandle(armnn::ITensorHandle* tensorHandle, const void* mem)$/;"	f
AllocateDynamicBuffers	./src/armnn/Graph.cpp	/^Status Graph::AllocateDynamicBuffers()$/;"	f	class:armnn::Graph
AllocateTensors	./src/armnn/backends/OutputHandler.cpp	/^void OutputHandler::AllocateTensors()$/;"	f	class:armnn::OutputHandler
AnalyzeEventSequenceAndWriteResults	./src/armnn/Profiling.cpp	/^void Profiler::AnalyzeEventSequenceAndWriteResults(std::vector<ProfilingEvent>::const_iterator first,$/;"	f	class:armnn::Profiler
AnalyzeEventsAndWriteResults	./src/armnn/Profiling.cpp	/^void Profiler::AnalyzeEventsAndWriteResults(std::ostream& outStream) const$/;"	f	class:armnn::Profiler
ApplyBias	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^void ApplyBias(std::vector<T>& v, float vScale, int32_t vOffset,$/;"	f
AreAllLayerInputSlotsConnected	./src/armnn/test/Network_test.cpp	/^bool AreAllLayerInputSlotsConnected(const armnn::IConnectableLayer& layer)$/;"	f	namespace:__anon25
ArmNNToNHWC	./src/armnnTfParser/TfParser.cpp	/^const PermutationVector ArmNNToNHWC = { 0, 3, 1, 2 };$/;"	m	namespace:armnnTfParser::__anon27	file:
AsymmetricNonSquarePooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> AsymmetricNonSquarePooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
AsymmetricNonSquarePooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> AsymmetricNonSquarePooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
AsymmetricNonSquarePooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> AsymmetricNonSquarePooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Average	./include/armnn/Types.hpp	/^    Average = 1,$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm
AvgPoolFixture	./src/armnnTfParser/test/Pooling.cpp	/^    AvgPoolFixture() : Pooling2dFixture("AvgPool") {}$/;"	f	struct:AvgPoolFixture
AvgPoolFixture	./src/armnnTfParser/test/Pooling.cpp	/^struct AvgPoolFixture : Pooling2dFixture$/;"	s	file:
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeCl.cpp	/^BOOST_AUTO_TEST_CASE(SimpleSplitter)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeCl.cpp	/^BOOST_AUTO_TEST_CASE(SimpleSplitterUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeNeon.cpp	/^BOOST_AUTO_TEST_CASE(Conv2dUtils)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeNeon.cpp	/^BOOST_AUTO_TEST_CASE(DepthwiseConv2dUtils)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeNeon.cpp	/^BOOST_AUTO_TEST_CASE(SimpleSplitter)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/ArmComputeNeon.cpp	/^BOOST_AUTO_TEST_CASE(SimpleSplitterUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateActivationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateAdditionWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateBatchNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateConvolution2dFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateDirectConvolution2dFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateDirectConvolution2dUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateFullyConnectedWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateL2NormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateMemCopyWorkloadsCl)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateMultiplicationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreatePooling2dWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateSingleOutputMultipleInputs)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateSoftmaxWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterMerger)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateActivationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateAdditionWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateBatchNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateConvolution2dWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateFullyConnectedWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateMemCopyWorkloadsNeon)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateMultiplicationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreatePooling2dWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateSingleOutputMultipleInputs)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateSoftmaxWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterMerger)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateActivationFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateActivationUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateAdditionFloatWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateAdditionUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateBatchNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateConvolution2dWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateDepthwiseConvolution2dWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateFullyConnectedFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateFullyConnectedUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateL2NormalizationFloat32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateMultiplicationFloatWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateMultiplicationUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateNormalizationWorkload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreatePooling2dFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreatePooling2dUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateReshapeUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateResizeBilinearFloat32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateResizeBilinearUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSingleOutputMultipleInputsFloat32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSingleOutputMultipleInputsUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSoftmaxFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSoftmaxUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterFloat32Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterMergerFloat32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterMergerUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^BOOST_AUTO_TEST_CASE(CreateSplitterUint8Workload)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedFloat32Cl)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedFloat32Neon)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedFloat32Reference)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedLayerTypeMatches)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedUint8Cl)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedUint8Neon)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/IsLayerSupportedTest.cpp	/^BOOST_AUTO_TEST_CASE(IsLayerSupportedUint8Reference)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenCpuAndGpu)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenCpuAndGpuWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenCpuAndNeon)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenCpuAndNeonWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenGpuAndCpu)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenGpuAndCpuWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenGpuAndNeon)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenGpuAndNeonWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenNeonAndCpu)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenNeonAndCpuWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenNeonAndGpu)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/MemCopyTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyBetweenNeonAndGpuWithSubtensors)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/Reference.cpp	/^BOOST_AUTO_TEST_CASE(SimpleSplitter)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/Reference.cpp	/^BOOST_AUTO_TEST_CASE(SplitterUint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(AdditionQueueDescriptor_Validate_InputNumbers)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(AdditionQueueDescriptor_Validate_InputShapes)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(FullyConnectedQueueDescriptor_Validate_RequiredDataMissing)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(MergerQueueDescriptor_Validate_WrongWindow)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(MultiplicationQueueDescriptor_Validate_InputTensorDimensionMismatch)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(NormalizationQueueDescriptor_Validate_WrongInputHeight)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(QueueDescriptor_Validate_WrongNumOfInputsOutputs)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(RefPooling2dFloat32Workload_Validate_WrongDimTensor)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(ReshapeQueueDescriptor_Validate_MismatchingNumElements)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(SoftmaxQueueDescriptor_Validate_WrongInputHeight)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/backends/test/WorkloadDataValidation.cpp	/^BOOST_AUTO_TEST_CASE(SplitterQueueDescriptor_Validate_WrongWindow)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(ConstantUsage_Cl_Float32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(ConstantUsage_Neon_Float32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(ConstantUsage_Ref_Float32)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(ConstantUsage_Ref_Uint8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(ErrorOnLoadNetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(MultipleOutputs)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(QuantizedHelper)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(TrivialAdd)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/EndToEndTest.cpp	/^BOOST_AUTO_TEST_CASE(Unsigned8)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_AUTO_TEST_CASE(ClassGraph)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_AUTO_TEST_CASE(CopyLayersAddedBetweenSameLayersHaveDifferentNames)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_AUTO_TEST_CASE(DuplicateLayerNames)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_AUTO_TEST_CASE(InsertNewLayer)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_AUTO_TEST_CASE(TopologicalSort)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(LayerGuids)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(LayerNamesAreOptionalForINetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(LayerNamesAreOptionalForNetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(NetworkBasic)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(NetworkModification)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(NetworkModification_SplitterAddition)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(NetworkModification_SplitterMerger)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(NetworkModification_SplitterMultiplication)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(SerializeToDot)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/Network_test.cpp	/^BOOST_AUTO_TEST_CASE(ValidateWorkloads)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/OptimizerTests.cpp	/^BOOST_AUTO_TEST_CASE(MovePermuteUp)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/OptimizerTests.cpp	/^BOOST_AUTO_TEST_CASE(OptimizeConsecutiveReshapes)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/OptimizerTests.cpp	/^BOOST_AUTO_TEST_CASE(OptimizeInversePermutes)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/OptimizerTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteAsReshape)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/OptimizerTests.cpp	/^BOOST_AUTO_TEST_CASE(SquashEqualSiblings)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeHeapMemoryUsageSanityChecks)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeMemoryLeak)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeMemoryLeaksCpuAcc)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeMemoryLeaksCpuRef)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeMemoryLeaksGpuAcc)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeMemoryUsage)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/RuntimeTests.cpp	/^BOOST_AUTO_TEST_CASE(RuntimeUnloadNetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_AUTO_TEST_CASE(ModifyTensorInfo)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_AUTO_TEST_CASE(TensorShapeOperatorBrackets)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_AUTO_TEST_CASE(TensorVsConstTensor)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(DataTypeSize)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(GetDataTypeTest)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithDuplicatedMappings)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithInvalidMappings1d)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithInvalidMappings2d)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithInvalidMappings3d)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithInvalidMappings4d)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnn/test/UtilsTests.cpp	/^BOOST_AUTO_TEST_CASE(PermuteDescriptorWithTooManyMappings)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnCaffeParser/test/TestInputs.cpp	/^BOOST_AUTO_TEST_CASE(InputShapes)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_AUTO_TEST_CASE(ParseConv2DDilation2)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnTfParser/test/TestDependencies.cpp	/^BOOST_AUTO_TEST_CASE(ComplexCycle)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnTfParser/test/TestDependencies.cpp	/^BOOST_AUTO_TEST_CASE(InvalidInput)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnTfParser/test/TestDependencies.cpp	/^BOOST_AUTO_TEST_CASE(SimpleCycle)$/;"	f
BOOST_AUTO_TEST_CASE	./src/armnnTfParser/test/TestDependencies.cpp	/^BOOST_AUTO_TEST_CASE(SingleNodeCycle)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_FIXTURE_TEST_CASE(AddCopyLayers, CopyLayersFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/GraphTests.cpp	/^BOOST_FIXTURE_TEST_CASE(AddCopyLayersSeveralTimes, CopyLayersFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstructShapeUsingListInitialization, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstructTensorInfo, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(CopyConstructTensorInfo, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(TensorInfoAssignmentOperator, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(TensorInfoEquality, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnn/test/TensorTest.cpp	/^BOOST_FIXTURE_TEST_CASE(TensorInfoInequality, TensorInfoFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestAdd.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseAdd, AddFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestConcat.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcat, ConcatFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestDropout.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseDropout, DropoutFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestInPlace.cpp	/^BOOST_FIXTURE_TEST_CASE(InPlaceOutput, InPlaceOutputFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestInPlace.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseInPlace, InPlaceFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestMul.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseMul, MulFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestMultiInputsOutputs.cpp	/^BOOST_FIXTURE_TEST_CASE(MultiInputsOutputs, MultiInputsOutputsFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestPooling2d.cpp	/^BOOST_FIXTURE_TEST_CASE(GlobalPooling, GlobalPoolingFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnCaffeParser/test/TestSplit.cpp	/^BOOST_FIXTURE_TEST_CASE(Split, SplitFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Activations.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseReLu, ReLuFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Activations.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseReLu6, ReLu6Fixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Activations.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseSigmoid, SigmoidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Activations.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseSoftplus, SoftplusFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Activations.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseTanh, TanhFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Addition.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseAddition, AdditionFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/BiasAdd.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseBiasAddNCHW, BiasAddFixtureNCHW)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/BiasAdd.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseBiasAddNHWC, BiasAddFixtureNHWC)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseBroadcastForAddition0, BroadcastForAddFixtureSlot0)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseBroadcastForAddition1, BroadcastForAddFixtureSlot1)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Concat.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatDim1, ConcatFixtureDim1)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Concat.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatDim3, ConcatFixtureDim3)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Concat.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatNCHW, ConcatFixtureNCHW)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Concat.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatNHWC, ConcatFixtureNHWC)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatOfConcatsNCHW, ConcatOfConcatsFixtureNCHW)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConcatOfConcatsNHWC, ConcatOfConcatsFixtureNHWC)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(Constant, ConstantFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateInvalidContent, ConstantCreateNoContentFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateInvalidShape, ConstantCreateNoShapeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateInvalidValueList, ConstantCreateNoValueListFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateInvalidValueList2, ConstantCreateNoValueList2Fixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateNoShape2, ConstantCreateNoShape2Fixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantCreateNoShape3, ConstantCreateNoShape3Fixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantMaxValueList, ConstantMaxValueListFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantMultipleValueList, ConstantMultipleValueListFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantReused, ConstantReusedFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Constant.cpp	/^BOOST_FIXTURE_TEST_CASE(ConstantSingleValueList, ConstantSingleValueListFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConv2DDilation1, Convolution2dDilation1Fixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConv2DSame, Convolution2dSameFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConv2DStride2Same, Convolution2dStride2SameFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConv2DStride2Valid, Convolution2dStride2ValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Convolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseConv2DValid, Convolution2dValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseDepthwiseConv2DSame, DepthwiseConvolution2dSameFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseDepthwiseConv2DValid, DepthwiseConvolution2dValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/FullyConnected.cpp	/^BOOST_FIXTURE_TEST_CASE(FullyConnected, FullyConnectedFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/FullyConnected.cpp	/^BOOST_FIXTURE_TEST_CASE(MatMul, MatMulFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/FullyConnected.cpp	/^BOOST_FIXTURE_TEST_CASE(MatMulUsedInTwoFc, MatMulUsedInTwoFcFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/FullyConnected.cpp	/^BOOST_FIXTURE_TEST_CASE(MatMulUsedInTwoFcStaggered, MatMulUsedInTwoFcStaggeredFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/FusedBatchNorm.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseFusedBatchNorm, FusedBatchNormFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Identity.cpp	/^BOOST_FIXTURE_TEST_CASE(IdentityChain, IdentityChainFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Identity.cpp	/^BOOST_FIXTURE_TEST_CASE(IdentitySimple, IdentitySimpleFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Identity.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseIdentity, IdentityFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseLocalResponseNormalization, LocalResponseNormalizationFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseSimpleLocalResponseNormalization, LocalResponseNormalizationFixtureSimple)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/MultiOutput.cpp	/^BOOST_FIXTURE_TEST_CASE(MultiOutFail, MultiOutFailFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/MultiOutput.cpp	/^BOOST_FIXTURE_TEST_CASE(MultiOutInvalid, MultiOutInvalidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/MultiOutput.cpp	/^BOOST_FIXTURE_TEST_CASE(MultiOutMatch, MultiOutMatchFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Multiplication.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseMultiplication, MultiplicationFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Multiplication.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseMultiplicationBroadcast1D4D, MultiplicationBroadcastFixture1D4D)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Multiplication.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseMultiplicationBroadcast4D1D, MultiplicationBroadcastFixture4D1D)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/PassThru.cpp	/^BOOST_FIXTURE_TEST_CASE(RunGraph, PassThruFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/PassThru.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidateOutput, PassThruFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Pooling.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseAvgPool, AvgPoolFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Pooling.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseMaxPool, MaxPoolFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Reshape.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseReshape, ReshapeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/ResizeBilinear.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseResizeBilinear, ResizeBilinearFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Shape.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseShape, ShapeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Softmax.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseSoftmax, SoftmaxFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Squeeze.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseDimensionOneSqueeze, ExplicitDimensionOneSqueezeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Squeeze.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseDimensionZeroSqueeze, ExplicitDimensionZeroSqueezeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Squeeze.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseExplicitDimensionsSqueeze, ExplicitDimensionsSqueezeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/Squeeze.cpp	/^BOOST_FIXTURE_TEST_CASE(ParseImplicitSqueeze, ImpliedDimensionsSqueezeFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/TestDependencies.cpp	/^BOOST_FIXTURE_TEST_CASE(RediscoveredDependencies, RediscoveredDependenciesFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	./src/armnnTfParser/test/TestMultiInputsOutputs.cpp	/^BOOST_FIXTURE_TEST_CASE(MultiInputsOutputs, MultiInputsOutputsFixture)$/;"	f
BOOST_TEST_MODULE	./src/armnn/test/UnitTests.cpp	5;"	d	file:
BaseTensor	./include/armnn/Tensor.hpp	/^class BaseTensor$/;"	c	namespace:armnn
BaseTensor	./src/armnn/Tensor.cpp	/^BaseTensor<MemoryType>::BaseTensor()$/;"	f	class:armnn::BaseTensor
BaseTensor	./src/armnn/Tensor.cpp	/^BaseTensor<MemoryType>::BaseTensor(const BaseTensor<MemoryType>& other)$/;"	f	class:armnn::BaseTensor
BaseTensor	./src/armnn/Tensor.cpp	/^BaseTensor<MemoryType>::BaseTensor(const TensorInfo& info, MemoryType memoryArea)$/;"	f	class:armnn::BaseTensor
BaseWorkload	./src/armnn/backends/Workload.hpp	/^    BaseWorkload(const QueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::BaseWorkload
BaseWorkload	./src/armnn/backends/Workload.hpp	/^class BaseWorkload : public IWorkload$/;"	c	namespace:armnn
BatchNormImpl	./src/armnn/backends/RefWorkloads/BatchNormImpl.hpp	/^static void BatchNormImpl(NormData data,$/;"	f	namespace:armnn
BatchNormTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> BatchNormTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BatchNormTestImpl	./src/armnn/backends/test/BatchNormTestImpl.hpp	/^LayerTestResult<T,4> BatchNormTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
BatchNormUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> BatchNormUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BatchNormalization	./src/armnn/InternalTypes.hpp	/^    BatchNormalization,$/;"	m	class:armnn::LayerType
BatchNormalizationDescriptor	./include/armnn/Descriptors.hpp	/^    BatchNormalizationDescriptor()$/;"	f	struct:armnn::BatchNormalizationDescriptor
BatchNormalizationDescriptor	./include/armnn/Descriptors.hpp	/^struct BatchNormalizationDescriptor$/;"	s	namespace:armnn
BatchNormalizationLayer	./src/armnn/layers/BatchNormalizationLayer.cpp	/^BatchNormalizationLayer::BatchNormalizationLayer(const armnn::BatchNormalizationDescriptor& param, const char* name)$/;"	f	class:armnn::BatchNormalizationLayer
BatchNormalizationLayer	./src/armnn/layers/BatchNormalizationLayer.hpp	/^class BatchNormalizationLayer : public LayerWithParameters<BatchNormalizationDescriptor>$/;"	c	namespace:armnn
BatchNormalizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    BatchNormalizationQueueDescriptor()$/;"	f	struct:armnn::BatchNormalizationQueueDescriptor
BatchNormalizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct BatchNormalizationQueueDescriptor : QueueDescriptorWithParameters<BatchNormalizationDescriptor>$/;"	s	namespace:armnn
BeginEvent	./src/armnn/Profiling.cpp	/^void Profiler::BeginEvent(Compute compute, const std::string label)$/;"	f	class:armnn::Profiler
BeginInputSlots	./src/armnn/Layer.hpp	/^    std::vector<InputSlot>::iterator BeginInputSlots() { return m_InputSlots.begin(); }$/;"	f	class:armnn::Layer
BeginOutputSlots	./src/armnn/Layer.hpp	/^    std::vector<OutputSlot>::iterator BeginOutputSlots() { return m_OutputSlots.begin(); }$/;"	f	class:armnn::Layer
BiasAddFixture	./src/armnnTfParser/test/BiasAdd.cpp	/^    explicit BiasAddFixture(const std::string& dataFormat)$/;"	f	struct:BiasAddFixture
BiasAddFixture	./src/armnnTfParser/test/BiasAdd.cpp	/^struct BiasAddFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
BiasAddFixtureNCHW	./src/armnnTfParser/test/BiasAdd.cpp	/^    BiasAddFixtureNCHW() : BiasAddFixture("NCHW") {}$/;"	f	struct:BiasAddFixtureNCHW
BiasAddFixtureNCHW	./src/armnnTfParser/test/BiasAdd.cpp	/^struct BiasAddFixtureNCHW : BiasAddFixture$/;"	s	file:
BiasAddFixtureNHWC	./src/armnnTfParser/test/BiasAdd.cpp	/^    BiasAddFixtureNHWC() : BiasAddFixture("NHWC") {}$/;"	f	struct:BiasAddFixtureNHWC
BiasAddFixtureNHWC	./src/armnnTfParser/test/BiasAdd.cpp	/^struct BiasAddFixtureNHWC : BiasAddFixture$/;"	s	file:
BiasDataType	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    typedef float BiasDataType;$/;"	t	class:armnn::ClDepthwiseConvolutionFloat32Workload
BiasDataType	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    typedef int32_t BiasDataType;$/;"	t	class:armnn::ClDepthwiseConvolutionUint8Workload
Bicycle	./tests/YoloDatabase.cpp	/^    Bicycle,$/;"	m	class:__anon34::YoloVocClass	file:
BindableLayer	./src/armnn/Layer.hpp	/^    BindableLayer(unsigned int numInputSlots,$/;"	f	class:armnn::BindableLayer
BindableLayer	./src/armnn/Layer.hpp	/^class BindableLayer : public Layer$/;"	c	namespace:armnn
Bird	./tests/YoloDatabase.cpp	/^    Bird,$/;"	m	class:__anon34::YoloVocClass	file:
BlobShapeToTensorInfo	./src/armnnCaffeParser/CaffeParser.cpp	/^TensorInfo CaffeParser::BlobShapeToTensorInfo(const caffe::BlobShape& blobShape) const$/;"	f	class:armnnCaffeParser::CaffeParser
Bmp	./tests/InferenceTestImage.hpp	/^        Bmp,$/;"	m	class:InferenceTestImage::WriteFormat
Boat	./tests/YoloDatabase.cpp	/^    Boat,$/;"	m	class:__anon34::YoloVocClass	file:
Bottle	./tests/YoloDatabase.cpp	/^    Bottle,$/;"	m	class:__anon34::YoloVocClass	file:
BoundedReLu	./include/armnn/Types.hpp	/^    BoundedReLu = 4, \/\/< min(a, max(b, input))$/;"	m	class:armnn::Status::DataType::ActivationFunction
BoundedReLuRandomInputTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^boost::multi_array<float, 4> BoundedReLuRandomInputTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f	namespace:__anon11
BoundedReLuRandomInputTestTraits	./src/armnn/backends/test/ActivationTestImpl.hpp	/^struct BoundedReLuRandomInputTestTraits$/;"	s	namespace:__anon11
BoundedReLuTestCommon	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<T, 4> BoundedReLuTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
BoundedReLuUint8UpperAndLowerBoundTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<uint8_t, 4> BoundedReLuUint8UpperAndLowerBoundTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BoundedReLuUint8UpperBoundOnlyTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<uint8_t, 4> BoundedReLuUint8UpperBoundOnlyTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BoundedReLuUpperAndLowerBoundTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float, 4> BoundedReLuUpperAndLowerBoundTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BoundedReLuUpperBoundOnlyTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float, 4> BoundedReLuUpperBoundOnlyTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
BroadcastDimensionData	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^    struct BroadcastDimensionData$/;"	s	struct:armnn::BroadcastLoop
BroadcastForAddFixtureSlot0	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^    BroadcastForAddFixtureSlot0()$/;"	f	struct:BroadcastForAddFixtureSlot0
BroadcastForAddFixtureSlot0	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^struct BroadcastForAddFixtureSlot0 : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
BroadcastForAddFixtureSlot1	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^    BroadcastForAddFixtureSlot1()$/;"	f	struct:BroadcastForAddFixtureSlot1
BroadcastForAddFixtureSlot1	./src/armnnTfParser/test/BroadcastForAdd.cpp	/^struct BroadcastForAddFixtureSlot1 : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
BroadcastForAddandMul	./src/armnnTfParser/TfParser.cpp	/^IOutputSlot* BroadcastForAddandMul(IOutputSlot* input0Slot, IOutputSlot* input1Slot, bool isNHWC, INetwork& m_Network,$/;"	f	namespace:armnnTfParser::__anon27
BroadcastLoop	./src/armnn/backends/RefWorkloads/Broadcast.cpp	/^BroadcastLoop::BroadcastLoop(const TensorShape& inShape0, const TensorShape& inShape1, const TensorShape& outShape)$/;"	f	class:armnn::BroadcastLoop
BroadcastLoop	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^struct BroadcastLoop$/;"	s	namespace:armnn
BuildArmComputeNormalizationLayerInfo	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::NormalizationLayerInfo BuildArmComputeNormalizationLayerInfo(const NormalizationDescriptor& descriptor)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputePadStrideInfo	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^arm_compute::PadStrideInfo BuildArmComputePadStrideInfo(const Descriptor &descriptor)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputePermutationVector	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::PermutationVector BuildArmComputePermutationVector(const armnn::PermutationVector& perm)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputePoolingLayerInfo	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::PoolingLayerInfo BuildArmComputePoolingLayerInfo(const Pooling2dDescriptor& descriptor)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputeTensor	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^void BuildArmComputeTensor(Tensor& tensor, const armnn::TensorInfo& tensorInfo)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputeTensorInfo	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::TensorInfo BuildArmComputeTensorInfo(const armnn::TensorInfo& tensorInfo)$/;"	f	namespace:armnn::armcomputetensorutils
BuildArmComputeTensorShape	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::TensorShape BuildArmComputeTensorShape(const armnn::TensorShape& tensorShape)$/;"	f	namespace:armnn::armcomputetensorutils
Bus	./tests/YoloDatabase.cpp	/^    Bus,$/;"	m	class:__anon34::YoloVocClass	file:
BytesLeaked	./src/armnnUtils/LeakChecking.cpp	/^ssize_t ScopedLeakChecker::BytesLeaked() const$/;"	f	class:ScopedLeakChecker
CL	./src/armnn/backends/ITensorHandle.hpp	/^        CL,$/;"	e	enum:armnn::ITensorHandle::Type
CMAKE_BINARY_DIR	./build_arm64/Makefile	/^CMAKE_BINARY_DIR = \/media\/air\/6f43c45d-eb70-eb42-801a-ed77dc73e87f\/armnn\/armnn\/build_arm64$/;"	m
CMAKE_COMMAND	./build_arm64/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	./build_arm64/Makefile	/^CMAKE_SOURCE_DIR = \/media\/air\/6f43c45d-eb70-eb42-801a-ed77dc73e87f\/armnn\/armnn$/;"	m
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CaffeParser	./src/armnnCaffeParser/CaffeParser.cpp	/^CaffeParser::CaffeParser()$/;"	f	class:armnnCaffeParser::CaffeParser
CaffeParser	./src/armnnCaffeParser/CaffeParser.hpp	/^class CaffeParser : public ICaffeParser$/;"	c	namespace:armnnCaffeParser
CalcInvL2Norm	./src/armnn/backends/test/LayerTests.cpp	/^float CalcInvL2Norm(std::initializer_list<float> elements)$/;"	f	namespace:__anon18
CalcPadding	./src/armnnTfParser/TfParser.cpp	/^void CalcPadding(uint32_t input, uint32_t kernel, uint32_t stride, uint32_t& outPadHead, uint32_t& outPadTail,$/;"	f	namespace:armnnTfParser
CalculateProfilingEventStats	./src/armnn/Profiling.cpp	/^std::map<std::string, Profiler::ProfilingEventStats> Profiler::CalculateProfilingEventStats() const$/;"	f	class:armnn::Profiler
CalculateSamePadding	./src/armnnTfParser/TfParser.cpp	/^inline void CalculateSamePadding(uint32_t inputSize, uint32_t stride,$/;"	f	namespace:armnnTfParser
CanMovePermuteToInputs	./src/armnn/optimizations/MovePermuteUp.hpp	/^    static bool CanMovePermuteToInputs(const Layer& base)$/;"	f	class:armnn::optimizations::MovePermuteUpImpl
Car	./tests/YoloDatabase.cpp	/^    Car,$/;"	m	class:__anon34::YoloVocClass	file:
Cat	./tests/YoloDatabase.cpp	/^    Cat,$/;"	m	class:__anon34::YoloVocClass	file:
Ceiling	./include/armnn/Types.hpp	/^    Ceiling     = 1$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding
Chair	./tests/YoloDatabase.cpp	/^    Chair,$/;"	m	class:__anon34::YoloVocClass	file:
CheckInputOutput	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^void CheckInputOutput(std::unique_ptr<Workload> workload, const TensorInfo& inputInfo, const TensorInfo& outputInfo)$/;"	f	namespace:__anon15
CheckInputsOutput	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^void CheckInputsOutput(std::unique_ptr<Workload> workload,$/;"	f	namespace:__anon15
CheckOrder	./src/armnn/test/GraphTests.cpp	/^bool CheckOrder(const armnn::Graph& graph, const armnn::Layer* first, const armnn::Layer* second)$/;"	f
CheckSequence	./src/armnn/test/OptimizerTests.cpp	/^bool CheckSequence(const armnn::Graph::ConstIterator first, const armnn::Graph::ConstIterator last)$/;"	f	namespace:__anon26
CheckSequence	./src/armnn/test/OptimizerTests.cpp	/^bool CheckSequence(const armnn::Graph::ConstIterator first,$/;"	f	namespace:__anon26
CheckTensor	./src/armnn/test/TensorTest.cpp	/^void CheckTensor(const ConstTensor& t)$/;"	f
CheckTensorDataTypesEqual	./src/armnn/LayerSupport.cpp	/^bool CheckTensorDataTypesEqual(const TensorInfo& input0, const TensorInfo& input1)$/;"	f	namespace:armnn
Cifar10Database	./tests/Cifar10Database.cpp	/^Cifar10Database::Cifar10Database(const std::string& binaryFileDirectory, bool rgbPack)$/;"	f	class:Cifar10Database
Cifar10Database	./tests/Cifar10Database.hpp	/^class Cifar10Database$/;"	c
ClActivationFloat32Workload	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.cpp	/^ClActivationFloat32Workload::ClActivationFloat32Workload(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClActivationFloat32Workload
ClActivationFloat32Workload	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.hpp	/^class ClActivationFloat32Workload : public Float32Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
ClActivationUint8Workload	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.cpp	/^ClActivationUint8Workload::ClActivationUint8Workload(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClActivationUint8Workload
ClActivationUint8Workload	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.hpp	/^class ClActivationUint8Workload : public Uint8Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
ClAdditionFloat32Workload	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.cpp	/^ClAdditionFloat32Workload::ClAdditionFloat32Workload(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::ClAdditionFloat32Workload
ClAdditionFloat32Workload	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.hpp	/^class ClAdditionFloat32Workload : public Float32Workload<AdditionQueueDescriptor>$/;"	c	namespace:armnn
ClBaseConstantWorkload	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.hpp	/^    ClBaseConstantWorkload(const ConstantQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::ClBaseConstantWorkload
ClBaseConstantWorkload	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.hpp	/^class ClBaseConstantWorkload : public TypedWorkload<ConstantQueueDescriptor, DataType>$/;"	c	namespace:armnn
ClBaseMergerWorkload	./src/armnn/backends/ClWorkloads/ClBaseMergerWorkload.hpp	/^class ClBaseMergerWorkload : public TypedWorkload<MergerQueueDescriptor, DataType>$/;"	c	namespace:armnn
ClBaseSplitterWorkload	./src/armnn/backends/ClWorkloads/ClBaseSplitterWorkload.hpp	/^class ClBaseSplitterWorkload : public TypedWorkload<SplitterQueueDescriptor, DataType>$/;"	c	namespace:armnn
ClBatchNormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.cpp	/^ClBatchNormalizationFloat32Workload::ClBatchNormalizationFloat32Workload($/;"	f	class:armnn::ClBatchNormalizationFloat32Workload
ClBatchNormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^class ClBatchNormalizationFloat32Workload : public Float32Workload<BatchNormalizationQueueDescriptor>$/;"	c	namespace:armnn
ClConstantFloat32Workload	./src/armnn/backends/ClWorkloads/ClConstantFloat32Workload.hpp	/^class ClConstantFloat32Workload : public ClBaseConstantWorkload<DataType::Float32>$/;"	c	namespace:armnn
ClConstantUint8Workload	./src/armnn/backends/ClWorkloads/ClConstantUint8Workload.hpp	/^class ClConstantUint8Workload : public ClBaseConstantWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
ClContextControl	./src/armnn/backends/ClContextControl.cpp	/^ClContextControl::ClContextControl(IClTunedParameters* clTunedParameters)$/;"	f	class:armnn::ClContextControl
ClContextControl	./src/armnn/backends/ClContextControl.hpp	/^class ClContextControl$/;"	c	namespace:armnn
ClConvolution2dFloat32Workload	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.cpp	/^ClConvolution2dFloat32Workload::ClConvolution2dFloat32Workload(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClConvolution2dFloat32Workload
ClConvolution2dFloat32Workload	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^class ClConvolution2dFloat32Workload : public Float32Workload<Convolution2dQueueDescriptor>$/;"	c	namespace:armnn
ClConvolution2dUint8Workload	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.cpp	/^ClConvolution2dUint8Workload::ClConvolution2dUint8Workload(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClConvolution2dUint8Workload
ClConvolution2dUint8Workload	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^class ClConvolution2dUint8Workload : public Uint8Workload<Convolution2dQueueDescriptor>$/;"	c	namespace:armnn
ClConvolution2dWorkloadValidate	./src/armnn/backends/ClWorkloads/ClConvolution2dBaseWorkload.cpp	/^arm_compute::Status ClConvolution2dWorkloadValidate(const TensorInfo& input,$/;"	f	namespace:armnn
ClCreateReshapeWorkloadTest	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^static void ClCreateReshapeWorkloadTest()$/;"	f	file:
ClDepthwiseConvolutionFloat32Workload	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.cpp	/^ClDepthwiseConvolutionFloat32Workload::ClDepthwiseConvolutionFloat32Workload($/;"	f	class:armnn::ClDepthwiseConvolutionFloat32Workload
ClDepthwiseConvolutionFloat32Workload	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^class ClDepthwiseConvolutionFloat32Workload : public Float32Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
ClDepthwiseConvolutionUint8Workload	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.cpp	/^ClDepthwiseConvolutionUint8Workload::ClDepthwiseConvolutionUint8Workload($/;"	f	class:armnn::ClDepthwiseConvolutionUint8Workload
ClDepthwiseConvolutionUint8Workload	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^class ClDepthwiseConvolutionUint8Workload : public Uint8Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
ClFloorFloat32Workload	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.cpp	/^ClFloorFloat32Workload::ClFloorFloat32Workload(const FloorQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::ClFloorFloat32Workload
ClFloorFloat32Workload	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.hpp	/^class ClFloorFloat32Workload : public Float32Workload<FloorQueueDescriptor>$/;"	c	namespace:armnn
ClFullyConnectedFloat32Workload	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.cpp	/^ClFullyConnectedFloat32Workload::ClFullyConnectedFloat32Workload(const FullyConnectedQueueDescriptor& descriptor,$/;"	f	class:armnn::ClFullyConnectedFloat32Workload
ClFullyConnectedFloat32Workload	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^class ClFullyConnectedFloat32Workload : public armnn::Float32Workload<armnn::FullyConnectedQueueDescriptor>$/;"	c	namespace:armnn
ClL2NormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.cpp	/^ClL2NormalizationFloat32Workload::ClL2NormalizationFloat32Workload(const L2NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClL2NormalizationFloat32Workload
ClL2NormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.hpp	/^class ClL2NormalizationFloat32Workload : public Float32Workload<L2NormalizationQueueDescriptor>$/;"	c	namespace:armnn
ClMergerFloat32Workload	./src/armnn/backends/ClWorkloads/ClMergerFloat32Workload.hpp	/^class ClMergerFloat32Workload : public ClBaseMergerWorkload<armnn::DataType::Float32>$/;"	c	namespace:armnn
ClMergerUint8Workload	./src/armnn/backends/ClWorkloads/ClMergerUint8Workload.hpp	/^class ClMergerUint8Workload : public ClBaseMergerWorkload<armnn::DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
ClMultiplicationFloat32Workload	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.cpp	/^ClMultiplicationFloat32Workload::ClMultiplicationFloat32Workload(const MultiplicationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClMultiplicationFloat32Workload
ClMultiplicationFloat32Workload	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.hpp	/^class ClMultiplicationFloat32Workload : public Float32Workload<MultiplicationQueueDescriptor>$/;"	c	namespace:armnn
ClNormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.cpp	/^ClNormalizationFloat32Workload::ClNormalizationFloat32Workload(const NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClNormalizationFloat32Workload
ClNormalizationFloat32Workload	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.hpp	/^class ClNormalizationFloat32Workload : public Float32Workload<NormalizationQueueDescriptor>$/;"	c	namespace:armnn
ClNormalizationWorkloadValidate	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.cpp	/^arm_compute::Status ClNormalizationWorkloadValidate(const TensorInfo& input, const TensorInfo& output,$/;"	f	namespace:armnn
ClPermuteWorkload	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.cpp	/^ClPermuteWorkload<DataType>::ClPermuteWorkload(const PermuteQueueDescriptor& descriptor,$/;"	f	class:armnn::ClPermuteWorkload
ClPermuteWorkload	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.hpp	/^class ClPermuteWorkload : public TypedWorkload<PermuteQueueDescriptor, DataType>$/;"	c	namespace:armnn
ClPermuteWorkloadValidate	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.cpp	/^arm_compute::Status ClPermuteWorkloadValidate(const PermuteDescriptor& descriptor)$/;"	f	namespace:armnn
ClPooling2dBaseWorkload	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.cpp	/^ClPooling2dBaseWorkload<dataType>::ClPooling2dBaseWorkload($/;"	f	class:armnn::ClPooling2dBaseWorkload
ClPooling2dBaseWorkload	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.hpp	/^class ClPooling2dBaseWorkload : public TypedWorkload<Pooling2dQueueDescriptor, dataType>$/;"	c	namespace:armnn
ClPooling2dFloat32Workload	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.cpp	/^ClPooling2dFloat32Workload::ClPooling2dFloat32Workload(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClPooling2dFloat32Workload
ClPooling2dFloat32Workload	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.hpp	/^class ClPooling2dFloat32Workload : public ClPooling2dBaseWorkload<DataType::Float32>$/;"	c	namespace:armnn
ClPooling2dUint8Workload	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.cpp	/^ClPooling2dUint8Workload::ClPooling2dUint8Workload(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClPooling2dUint8Workload
ClPooling2dUint8Workload	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.hpp	/^class ClPooling2dUint8Workload : public ClPooling2dBaseWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
ClPooling2dWorkloadValidate	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.cpp	/^arm_compute::Status ClPooling2dWorkloadValidate(const TensorInfo& input,$/;"	f	namespace:armnn
ClReshapeFloat32Workload	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.cpp	/^ClReshapeFloat32Workload::ClReshapeFloat32Workload(const ReshapeQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::ClReshapeFloat32Workload
ClReshapeFloat32Workload	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.hpp	/^class ClReshapeFloat32Workload : public Float32Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
ClReshapeUint8Workload	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.cpp	/^ClReshapeUint8Workload::ClReshapeUint8Workload(const ReshapeQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::ClReshapeUint8Workload
ClReshapeUint8Workload	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.hpp	/^class ClReshapeUint8Workload : public Uint8Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
ClResizeBilinearFloat32Workload	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.cpp	/^ClResizeBilinearFloat32Workload::ClResizeBilinearFloat32Workload(const ResizeBilinearQueueDescriptor& descriptor,$/;"	f	class:armnn::ClResizeBilinearFloat32Workload
ClResizeBilinearFloat32Workload	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.hpp	/^class ClResizeBilinearFloat32Workload : public Float32Workload<ResizeBilinearQueueDescriptor>$/;"	c	namespace:armnn
ClRuntimeUnavailableException	./include/armnn/Exceptions.hpp	/^class ClRuntimeUnavailableException : public Exception$/;"	c	namespace:armnn
ClSoftmaxFloat32Workload	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.cpp	/^ClSoftmaxFloat32Workload::ClSoftmaxFloat32Workload(const SoftmaxQueueDescriptor& descriptor, const WorkloadInfo& info,$/;"	f	class:armnn::ClSoftmaxFloat32Workload
ClSoftmaxFloat32Workload	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.hpp	/^class ClSoftmaxFloat32Workload : public Float32Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
ClSoftmaxUint8Workload	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.cpp	/^ClSoftmaxUint8Workload::ClSoftmaxUint8Workload(const SoftmaxQueueDescriptor& descriptor, const WorkloadInfo& info,$/;"	f	class:armnn::ClSoftmaxUint8Workload
ClSoftmaxUint8Workload	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.hpp	/^class ClSoftmaxUint8Workload : public Uint8Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
ClSplitterFloat32Workload	./src/armnn/backends/ClWorkloads/ClSplitterFloat32Workload.hpp	/^class ClSplitterFloat32Workload : public ClBaseSplitterWorkload<DataType::Float32>$/;"	c	namespace:armnn
ClSplitterUint8Workload	./src/armnn/backends/ClWorkloads/ClSplitterUint8Workload.hpp	/^class ClSplitterUint8Workload : public ClBaseSplitterWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
ClSubTensorHandle	./src/armnn/backends/ClTensorHandle.hpp	/^    ClSubTensorHandle(arm_compute::ICLTensor& parent,$/;"	f	class:armnn::ClSubTensorHandle
ClSubTensorHandle	./src/armnn/backends/ClTensorHandle.hpp	/^class ClSubTensorHandle : public IClTensorHandle$/;"	c	namespace:armnn
ClTensorHandle	./src/armnn/backends/ClTensorHandle.hpp	/^    ClTensorHandle(const TensorInfo& tensorInfo)$/;"	f	class:armnn::ClTensorHandle
ClTensorHandle	./src/armnn/backends/ClTensorHandle.hpp	/^class ClTensorHandle : public IClTensorHandle$/;"	c	namespace:armnn
ClTunedParameters	./src/armnn/backends/ClContextControl.cpp	/^ClTunedParameters::ClTunedParameters(armnn::IClTunedParameters::Mode mode)$/;"	f	class:armnn::ClTunedParameters
ClTunedParameters	./src/armnn/backends/ClContextControl.hpp	/^class ClTunedParameters : public IClTunedParameters$/;"	c	namespace:armnn
ClWorkloadFactory	./src/armnn/backends/ClWorkloadFactory.cpp	/^ClWorkloadFactory::ClWorkloadFactory()$/;"	f	class:armnn::ClWorkloadFactory
ClWorkloadFactory	./src/armnn/backends/ClWorkloadFactory.hpp	/^class ClWorkloadFactory : public IWorkloadFactory$/;"	c	namespace:armnn
ClampRange	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^    bool ClampRange(int & start, int & end, int maxRange)$/;"	f	namespace:__anon8
ClassifierTestCase	./tests/InferenceTest.hpp	/^class ClassifierTestCase : public InferenceModelTestCase<TModel>$/;"	c	namespace:armnn::test
ClassifierTestCaseData	./tests/ClassifierTestCaseData.hpp	/^    ClassifierTestCaseData(unsigned int label, std::vector<DataType> inputImage)$/;"	f	class:ClassifierTestCaseData
ClassifierTestCaseData	./tests/ClassifierTestCaseData.hpp	/^class ClassifierTestCaseData$/;"	c
ClassifierTestCaseProvider	./tests/InferenceTest.hpp	/^class ClassifierTestCaseProvider : public IInferenceTestCaseProvider$/;"	c	namespace:armnn::test
Cleanup	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::Cleanup()$/;"	f	class:armnnCaffeParser::CaffeParser
Cleanup	./src/armnnTfParser/TfParser.cpp	/^void TfParser::Cleanup()$/;"	f	class:armnnTfParser::TfParser
ClearClCache	./src/armnn/backends/ClContextControl.cpp	/^void ClContextControl::ClearClCache()$/;"	f	class:armnn::ClContextControl
Clock	./src/armnn/Profiling.hpp	/^    typedef monotonic_clock Clock;$/;"	t	class:armnn::Profiler
Clone	./src/armnn/layers/ActivationLayer.cpp	/^ActivationLayer* ActivationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::ActivationLayer
Clone	./src/armnn/layers/AdditionLayer.cpp	/^AdditionLayer* AdditionLayer::Clone(Graph& graph) const$/;"	f	class:armnn::AdditionLayer
Clone	./src/armnn/layers/BatchNormalizationLayer.cpp	/^BatchNormalizationLayer* BatchNormalizationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::BatchNormalizationLayer
Clone	./src/armnn/layers/ConstantLayer.cpp	/^ConstantLayer* ConstantLayer::Clone(Graph& graph) const$/;"	f	class:armnn::ConstantLayer
Clone	./src/armnn/layers/Convolution2dLayer.cpp	/^Convolution2dLayer* Convolution2dLayer::Clone(Graph& graph) const$/;"	f	class:armnn::Convolution2dLayer
Clone	./src/armnn/layers/DepthwiseConvolution2dLayer.cpp	/^DepthwiseConvolution2dLayer* DepthwiseConvolution2dLayer::Clone(Graph& graph) const$/;"	f	class:armnn::DepthwiseConvolution2dLayer
Clone	./src/armnn/layers/FakeQuantizationLayer.cpp	/^FakeQuantizationLayer* FakeQuantizationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::FakeQuantizationLayer
Clone	./src/armnn/layers/FloorLayer.cpp	/^FloorLayer* FloorLayer::Clone(Graph& graph) const$/;"	f	class:armnn::FloorLayer
Clone	./src/armnn/layers/FullyConnectedLayer.cpp	/^FullyConnectedLayer* FullyConnectedLayer::Clone(Graph& graph) const$/;"	f	class:armnn::FullyConnectedLayer
Clone	./src/armnn/layers/InputLayer.cpp	/^InputLayer* InputLayer::Clone(Graph& graph) const$/;"	f	class:armnn::InputLayer
Clone	./src/armnn/layers/L2NormalizationLayer.cpp	/^L2NormalizationLayer* L2NormalizationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::L2NormalizationLayer
Clone	./src/armnn/layers/MemCopyLayer.cpp	/^MemCopyLayer* MemCopyLayer::Clone(Graph& graph) const$/;"	f	class:armnn::MemCopyLayer
Clone	./src/armnn/layers/MergerLayer.cpp	/^MergerLayer* MergerLayer::Clone(Graph& graph) const$/;"	f	class:armnn::MergerLayer
Clone	./src/armnn/layers/MultiplicationLayer.cpp	/^MultiplicationLayer* MultiplicationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::MultiplicationLayer
Clone	./src/armnn/layers/NormalizationLayer.cpp	/^NormalizationLayer* NormalizationLayer::Clone(Graph& graph) const$/;"	f	class:armnn::NormalizationLayer
Clone	./src/armnn/layers/OutputLayer.cpp	/^OutputLayer* OutputLayer::Clone(Graph& graph) const$/;"	f	class:armnn::OutputLayer
Clone	./src/armnn/layers/PermuteLayer.cpp	/^PermuteLayer* PermuteLayer::Clone(Graph& graph) const$/;"	f	class:armnn::PermuteLayer
Clone	./src/armnn/layers/Pooling2dLayer.cpp	/^Pooling2dLayer* Pooling2dLayer::Clone(Graph& graph) const$/;"	f	class:armnn::Pooling2dLayer
Clone	./src/armnn/layers/ReshapeLayer.cpp	/^ReshapeLayer* ReshapeLayer::Clone(Graph& graph) const$/;"	f	class:armnn::ReshapeLayer
Clone	./src/armnn/layers/ResizeBilinearLayer.cpp	/^ResizeBilinearLayer* ResizeBilinearLayer::Clone(Graph& graph) const$/;"	f	class:armnn::ResizeBilinearLayer
Clone	./src/armnn/layers/SoftmaxLayer.cpp	/^SoftmaxLayer* SoftmaxLayer::Clone(Graph& graph) const$/;"	f	class:armnn::SoftmaxLayer
Clone	./src/armnn/layers/SplitterLayer.cpp	/^SplitterLayer* SplitterLayer::Clone(Graph& graph) const$/;"	f	class:armnn::SplitterLayer
CloneBase	./src/armnn/layers/LayerCloneBase.hpp	/^LayerType* Layer::CloneBase(Graph& graph, Params&& ... params) const$/;"	f	class:armnn::Layer
CollectQueueDescriptorInputs	./src/armnn/Layer.hpp	/^    void CollectQueueDescriptorInputs(QueueDescriptor& descriptor, WorkloadInfo& info, const Graph& graph) const$/;"	f	class:armnn::Layer
CollectQueueDescriptorOutputs	./src/armnn/Layer.hpp	/^    void CollectQueueDescriptorOutputs(QueueDescriptor& descriptor, WorkloadInfo& info, const Graph& graph) const$/;"	f	class:armnn::Layer
CollectWorkloadInputs	./src/armnn/Layer.cpp	/^void Layer::CollectWorkloadInputs(WorkloadDataCollector& dataCollector, const Graph& graph) const$/;"	f	class:armnn::Layer
CollectWorkloadOutputs	./src/armnn/Layer.cpp	/^void Layer::CollectWorkloadOutputs(WorkloadDataCollector& dataCollector, const Graph& graph) const$/;"	f	class:armnn::Layer
CollectWorkloadOutputs	./src/armnn/backends/OutputHandler.cpp	/^void OutputHandler::CollectWorkloadOutputs(WorkloadDataCollector& dataCollector) const$/;"	f	class:armnn::OutputHandler
CommandLineOptions	./tests/InferenceModel.hpp	/^    struct CommandLineOptions$/;"	s	class:InferenceModel
Compare	./src/armnn/test/TensorHelpers.hpp	/^    static bool Compare(T a, T b)$/;"	f	struct:SelectiveComparer
CompareActivationTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float,4> CompareActivationTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareActivationTestImpl	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<T,4> CompareActivationTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareActivationUint8Test	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<uint8_t,4> CompareActivationUint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareAdditionTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> CompareAdditionTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareBatchNormTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> CompareBatchNormTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareBoundedReLuTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float, 4> CompareBoundedReLuTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareConvolution2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> CompareConvolution2dTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareConvolution2dTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T,4> CompareConvolution2dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareDepthwiseConvolution2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T,4> CompareDepthwiseConvolution2dTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareDepthwiseConvolution2dTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T, 4> CompareDepthwiseConvolution2dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareIClTensorHandleShape	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^boost::test_tools::predicate_result CompareIClTensorHandleShape(IClTensorHandle*                    tensorHandle,$/;"	f
CompareMultiplicationTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> CompareMultiplicationTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareNormalizationTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> CompareNormalizationTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareNormalizationTestImpl	./src/armnn/backends/test/NormTestImpl.hpp	/^LayerTestResult<float,4> CompareNormalizationTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ComparePooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ComparePooling2dTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ComparePooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> ComparePooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ComparePooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ComparePooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareRefTestFunction	./src/armnn/test/UnitTests.hpp	/^void CompareRefTestFunction(const char* testName, TFuncPtr testFunction, Args... args)$/;"	f
CompareSoftmaxTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,2> CompareSoftmaxTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareSoftmaxTestImpl	./src/armnn/backends/test/SoftmaxTestImpl.hpp	/^LayerTestResult<T, 2> CompareSoftmaxTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareSoftmaxUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t,2> CompareSoftmaxUint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
CompareTensorHandleShape	./src/armnn/test/CreateWorkloadClNeon.hpp	/^boost::test_tools::predicate_result CompareTensorHandleShape(IComputeTensorHandle*               tensorHandle,$/;"	f	namespace:__anon21
CompareTensors	./src/armnn/test/TensorHelpers.hpp	/^boost::test_tools::predicate_result CompareTensors(const boost::multi_array<T, n>& a,$/;"	f
CompareTestResultIfSupported	./src/armnn/test/UnitTests.hpp	/^void CompareTestResultIfSupported(const std::string& testName, const LayerTestResult<T, n>& testResult)$/;"	f
Compute	./include/armnn/Types.hpp	/^enum class Compute$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding
ConcatFixture	./src/armnnCaffeParser/test/TestConcat.cpp	/^    ConcatFixture()$/;"	f	struct:ConcatFixture
ConcatFixture	./src/armnnCaffeParser/test/TestConcat.cpp	/^struct ConcatFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
ConcatFixture	./src/armnnTfParser/test/Concat.cpp	/^    explicit ConcatFixture(const armnn::TensorShape& inputShape0, const armnn::TensorShape& inputShape1,$/;"	f	struct:ConcatFixture
ConcatFixture	./src/armnnTfParser/test/Concat.cpp	/^struct ConcatFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConcatFixtureDim1	./src/armnnTfParser/test/Concat.cpp	/^    ConcatFixtureDim1() : ConcatFixture({ 1, 2, 3, 4 }, { 1, 2, 3, 4 }, 1) {}$/;"	f	struct:ConcatFixtureDim1
ConcatFixtureDim1	./src/armnnTfParser/test/Concat.cpp	/^struct ConcatFixtureDim1 : ConcatFixture$/;"	s	file:
ConcatFixtureDim3	./src/armnnTfParser/test/Concat.cpp	/^    ConcatFixtureDim3() : ConcatFixture({ 1, 2, 3, 4 }, { 1, 2, 3, 4 }, 3) {}$/;"	f	struct:ConcatFixtureDim3
ConcatFixtureDim3	./src/armnnTfParser/test/Concat.cpp	/^struct ConcatFixtureDim3 : ConcatFixture$/;"	s	file:
ConcatFixtureNCHW	./src/armnnTfParser/test/Concat.cpp	/^    ConcatFixtureNCHW() : ConcatFixture({ 1, 1, 2, 2 }, { 1, 1, 2, 2 }, 1 ) {}$/;"	f	struct:ConcatFixtureNCHW
ConcatFixtureNCHW	./src/armnnTfParser/test/Concat.cpp	/^struct ConcatFixtureNCHW : ConcatFixture$/;"	s	file:
ConcatFixtureNHWC	./src/armnnTfParser/test/Concat.cpp	/^    ConcatFixtureNHWC() : ConcatFixture({ 1, 1, 2, 2 }, { 1, 1, 2, 2 }, 3 ) {}$/;"	f	struct:ConcatFixtureNHWC
ConcatFixtureNHWC	./src/armnnTfParser/test/Concat.cpp	/^struct ConcatFixtureNHWC : ConcatFixture$/;"	s	file:
ConcatOfConcatsFixture	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^    explicit ConcatOfConcatsFixture(const armnn::TensorShape& inputShape0, const armnn::TensorShape& inputShape1,$/;"	f	struct:ConcatOfConcatsFixture
ConcatOfConcatsFixture	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^struct ConcatOfConcatsFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConcatOfConcatsFixtureNCHW	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^    ConcatOfConcatsFixtureNCHW() : ConcatOfConcatsFixture({ 1, 1, 2, 2 }, { 1, 1, 2, 2 }, { 1, 1, 2, 2 },$/;"	f	struct:ConcatOfConcatsFixtureNCHW
ConcatOfConcatsFixtureNCHW	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^struct ConcatOfConcatsFixtureNCHW : ConcatOfConcatsFixture$/;"	s	file:
ConcatOfConcatsFixtureNHWC	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^    ConcatOfConcatsFixtureNHWC() : ConcatOfConcatsFixture({ 1, 1, 2, 2 }, { 1, 1, 2, 2 }, { 1, 1, 2, 2 },$/;"	f	struct:ConcatOfConcatsFixtureNHWC
ConcatOfConcatsFixtureNHWC	./src/armnnTfParser/test/ConcatOfConcats.cpp	/^struct ConcatOfConcatsFixtureNHWC : ConcatOfConcatsFixture$/;"	s	file:
Concatenate	./src/armnn/backends/test/LayerTests.cpp	/^void Concatenate(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation1dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 1> Concatenation1dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation1dTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 1> Concatenation1dTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale, int32_t qOffset)$/;"	f
Concatenation1dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 1> Concatenation1dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim0DiffInputDimsTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> Concatenation2dDim0DiffInputDimsTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim0DiffInputDimsTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 2> Concatenation2dDim0DiffInputDimsTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation2dDim0DiffInputDimsUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 2> Concatenation2dDim0DiffInputDimsUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim0Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> Concatenation2dDim0Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim0TestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 2> Concatenation2dDim0TestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation2dDim0Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 2> Concatenation2dDim0Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim1DiffInputDimsTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> Concatenation2dDim1DiffInputDimsTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim1DiffInputDimsTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 2> Concatenation2dDim1DiffInputDimsTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation2dDim1DiffInputDimsUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 2> Concatenation2dDim1DiffInputDimsUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim1Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> Concatenation2dDim1Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dDim1TestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 2> Concatenation2dDim1TestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation2dDim1Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 2> Concatenation2dDim1Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation2dTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 2> Concatenation2dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation3dDim0DiffInputDimsTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim0DiffInputDimsTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim0DiffInputDimsTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim0DiffInputDimsTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation3dDim0DiffInputDimsUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim0DiffInputDimsUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim0Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim0Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim0TestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim0TestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation3dDim0Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim0Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim1DiffInputDimsTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim1DiffInputDimsTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim1DiffInputDimsTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim1DiffInputDimsTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation3dDim1DiffInputDimsUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim1DiffInputDimsUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim1Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim1Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim1TestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim1TestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation3dDim1Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim1Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim2DiffInputDimsTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim2DiffInputDimsTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim2DiffInputDimsTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim2DiffInputDimsTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale,$/;"	f
Concatenation3dDim2DiffInputDimsUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim2DiffInputDimsUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim2Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> Concatenation3dDim2Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dDim2TestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dDim2TestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Concatenation3dDim2Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> Concatenation3dDim2Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Concatenation3dTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 3> Concatenation3dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ConditionalThrow	./include/armnn/Exceptions.hpp	/^void ConditionalThrow(bool condition, const std::string& message)$/;"	f	namespace:armnn
ConditionalThrowIfNotEqual	./include/armnn/Exceptions.hpp	/^void ConditionalThrowIfNotEqual(const std::string& message,$/;"	f	namespace:armnn
ConfigureLogging	./src/armnn/Utils.cpp	/^void ConfigureLogging(bool printToStandardOutput, bool printToDebugOutput, LogSeverity severity)$/;"	f	namespace:armnn
ConfigureLogging	./src/armnnUtils/Logging.cpp	/^void ConfigureLogging(boost::log::core* core, bool printToStandardOutput, bool printToDebugOutput,$/;"	f	namespace:armnnUtils
ConfigureLoggingFixture	./src/armnn/test/UnitTests.cpp	/^    ConfigureLoggingFixture()$/;"	f	struct:ConfigureLoggingFixture
ConfigureLoggingFixture	./src/armnn/test/UnitTests.cpp	/^BOOST_GLOBAL_FIXTURE(ConfigureLoggingFixture);$/;"	v
ConfigureLoggingFixture	./src/armnn/test/UnitTests.cpp	/^struct ConfigureLoggingFixture$/;"	s	file:
ConfigureLoggingTest	./src/armnn/test/UnitTests.hpp	/^inline void ConfigureLoggingTest()$/;"	f
Connect	./src/armnn/Layer.cpp	/^int OutputSlot::Connect(InputSlot& destination)$/;"	f	class:armnn::OutputSlot
Connect	./src/armnn/test/CreateWorkload.hpp	/^void Connect(Layer* from, Layer* to, const TensorInfo& tensorInfo, unsigned int fromIndex = 0, unsigned int toIndex = 0)$/;"	f	namespace:__anon20
ConstCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^ConstCpuTensorHandle::ConstCpuTensorHandle(const TensorInfo& tensorInfo)$/;"	f	class:armnn::ConstCpuTensorHandle
ConstCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^class ConstCpuTensorHandle : public ITensorHandle$/;"	c	namespace:armnn
ConstPassthroughCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^    ConstPassthroughCpuTensorHandle(const TensorInfo& tensorInfo, const void* mem)$/;"	f	class:armnn::ConstPassthroughCpuTensorHandle
ConstPassthroughCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^class ConstPassthroughCpuTensorHandle : public ConstCpuTensorHandle$/;"	c	namespace:armnn
ConstTensor	./include/armnn/Tensor.hpp	/^    ConstTensor() : BaseTensor<const void*>() {} \/\/ This needs to be redefined explicitly??$/;"	f	class:armnn::ConstTensor
ConstTensor	./include/armnn/Tensor.hpp	/^    ConstTensor(const Tensor& other) : BaseTensor<const void*>(other.GetInfo(), other.GetMemoryArea()) {}$/;"	f	class:armnn::ConstTensor
ConstTensor	./include/armnn/Tensor.hpp	/^    ConstTensor(const TensorInfo& info, const ContainerType<T, ContainerArgs...>& container)$/;"	f	class:armnn::ConstTensor
ConstTensor	./include/armnn/Tensor.hpp	/^class ConstTensor : public BaseTensor<const void*>$/;"	c	namespace:armnn
Constant	./src/armnn/InternalTypes.hpp	/^    Constant,$/;"	m	class:armnn::LayerType
ConstantCreateFixture	./src/armnnTfParser/test/Constant.cpp	/^    ConstantCreateFixture()$/;"	f	struct:ConstantCreateFixture
ConstantCreateFixture	./src/armnnTfParser/test/Constant.cpp	/^struct ConstantCreateFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConstantFixture	./src/armnnTfParser/test/Constant.cpp	/^    ConstantFixture()$/;"	f	struct:ConstantFixture
ConstantFixture	./src/armnnTfParser/test/Constant.cpp	/^struct ConstantFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConstantLayer	./src/armnn/layers/ConstantLayer.cpp	/^ConstantLayer::ConstantLayer(const std::shared_ptr<ScopedCpuTensorHandle>& input, const char* name)$/;"	f	class:armnn::ConstantLayer
ConstantLayer	./src/armnn/layers/ConstantLayer.hpp	/^class ConstantLayer : public Layer$/;"	c	namespace:armnn
ConstantLinearActivationTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float, 4> ConstantLinearActivationTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ConstantLinearActivationTestCommon	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<T,4> ConstantLinearActivationTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ConstantLinearActivationUint8Test	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<uint8_t, 4> ConstantLinearActivationUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ConstantQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    ConstantQueueDescriptor()$/;"	f	struct:armnn::ConstantQueueDescriptor
ConstantQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct ConstantQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
ConstantReusedFixture	./src/armnnTfParser/test/Constant.cpp	/^    ConstantReusedFixture()$/;"	f	struct:ConstantReusedFixture
ConstantReusedFixture	./src/armnnTfParser/test/Constant.cpp	/^struct ConstantReusedFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConstantTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ConstantTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ConstantTestImpl	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> ConstantTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
ConstantTestUint8	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ConstantTestUint8(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ConstantUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ConstantUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ConstantUsageFloat32Test	./src/armnn/test/EndToEndTest.cpp	/^static void ConstantUsageFloat32Test(armnn::Compute computeDevice)$/;"	f	file:
ConstantUsageTest	./src/armnn/test/EndToEndTest.cpp	/^void ConstantUsageTest(armnn::Compute computeDevice,$/;"	f
ConstantUsageUint8Test	./src/armnn/test/EndToEndTest.cpp	/^static void ConstantUsageUint8Test(armnn::Compute computeDevice)$/;"	f	file:
ConstantValueListFixture	./src/armnnTfParser/test/Constant.cpp	/^    ConstantValueListFixture()$/;"	f	struct:ConstantValueListFixture
ConstantValueListFixture	./src/armnnTfParser/test/Constant.cpp	/^struct ConstantValueListFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ConvImpl	./src/armnn/backends/RefWorkloads/ConvImpl.hpp	/^static void ConvImpl(ConvData data,$/;"	f	namespace:armnn
ConvertActivationDescriptorToAclActivationLayerInfo	./src/armnn/backends/ArmComputeUtils.hpp	/^ConvertActivationDescriptorToAclActivationLayerInfo(const ActivationDescriptor& actDesc)$/;"	f	namespace:armnn
ConvertActivationFunctionToAclActivationFunction	./src/armnn/backends/ArmComputeUtils.hpp	/^ConvertActivationFunctionToAclActivationFunction(ActivationFunction armnnFunction)$/;"	f	namespace:armnn
ConvertNormalizationAlgorithmChannelToAclNormType	./src/armnn/backends/ArmComputeUtils.hpp	/^ConvertNormalizationAlgorithmChannelToAclNormType(NormalizationAlgorithmChannel channelType)$/;"	f	namespace:armnn
ConvertOutputShapeRoundingToAclDimensionRoundingType	./src/armnn/backends/ArmComputeUtils.hpp	/^inline arm_compute::DimensionRoundingType ConvertOutputShapeRoundingToAclDimensionRoundingType(OutputShapeRounding$/;"	f	namespace:armnn
ConvertPoolingAlgorithmToAclPoolingType	./src/armnn/backends/ArmComputeUtils.hpp	/^inline arm_compute::PoolingType ConvertPoolingAlgorithmToAclPoolingType(PoolingAlgorithm poolingAlgorithm)$/;"	f	namespace:armnn
ConvertTfTensorDataType	./src/armnnTfParser/TfParser.cpp	/^DataType ConvertTfTensorDataType(const tensorflow::DataType tfDataType)$/;"	f	namespace:armnnTfParser
Convolution1dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> Convolution1dTest(armnn::IWorkloadFactory& workloadFactory, bool biasEnabled)$/;"	f
Convolution1dTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T,4> Convolution1dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
Convolution1dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> Convolution1dUint8Test(armnn::IWorkloadFactory& workloadFactory, bool biasEnabled)$/;"	f
Convolution2d	./src/armnn/InternalTypes.hpp	/^    Convolution2d,$/;"	m	class:armnn::LayerType
Convolution2dAsymmetricPaddingLargerThanHalfKernelSizeTest	./src/armnn/backends/test/LayerTests.cpp	/^Convolution2dAsymmetricPaddingLargerThanHalfKernelSizeTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Convolution2dAsymmetricPaddingLargerThanHalfKernelSizeTestCommon	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> Convolution2dAsymmetricPaddingLargerThanHalfKernelSizeTestCommon($/;"	f
Convolution2dAsymmetricPaddingTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> Convolution2dAsymmetricPaddingTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Convolution2dDescriptor	./include/armnn/Descriptors.hpp	/^    Convolution2dDescriptor()$/;"	f	struct:armnn::Convolution2dDescriptor
Convolution2dDescriptor	./include/armnn/Descriptors.hpp	/^struct Convolution2dDescriptor$/;"	s	namespace:armnn
Convolution2dDilation1Fixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    Convolution2dDilation1Fixture() : Convolution2dFixture("SAME", 1, 1){}$/;"	f	struct:Convolution2dDilation1Fixture
Convolution2dDilation1Fixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dDilation1Fixture : Convolution2dFixture$/;"	s	file:
Convolution2dFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    explicit Convolution2dFixture(const char* paddingType)$/;"	f	struct:Convolution2dFixture
Convolution2dFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    explicit Convolution2dFixture(const char* paddingType, int stride, int dilation = 0)$/;"	f	struct:Convolution2dFixture
Convolution2dFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Convolution2dLayer	./src/armnn/layers/Convolution2dLayer.cpp	/^Convolution2dLayer::Convolution2dLayer(const Convolution2dDescriptor& param, const char* name)$/;"	f	class:armnn::Convolution2dLayer
Convolution2dLayer	./src/armnn/layers/Convolution2dLayer.hpp	/^class Convolution2dLayer : public LayerWithParameters<Convolution2dDescriptor>$/;"	c	namespace:armnn
Convolution2dQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    Convolution2dQueueDescriptor()$/;"	f	struct:armnn::Convolution2dQueueDescriptor
Convolution2dQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct Convolution2dQueueDescriptor : QueueDescriptorWithParameters<Convolution2dDescriptor>$/;"	s	namespace:armnn
Convolution2dSameFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    Convolution2dSameFixture() : Convolution2dFixture("SAME", 1){}$/;"	f	struct:Convolution2dSameFixture
Convolution2dSameFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dSameFixture : Convolution2dFixture$/;"	s	file:
Convolution2dStride2SameFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    Convolution2dStride2SameFixture() : Convolution2dFixture("SAME", 2){}$/;"	f	struct:Convolution2dStride2SameFixture
Convolution2dStride2SameFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dStride2SameFixture : Convolution2dFixture$/;"	s	file:
Convolution2dStride2ValidFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    Convolution2dStride2ValidFixture() : Convolution2dFixture("VALID", 2){}$/;"	f	struct:Convolution2dStride2ValidFixture
Convolution2dStride2ValidFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dStride2ValidFixture : Convolution2dFixture$/;"	s	file:
Convolution2dValidFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^    Convolution2dValidFixture() : Convolution2dFixture("VALID", 1){}$/;"	f	struct:Convolution2dValidFixture
Convolution2dValidFixture	./src/armnnTfParser/test/Convolution2d.cpp	/^struct Convolution2dValidFixture : Convolution2dFixture$/;"	s	file:
Convolution2dWorkloadTest	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^static void Convolution2dWorkloadTest()$/;"	f	file:
CopyArmComputeClTensorData	./src/armnn/backends/ClWorkloadUtils.hpp	/^void CopyArmComputeClTensorData(const T* srcData, arm_compute::CLTensor& dstTensor)$/;"	f	namespace:armnn
CopyArmComputeITensorData	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^void CopyArmComputeITensorData(const T* srcData, arm_compute::ITensor& dstTensor)$/;"	f	namespace:armnn::armcomputetensorutils
CopyArmComputeITensorData	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^void CopyArmComputeITensorData(const arm_compute::ITensor& srcTensor, T* dstData)$/;"	f	namespace:armnn::armcomputetensorutils
CopyDataFromITensorHandle	./src/armnn/backends/test/TensorCopyUtils.cpp	/^void CopyDataFromITensorHandle(void* mem, const armnn::ITensorHandle* tensorHandle)$/;"	f
CopyDataToITensorHandle	./src/armnn/backends/test/TensorCopyUtils.cpp	/^void CopyDataToITensorHandle(armnn::ITensorHandle* tensorHandle, const void* mem)$/;"	f
CopyErrorMessage	./src/armnn/LayerSupport.cpp	/^void CopyErrorMessage(char* truncatedString, const char* fullString, size_t maxLength)$/;"	f	namespace:armnn
CopyFrom	./src/armnn/backends/CpuTensorHandle.cpp	/^void ScopedCpuTensorHandle::CopyFrom(const ScopedCpuTensorHandle& other)$/;"	f	class:armnn::ScopedCpuTensorHandle
CopyFrom	./src/armnn/backends/CpuTensorHandle.cpp	/^void ScopedCpuTensorHandle::CopyFrom(const void* srcMemory, unsigned int numBytes)$/;"	f	class:armnn::ScopedCpuTensorHandle
CopyFromAclBackendToCpu	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromAclBackendToCpu(const arm_compute::ITensor& srcAclTensor, CpuTensorHandle& dstHandle)$/;"	f	namespace:armnn::__anon5
CopyFromClToCpuWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromClToCpuWorkload<DataType>::CopyFromClToCpuWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromClToCpuWorkload
CopyFromClToCpuWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromClToCpuWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromClToNeonWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromClToNeonWorkload<DataType>::CopyFromClToNeonWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromClToNeonWorkload
CopyFromClToNeonWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromClToNeonWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromCpuToAclBackend	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromCpuToAclBackend(const ConstCpuTensorHandle& srcHandle, arm_compute::ITensor& dstAclTensor)$/;"	f	namespace:armnn::__anon5
CopyFromCpuToClWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromCpuToClWorkload<DataType>::CopyFromCpuToClWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromCpuToClWorkload
CopyFromCpuToClWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromCpuToClWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromCpuToCpu	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromCpuToCpu(const ConstCpuTensorHandle& srcHandle, CpuTensorHandle& dstHandle)$/;"	f	namespace:armnn::__anon5
CopyFromCpuToCpuWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromCpuToCpuWorkload<DataType>::CopyFromCpuToCpuWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromCpuToCpuWorkload
CopyFromCpuToCpuWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromCpuToCpuWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromCpuToNeonWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromCpuToNeonWorkload<DataType>::CopyFromCpuToNeonWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromCpuToNeonWorkload
CopyFromCpuToNeonWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromCpuToNeonWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromNeonToClWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromNeonToClWorkload<DataType>::CopyFromNeonToClWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromNeonToClWorkload
CopyFromNeonToClWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromNeonToClWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyFromNeonToCpuWorkload	./src/armnn/backends/MemCopyWorkload.cpp	/^CopyFromNeonToCpuWorkload<DataType>::CopyFromNeonToCpuWorkload(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::CopyFromNeonToCpuWorkload
CopyFromNeonToCpuWorkload	./src/armnn/backends/MemCopyWorkload.hpp	/^class CopyFromNeonToCpuWorkload : public TypedWorkload<MemCopyQueueDescriptor, DataType>$/;"	c	namespace:armnn
CopyLayersFixture	./src/armnn/test/GraphTests.cpp	/^    CopyLayersFixture()$/;"	f	struct:CopyLayersFixture
CopyLayersFixture	./src/armnn/test/GraphTests.cpp	/^struct CopyLayersFixture$/;"	s	file:
CopyViaSplitterTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 3> CopyViaSplitterTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
CopyViaSplitterTestImpl	./src/armnn/backends/test/SplitterTestImpl.hpp	/^LayerTestResult<T, 3> CopyViaSplitterTestImpl(armnn::IWorkloadFactory& workloadFactory, float qScale, int32_t qOffset)$/;"	f
CopyViaSplitterUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> CopyViaSplitterUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Cow	./tests/YoloDatabase.cpp	/^    Cow,$/;"	m	class:__anon34::YoloVocClass	file:
Cpu	./src/armnn/backends/ITensorHandle.hpp	/^        Cpu,$/;"	e	enum:armnn::ITensorHandle::Type
CpuAcc	./include/armnn/Types.hpp	/^    CpuAcc      = 1,  \/\/ CPU Execution: NEON: ArmCompute$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
CpuRef	./include/armnn/Types.hpp	/^    CpuRef      = 0,  \/\/ CPU Execution: Reference C++ kernels$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
CpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^CpuTensorHandle::CpuTensorHandle(const TensorInfo& tensorInfo)$/;"	f	class:armnn::CpuTensorHandle
CpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^class CpuTensorHandle : public ConstCpuTensorHandle$/;"	c	namespace:armnn
Create	./src/armnn/Network.cpp	/^armnn::INetworkPtr INetwork::Create()$/;"	f	class:armnn::INetwork
Create	./src/armnn/Runtime.cpp	/^IRuntimePtr IRuntime::Create(const CreationOptions& options)$/;"	f	class:armnn::IRuntime
Create	./src/armnn/backends/ClContextControl.cpp	/^armnn::IClTunedParametersPtr IClTunedParameters::Create(armnn::IClTunedParameters::Mode mode)$/;"	f	class:armnn::IClTunedParameters
Create	./src/armnnCaffeParser/CaffeParser.cpp	/^ICaffeParserPtr ICaffeParser::Create()$/;"	f	class:armnnCaffeParser::ICaffeParser
Create	./src/armnnTfParser/TfParser.cpp	/^ITfParserPtr ITfParser::Create()$/;"	f	class:armnnTfParser::ITfParser
CreateAclNormalizationLayerInfoForL2Normalization	./src/armnn/backends/ArmComputeUtils.hpp	/^CreateAclNormalizationLayerInfoForL2Normalization(const armnn::TensorInfo& tensorInfo)$/;"	f	namespace:armnn
CreateActivation	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateActivation(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateActivation	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateActivation(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateActivation	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateActivation(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateActivationWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<ActivationWorkload> CreateActivationWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateAddition	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateAddition(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateAddition	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateAddition(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateAddition	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateAddition(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateAddition	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateAddition(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateAddition	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateAddition(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateAdditionWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<AdditionWorkload> CreateAdditionWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateAndDropDummyNetwork	./src/armnn/test/RuntimeTests.cpp	/^void CreateAndDropDummyNetwork(armnn::Runtime & runtime)$/;"	f
CreateBatchNormalization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateBatchNormalization($/;"	f	class:armnn::ClWorkloadFactory
CreateBatchNormalization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateBatchNormalization($/;"	f	class:armnn::ClWorkloadFactory
CreateBatchNormalization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateBatchNormalization(const BatchNormalizationQueueDescriptor& data,$/;"	f	class:armnn::NeonWorkloadFactory
CreateBatchNormalization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateBatchNormalization($/;"	f	class:armnn::NeonWorkloadFactory
CreateBatchNormalization	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateBatchNormalization($/;"	f	class:armnn::RefWorkloadFactory
CreateBatchNormalizationWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<BatchNormalizationFloat32Workload> CreateBatchNormalizationWorkloadTest($/;"	f	namespace:__anon20
CreateConstant	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateConstant(const ConstantQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateConstant	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateConstant(const ConstantQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateConstant	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateConstant(const ConstantQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateConvolution2d	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateConvolution2d(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateConvolution2d	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateConvolution2d(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateConvolution2d	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateConvolution2d(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateConvolution2d	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateConvolution2d($/;"	f	class:armnn::NeonWorkloadFactory
CreateConvolution2d	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateConvolution2d($/;"	f	class:armnn::RefWorkloadFactory
CreateConvolution2dWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<Convolution2dWorkload> CreateConvolution2dWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateDepthwiseConvolution2d	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateDepthwiseConvolution2d($/;"	f	class:armnn::ClWorkloadFactory
CreateDepthwiseConvolution2d	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateDepthwiseConvolution2d($/;"	f	class:armnn::NeonWorkloadFactory
CreateDepthwiseConvolution2d	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateDepthwiseConvolution2d($/;"	f	class:armnn::RefWorkloadFactory
CreateDepthwiseConvolution2dWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<DepthwiseConvolution2dFloat32Workload> CreateDepthwiseConvolution2dWorkloadTest($/;"	f	namespace:__anon20
CreateDirectConvolution2dWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<Convolution2dWorkload> CreateDirectConvolution2dWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateFakeQuantization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateFakeQuantization($/;"	f	class:armnn::ClWorkloadFactory
CreateFakeQuantization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateFakeQuantization(const FakeQuantizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateFakeQuantization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateFakeQuantization($/;"	f	class:armnn::NeonWorkloadFactory
CreateFakeQuantization	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateFakeQuantization($/;"	f	class:armnn::RefWorkloadFactory
CreateFloor	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateFloor(const FloorQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateFloor	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateFloor(const FloorQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateFloor	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateFloor(const FloorQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateFullyConnected	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateFullyConnected(const FullyConnectedQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateFullyConnected	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateFullyConnected($/;"	f	class:armnn::ClWorkloadFactory
CreateFullyConnected	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateFullyConnected(const FullyConnectedQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateFullyConnected	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateFullyConnected($/;"	f	class:armnn::NeonWorkloadFactory
CreateFullyConnected	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateFullyConnected($/;"	f	class:armnn::RefWorkloadFactory
CreateFullyConnectedWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<FullyConnectedWorkload> CreateFullyConnectedWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateInput	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateInput(const InputQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateInput	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateInput(const InputQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateInput	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateInput(const InputQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateL2Normalization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateL2Normalization(const L2NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateL2Normalization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateL2Normalization(const L2NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateL2Normalization	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateL2Normalization(const L2NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateL2NormalizationWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<L2NormalizationWorkload> CreateL2NormalizationWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateMemCopy	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateMemCopy(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateMemCopy	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateMemCopy(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateMemCopy	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateMemCopy(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateMemCopy	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateMemCopy(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateMemCopy	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateMemCopy(const MemCopyQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateMemCopyWorkloads	./src/armnn/test/CreateWorkloadClNeon.hpp	/^void CreateMemCopyWorkloads(IWorkloadFactory& factory)$/;"	f	namespace:__anon21
CreateMerger	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateMerger(const MergerQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateMerger	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateMerger(const MergerQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateMerger	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateMerger(const MergerQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateMerger	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateMerger(const MergerQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateMerger	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateMerger(const MergerQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateMergerDescriptorForConcatenation	./include/armnn/Descriptors.hpp	/^OriginsDescriptor CreateMergerDescriptorForConcatenation(TensorShapeIt first, TensorShapeIt last,$/;"	f	namespace:armnn
CreateMergerDescriptorForConcatenation	./src/armnn/backends/test/LayerTests.cpp	/^armnn::OriginsDescriptor CreateMergerDescriptorForConcatenation($/;"	f
CreateMultiplication	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateMultiplication(const MultiplicationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateMultiplication	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateMultiplication($/;"	f	class:armnn::ClWorkloadFactory
CreateMultiplication	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateMultiplication(const MultiplicationQueueDescriptor& data,$/;"	f	class:armnn::NeonWorkloadFactory
CreateMultiplication	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateMultiplication($/;"	f	class:armnn::NeonWorkloadFactory
CreateMultiplication	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateMultiplication($/;"	f	class:armnn::RefWorkloadFactory
CreateMultiplicationWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<MultiplicationWorkload> CreateMultiplicationWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateNetworkFromBinaryFile	./src/armnnCaffeParser/CaffeParser.cpp	/^INetworkPtr CaffeParser::CreateNetworkFromBinaryFile(const char* graphFile,$/;"	f	class:armnnCaffeParser::CaffeParser
CreateNetworkFromBinaryFile	./src/armnnTfParser/TfParser.cpp	/^INetworkPtr TfParser::CreateNetworkFromBinaryFile(const char* graphFile,$/;"	f	class:armnnTfParser::TfParser
CreateNetworkFromGraphDef	./src/armnnTfParser/TfParser.cpp	/^INetworkPtr TfParser::CreateNetworkFromGraphDef(const tensorflow::GraphDef& graphDef,$/;"	f	class:armnnTfParser::TfParser
CreateNetworkFromNetParameter	./src/armnnCaffeParser/CaffeParser.cpp	/^INetworkPtr CaffeParser::CreateNetworkFromNetParameter(NetParameter& netParam,$/;"	f	class:armnnCaffeParser::CaffeParser
CreateNetworkFromString	./src/armnnCaffeParser/CaffeParser.cpp	/^INetworkPtr CaffeParser::CreateNetworkFromString(const char* protoText,$/;"	f	class:armnnCaffeParser::CaffeParser
CreateNetworkFromString	./src/armnnTfParser/TfParser.cpp	/^INetworkPtr TfParser::CreateNetworkFromString(const char* protoText,$/;"	f	class:armnnTfParser::TfParser
CreateNetworkFromTextFile	./src/armnnCaffeParser/CaffeParser.cpp	/^INetworkPtr CaffeParser::CreateNetworkFromTextFile(const char* graphFile,$/;"	f	class:armnnCaffeParser::CaffeParser
CreateNetworkFromTextFile	./src/armnnTfParser/TfParser.cpp	/^INetworkPtr TfParser::CreateNetworkFromTextFile(const char* graphFile,$/;"	f	class:armnnTfParser::TfParser
CreateNormalization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateNormalization(const NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateNormalization	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateNormalization(const NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateNormalization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateNormalization(const NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateNormalization	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateNormalization($/;"	f	class:armnn::NeonWorkloadFactory
CreateNormalization	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreateNormalization($/;"	f	class:armnn::RefWorkloadFactory
CreateNormalizationWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<NormalizationFloat32Workload> CreateNormalizationWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateOutput	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateOutput(const OutputQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateOutput	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateOutput(const OutputQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateOutput	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateOutput(const OutputQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreatePermute	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreatePermute(const PermuteQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreatePermute	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreatePermute(const PermuteQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreatePermute	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreatePermute(const PermuteQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreatePooling2d	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreatePooling2d(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreatePooling2d	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreatePooling2d(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreatePooling2d	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreatePooling2d(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreatePooling2d	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreatePooling2d(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreatePooling2d	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> RefWorkloadFactory::CreatePooling2d(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreatePooling2dWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<Pooling2dWorkload> CreatePooling2dWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateRaw	./src/armnn/Network.cpp	/^armnn::INetwork* INetwork::CreateRaw()$/;"	f	class:armnn::INetwork
CreateRaw	./src/armnn/Runtime.cpp	/^IRuntime* IRuntime::CreateRaw(const CreationOptions& options)$/;"	f	class:armnn::IRuntime
CreateRaw	./src/armnn/backends/ClContextControl.cpp	/^armnn::IClTunedParameters* IClTunedParameters::CreateRaw(armnn::IClTunedParameters::Mode mode)$/;"	f	class:armnn::IClTunedParameters
CreateRaw	./src/armnnCaffeParser/CaffeParser.cpp	/^ICaffeParser* ICaffeParser::CreateRaw()$/;"	f	class:armnnCaffeParser::ICaffeParser
CreateRaw	./src/armnnTfParser/TfParser.cpp	/^ITfParser* ITfParser::CreateRaw()$/;"	f	class:armnnTfParser::ITfParser
CreateReshape	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateReshape(const ReshapeQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateReshape	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateReshape(const ReshapeQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateReshape	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateReshape(const ReshapeQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateReshapeWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<ReshapeWorkload> CreateReshapeWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateResizeBilinear	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateResizeBilinear(const ResizeBilinearQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateResizeBilinear	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> ClWorkloadFactory::CreateResizeBilinear($/;"	f	class:armnn::ClWorkloadFactory
CreateResizeBilinear	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateResizeBilinear(const ResizeBilinearQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateResizeBilinear	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<armnn::IWorkload> NeonWorkloadFactory::CreateResizeBilinear($/;"	f	class:armnn::NeonWorkloadFactory
CreateResizeBilinear	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateResizeBilinear(const ResizeBilinearQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateResizeBilinearWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<ResizeBilinearWorkload> CreateResizeBilinearWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateSoftmax	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateSoftmax(const SoftmaxQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateSoftmax	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateSoftmax(const SoftmaxQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateSoftmax	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateSoftmax(const SoftmaxQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateSoftmaxWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<SoftmaxWorkload> CreateSoftmaxWorkloadTest(armnn::IWorkloadFactory& factory,$/;"	f	namespace:__anon20
CreateSplitter	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> ClWorkloadFactory::CreateSplitter(const SplitterQueueDescriptor& descriptor,$/;"	f	class:armnn::ClWorkloadFactory
CreateSplitter	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> NeonWorkloadFactory::CreateSplitter(const SplitterQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonWorkloadFactory
CreateSplitter	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::CreateSplitter(const SplitterQueueDescriptor& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
CreateSplitterMergerWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^    CreateSplitterMergerWorkloadTest(armnn::IWorkloadFactory& factory, armnn::Graph& graph)$/;"	f	namespace:__anon20
CreateSplitterMultipleInputsOneOutputWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^void CreateSplitterMultipleInputsOneOutputWorkloadTest(armnn::IWorkloadFactory& factory, armnn::Graph& graph,$/;"	f	namespace:__anon20
CreateSplitterWorkloadTest	./src/armnn/test/CreateWorkload.hpp	/^    CreateSplitterWorkloadTest(armnn::IWorkloadFactory& factory, armnn::Graph& graph)$/;"	f	namespace:__anon20
CreateSubTensorHandle	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<ITensorHandle> ClWorkloadFactory::CreateSubTensorHandle(ITensorHandle&      parent,$/;"	f	class:armnn::ClWorkloadFactory
CreateSubTensorHandle	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<ITensorHandle> NeonWorkloadFactory::CreateSubTensorHandle(ITensorHandle& parent,$/;"	f	class:armnn::NeonWorkloadFactory
CreateTensorHandle	./src/armnn/backends/ClWorkloadFactory.cpp	/^std::unique_ptr<ITensorHandle> ClWorkloadFactory::CreateTensorHandle(const TensorInfo& tensorInfo) const$/;"	f	class:armnn::ClWorkloadFactory
CreateTensorHandle	./src/armnn/backends/NeonWorkloadFactory.cpp	/^std::unique_ptr<ITensorHandle> NeonWorkloadFactory::CreateTensorHandle(const TensorInfo& tensorInfo) const$/;"	f	class:armnn::NeonWorkloadFactory
CreateTensorHandle	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<ITensorHandle> RefWorkloadFactory::CreateTensorHandle(const TensorInfo& tensorInfo) const$/;"	f	class:armnn::RefWorkloadFactory
CreateTensorHandles	./src/armnn/Layer.cpp	/^void Layer::CreateTensorHandles(Graph& graph, const IWorkloadFactory& factory)$/;"	f	class:armnn::Layer
CreateTensorHandles	./src/armnn/backends/OutputHandler.cpp	/^void OutputHandler::CreateTensorHandles(const IWorkloadFactory& factory)$/;"	f	class:armnn::OutputHandler
CreateTensorHandles	./src/armnn/layers/MergerLayer.cpp	/^void MergerLayer::CreateTensorHandles(Graph& graph, const IWorkloadFactory& factory)$/;"	f	class:armnn::MergerLayer
CreateTensorHandles	./src/armnn/layers/SplitterLayer.cpp	/^void SplitterLayer::CreateTensorHandles(Graph& graph, const IWorkloadFactory& factory)$/;"	f	class:armnn::SplitterLayer
CreateTensorHandles	./src/armnn/test/CreateWorkload.hpp	/^void CreateTensorHandles(armnn::Graph& graph, armnn::IWorkloadFactory& factory)$/;"	f	namespace:__anon20
CreateWorkload	./src/armnn/layers/ActivationLayer.cpp	/^std::unique_ptr<IWorkload> ActivationLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::ActivationLayer
CreateWorkload	./src/armnn/layers/AdditionLayer.cpp	/^std::unique_ptr<IWorkload> AdditionLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::AdditionLayer
CreateWorkload	./src/armnn/layers/BatchNormalizationLayer.cpp	/^std::unique_ptr<IWorkload> BatchNormalizationLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::BatchNormalizationLayer
CreateWorkload	./src/armnn/layers/ConstantLayer.cpp	/^std::unique_ptr<IWorkload> ConstantLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::ConstantLayer
CreateWorkload	./src/armnn/layers/Convolution2dLayer.cpp	/^std::unique_ptr<IWorkload> Convolution2dLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::Convolution2dLayer
CreateWorkload	./src/armnn/layers/DepthwiseConvolution2dLayer.cpp	/^std::unique_ptr<IWorkload> DepthwiseConvolution2dLayer::CreateWorkload(const Graph&                  graph,$/;"	f	class:armnn::DepthwiseConvolution2dLayer
CreateWorkload	./src/armnn/layers/FakeQuantizationLayer.cpp	/^std::unique_ptr<IWorkload> FakeQuantizationLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::FakeQuantizationLayer
CreateWorkload	./src/armnn/layers/FloorLayer.cpp	/^std::unique_ptr<IWorkload> FloorLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::FloorLayer
CreateWorkload	./src/armnn/layers/FullyConnectedLayer.cpp	/^std::unique_ptr<IWorkload> FullyConnectedLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::FullyConnectedLayer
CreateWorkload	./src/armnn/layers/InputLayer.cpp	/^std::unique_ptr<IWorkload> InputLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::InputLayer
CreateWorkload	./src/armnn/layers/L2NormalizationLayer.cpp	/^std::unique_ptr<IWorkload> L2NormalizationLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::L2NormalizationLayer
CreateWorkload	./src/armnn/layers/MemCopyLayer.cpp	/^std::unique_ptr<IWorkload> MemCopyLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::MemCopyLayer
CreateWorkload	./src/armnn/layers/MergerLayer.cpp	/^std::unique_ptr<IWorkload> MergerLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::MergerLayer
CreateWorkload	./src/armnn/layers/MultiplicationLayer.cpp	/^std::unique_ptr<IWorkload> MultiplicationLayer::CreateWorkload(const Graph&            graph,$/;"	f	class:armnn::MultiplicationLayer
CreateWorkload	./src/armnn/layers/NormalizationLayer.cpp	/^std::unique_ptr<IWorkload> NormalizationLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::NormalizationLayer
CreateWorkload	./src/armnn/layers/OutputLayer.cpp	/^std::unique_ptr<IWorkload> OutputLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::OutputLayer
CreateWorkload	./src/armnn/layers/PermuteLayer.cpp	/^std::unique_ptr<IWorkload> PermuteLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::PermuteLayer
CreateWorkload	./src/armnn/layers/Pooling2dLayer.cpp	/^std::unique_ptr<IWorkload> Pooling2dLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::Pooling2dLayer
CreateWorkload	./src/armnn/layers/ReshapeLayer.cpp	/^std::unique_ptr<IWorkload> ReshapeLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::ReshapeLayer
CreateWorkload	./src/armnn/layers/ResizeBilinearLayer.cpp	/^std::unique_ptr<IWorkload> ResizeBilinearLayer::CreateWorkload(const Graph& graph,$/;"	f	class:armnn::ResizeBilinearLayer
CreateWorkload	./src/armnn/layers/SoftmaxLayer.cpp	/^std::unique_ptr<IWorkload> SoftmaxLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::SoftmaxLayer
CreateWorkload	./src/armnn/layers/SplitterLayer.cpp	/^std::unique_ptr<IWorkload> SplitterLayer::CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const$/;"	f	class:armnn::SplitterLayer
CreationOptions	./include/armnn/IRuntime.hpp	/^        CreationOptions(Compute defaultComputeDevice)$/;"	f	struct:armnn::IRuntime::CreationOptions
CreationOptions	./include/armnn/IRuntime.hpp	/^    struct CreationOptions$/;"	s	class:armnn::IRuntime
DEC	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DECLARE_LAYER	./src/armnn/LayersFwd.hpp	57;"	d
DECLARE_LAYER_IMPL	./src/armnn/LayersFwd.hpp	44;"	d
DECLARE_LAYER_POLICY_1_PARAM	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	200;"	d
DECLARE_LAYER_POLICY_2_PARAM	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	204;"	d
DECLARE_LAYER_POLICY_CUSTOM_PARAM	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	180;"	d
DataType	./include/armnn/Types.hpp	/^enum class DataType$/;"	c	class:armnn::Status
Debug	./include/armnn/Utils.hpp	/^    Debug,$/;"	m	class:armnn::LogSeverity
DebugOutputSink	./src/armnn/test/UnitTests.cpp	/^struct DebugOutputSink : boost::iostreams::sink$/;"	s	file:
DebugOutputSink	./src/armnnUtils/Logging.cpp	/^struct DebugOutputSink : boost::log::sinks::basic_formatted_sink_backend<char, boost::log::sinks::concurrent_feeding>$/;"	s	namespace:armnnUtils	file:
DefaultComputeDevice	./include/armnn/Types.hpp	/^    Compute DefaultComputeDevice;$/;"	m	struct:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::DeviceSpec
DefaultInitializer	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^    float DefaultInitializer(PoolingAlgorithm algorithm)$/;"	f	namespace:__anon8
DefaultLoggingConfiguration	./src/armnn/Utils.cpp	/^    DefaultLoggingConfiguration()$/;"	f	struct:armnn::DefaultLoggingConfiguration
DefaultLoggingConfiguration	./src/armnn/Utils.cpp	/^struct DefaultLoggingConfiguration$/;"	s	namespace:armnn	file:
DeferredSingleLayerParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^    DeferredSingleLayerParsedTfOperation(TfParser* parser, const tensorflow::NodeDef& node)$/;"	f	class:armnnTfParser::DeferredSingleLayerParsedTfOperation
DeferredSingleLayerParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^class DeferredSingleLayerParsedTfOperation : public SingleLayerParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
DepthwiseConvolution2d	./src/armnn/InternalTypes.hpp	/^    DepthwiseConvolution2d,$/;"	m	class:armnn::LayerType
DepthwiseConvolution2dAsymmetricTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> DepthwiseConvolution2dAsymmetricTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dAsymmetricTestCommon	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> DepthwiseConvolution2dAsymmetricTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dAsymmetricTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T, 4> DepthwiseConvolution2dAsymmetricTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dDepthMul1Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> DepthwiseConvolution2dDepthMul1Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dDepthMul1TestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T, 4> DepthwiseConvolution2dDepthMul1TestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dDepthMul1Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> DepthwiseConvolution2dDepthMul1Uint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dDescriptor	./include/armnn/Descriptors.hpp	/^    DepthwiseConvolution2dDescriptor()$/;"	f	struct:armnn::DepthwiseConvolution2dDescriptor
DepthwiseConvolution2dDescriptor	./include/armnn/Descriptors.hpp	/^struct DepthwiseConvolution2dDescriptor$/;"	s	namespace:armnn
DepthwiseConvolution2dFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^    explicit DepthwiseConvolution2dFixture(const char* paddingType)$/;"	f	struct:DepthwiseConvolution2dFixture
DepthwiseConvolution2dFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^struct DepthwiseConvolution2dFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
DepthwiseConvolution2dLayer	./src/armnn/layers/DepthwiseConvolution2dLayer.cpp	/^DepthwiseConvolution2dLayer::DepthwiseConvolution2dLayer(const DepthwiseConvolution2dDescriptor& param,$/;"	f	class:armnn::DepthwiseConvolution2dLayer
DepthwiseConvolution2dLayer	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^class DepthwiseConvolution2dLayer : public LayerWithParameters<DepthwiseConvolution2dDescriptor>$/;"	c	namespace:armnn
DepthwiseConvolution2dQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    DepthwiseConvolution2dQueueDescriptor()$/;"	f	struct:armnn::DepthwiseConvolution2dQueueDescriptor
DepthwiseConvolution2dQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct DepthwiseConvolution2dQueueDescriptor : QueueDescriptorWithParameters<DepthwiseConvolution2dDescriptor>$/;"	s	namespace:armnn
DepthwiseConvolution2dSameFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^    DepthwiseConvolution2dSameFixture() : DepthwiseConvolution2dFixture("SAME") { }$/;"	f	struct:DepthwiseConvolution2dSameFixture
DepthwiseConvolution2dSameFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^struct DepthwiseConvolution2dSameFixture : DepthwiseConvolution2dFixture$/;"	s	file:
DepthwiseConvolution2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> DepthwiseConvolution2dTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T, 4> DepthwiseConvolution2dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> DepthwiseConvolution2dUint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
DepthwiseConvolution2dValidFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^    DepthwiseConvolution2dValidFixture() : DepthwiseConvolution2dFixture("VALID") { }$/;"	f	struct:DepthwiseConvolution2dValidFixture
DepthwiseConvolution2dValidFixture	./src/armnnTfParser/test/DepthwiseConvolution2d.cpp	/^struct DepthwiseConvolution2dValidFixture : DepthwiseConvolution2dFixture$/;"	s	file:
Dequantize	./include/armnn/TypesUtils.hpp	/^inline float Dequantize(QuantizedType value, float scale, int32_t offset)$/;"	f	namespace:armnn
Dequantize	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^std::vector<float> Dequantize(const T* quant, const TensorInfo& info)$/;"	f	namespace:armnn
Dequantize	./src/armnn/backends/test/QuantizeHelper.hpp	/^    static float Dequantize(T value, float scale, int32_t offset)$/;"	f	struct:SelectiveQuantizer
Destroy	./src/armnn/Network.cpp	/^void INetwork::Destroy(INetwork* network)$/;"	f	class:armnn::INetwork
Destroy	./src/armnn/Network.cpp	/^void IOptimizedNetwork::Destroy(IOptimizedNetwork* network)$/;"	f	class:armnn::IOptimizedNetwork
Destroy	./src/armnn/Runtime.cpp	/^void IRuntime::Destroy(IRuntime* runtime)$/;"	f	class:armnn::IRuntime
Destroy	./src/armnn/backends/ClContextControl.cpp	/^void IClTunedParameters::Destroy(IClTunedParameters* params)$/;"	f	class:armnn::IClTunedParameters
Destroy	./src/armnnCaffeParser/CaffeParser.cpp	/^void ICaffeParser::Destroy(ICaffeParser* parser)$/;"	f	class:armnnCaffeParser::ICaffeParser
Destroy	./src/armnnTfParser/TfParser.cpp	/^void ITfParser::Destroy(ITfParser* parser)$/;"	f	class:armnnTfParser::ITfParser
DeviceSpec	./include/armnn/Types.hpp	/^struct DeviceSpec$/;"	s	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
DiningTable	./tests/YoloDatabase.cpp	/^    DiningTable,$/;"	m	class:__anon34::YoloVocClass	file:
DirectConvolution2dWorkloadTest	./src/armnn/backends/test/CreateWorkloadCl.cpp	/^static void DirectConvolution2dWorkloadTest()$/;"	f	file:
Disconnect	./src/armnn/Layer.cpp	/^void OutputSlot::Disconnect(InputSlot& slot)$/;"	f	class:armnn::OutputSlot
DisconnectAll	./src/armnn/Layer.cpp	/^void OutputSlot::DisconnectAll()$/;"	f	class:armnn::OutputSlot
DoLoadOpenClRuntime	./src/armnn/backends/ClContextControl.cpp	/^void ClContextControl::DoLoadOpenClRuntime(bool useTunedParameters)$/;"	f	class:armnn::ClContextControl
Dog	./tests/YoloDatabase.cpp	/^    Dog,$/;"	m	class:__anon34::YoloVocClass	file:
DotAttributeSet	./src/armnnUtils/DotSerializer.cpp	/^DotAttributeSet::DotAttributeSet(std::ostream& stream)$/;"	f	class:armnn::DotAttributeSet
DotAttributeSet	./src/armnnUtils/DotSerializer.hpp	/^class DotAttributeSet : public DotBase$/;"	c	namespace:armnn
DotBase	./src/armnnUtils/DotSerializer.hpp	/^    explicit DotBase(std::ostream& stream)$/;"	f	class:armnn::DotBase
DotBase	./src/armnnUtils/DotSerializer.hpp	/^class DotBase$/;"	c	namespace:armnn
DotDefaults	./src/armnnUtils/DotSerializer.cpp	/^DotDefaults::DotDefaults(std::ostream& stream, const char* type)$/;"	f	class:armnn::DotDefaults
DotDefaults	./src/armnnUtils/DotSerializer.hpp	/^class DotDefaults : public DotBase$/;"	c	namespace:armnn
DotEdge	./src/armnnUtils/DotSerializer.cpp	/^DotEdge::DotEdge(std::ostream& stream, unsigned int fromNodeId, unsigned int toNodeId)$/;"	f	class:armnn::DotEdge
DotEdge	./src/armnnUtils/DotSerializer.hpp	/^class DotEdge : public DotBase$/;"	c	namespace:armnn
DotGraph	./src/armnnUtils/DotSerializer.cpp	/^DotGraph::DotGraph(std::ostream& stream, const char* name)$/;"	f	class:armnn::DotGraph
DotGraph	./src/armnnUtils/DotSerializer.hpp	/^class DotGraph : public DotBase$/;"	c	namespace:armnn
DotNode	./src/armnnUtils/DotSerializer.cpp	/^DotNode::DotNode(std::ostream& stream, unsigned int nodeId, const char* label)$/;"	f	class:armnn::DotNode
DotNode	./src/armnnUtils/DotSerializer.hpp	/^class DotNode : public DotBase$/;"	c	namespace:armnn
DropoutFixture	./src/armnnCaffeParser/test/TestDropout.cpp	/^    DropoutFixture()$/;"	f	struct:DropoutFixture
DropoutFixture	./src/armnnCaffeParser/test/TestDropout.cpp	/^struct DropoutFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
DummyConvolutionLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    DummyConvolutionLayer()$/;"	f	struct:__anon16::DummyConvolutionLayer
DummyConvolutionLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyConvolutionLayer$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    DummyLayer()$/;"	f	struct:__anon16::DummyLayer
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<LayerType, void>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::ConstantLayer, void>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::Convolution2dLayer>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::DepthwiseConvolution2dLayer>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::InputLayer, armnn::LayerBindingId>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::MergerLayer>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::OutputLayer, armnn::LayerBindingId>$/;"	s	namespace:__anon16
DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct DummyLayer<armnn::SplitterLayer>$/;"	s	namespace:__anon16
DurationMs	./src/armnn/Profiling.hpp	/^        double DurationMs() const$/;"	f	struct:armnn::Profiler::ProfilingEvent
EQUALS	./build_arm64/Makefile	/^EQUALS = =$/;"	m
ElementwiseAddition	./src/armnn/backends/RefWorkloads/Addition.cpp	/^void ElementwiseAddition(unsigned int numElements, const float* inData0, const float* inData1, float* outData)$/;"	f	namespace:__anon6
ElementwiseMultiplication	./src/armnn/backends/RefWorkloads/Multiplication.cpp	/^void ElementwiseMultiplication(unsigned int numElements,$/;"	f	namespace:__anon7
EndEvent	./src/armnn/Profiling.cpp	/^void Profiler::EndEvent(Compute compute)$/;"	f	class:armnn::Profiler
EndInputSlots	./src/armnn/Layer.hpp	/^    std::vector<InputSlot>::iterator EndInputSlots() { return m_InputSlots.end(); }$/;"	f	class:armnn::Layer
EndOutputSlots	./src/armnn/Layer.hpp	/^    std::vector<OutputSlot>::iterator EndOutputSlots() { return m_OutputSlots.end(); }$/;"	f	class:armnn::Layer
EndianSwap	./tests/MnistDatabase.cpp	/^void EndianSwap(unsigned int &x)$/;"	f
EnqueueInput	./src/armnn/LoadedNetwork.cpp	/^void LoadedNetwork::EnqueueInput(const BindableLayer& layer, ITensorHandle* tensorHandle, const TensorInfo& tensorInfo)$/;"	f	class:armnn::LoadedNetwork
EnqueueOutput	./src/armnn/LoadedNetwork.cpp	/^void LoadedNetwork::EnqueueOutput(const BindableLayer& layer, ITensorHandle* tensorHandle, const TensorInfo& tensorInfo)$/;"	f	class:armnn::LoadedNetwork
EnqueueWorkload	./src/armnn/LoadedNetwork.cpp	/^Status LoadedNetwork::EnqueueWorkload(const InputTensors& inputTensors,$/;"	f	class:armnn::LoadedNetwork
EnqueueWorkload	./src/armnn/Runtime.cpp	/^Status Runtime::EnqueueWorkload(NetworkId networkId,$/;"	f	class:armnn::Runtime
EraseLayer	./src/armnn/Graph.hpp	/^inline Graph::Iterator Graph::EraseLayer(Iterator pos)$/;"	f	class:armnn::Graph
EraseLayer	./src/armnn/Graph.hpp	/^inline Graph::Iterator Graph::EraseLayer(LayerT*& layer)$/;"	f	class:armnn::Graph
Error	./include/armnn/Utils.hpp	/^    Error,$/;"	m	class:armnn::LogSeverity
Exception	./include/armnn/Exceptions.hpp	/^class Exception : public std::exception$/;"	c	namespace:armnn
Exception	./src/armnn/Exceptions.cpp	/^Exception::Exception(const std::string& message)$/;"	f	class:armnn::Exception
Exclude	./include/armnn/Types.hpp	/^    Exclude     = 1  \/\/ The padding fields don't count and ignored$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod
Execute	./src/armnn/LoadedNetwork.cpp	/^bool LoadedNetwork::Execute()$/;"	f	class:armnn::LoadedNetwork
Execute	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.cpp	/^void ClActivationFloat32Workload::Execute() const$/;"	f	class:armnn::ClActivationFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.cpp	/^void ClActivationUint8Workload::Execute() const$/;"	f	class:armnn::ClActivationUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.cpp	/^void ClAdditionFloat32Workload::Execute() const$/;"	f	class:armnn::ClAdditionFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.cpp	/^void ClBaseConstantWorkload<dataType>::Execute() const$/;"	f	class:armnn::ClBaseConstantWorkload
Execute	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.cpp	/^void ClBatchNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::ClBatchNormalizationFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClConstantFloat32Workload.cpp	/^void ClConstantFloat32Workload::Execute() const$/;"	f	class:armnn::ClConstantFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClConstantUint8Workload.cpp	/^void ClConstantUint8Workload::Execute() const$/;"	f	class:armnn::ClConstantUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.cpp	/^void ClConvolution2dFloat32Workload::Execute() const$/;"	f	class:armnn::ClConvolution2dFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.cpp	/^void ClConvolution2dUint8Workload::Execute() const$/;"	f	class:armnn::ClConvolution2dUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.cpp	/^void ClDepthwiseConvolutionFloat32Workload::Execute() const$/;"	f	class:armnn::ClDepthwiseConvolutionFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.cpp	/^void ClDepthwiseConvolutionUint8Workload::Execute() const$/;"	f	class:armnn::ClDepthwiseConvolutionUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.cpp	/^void ClFloorFloat32Workload::Execute() const$/;"	f	class:armnn::ClFloorFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.cpp	/^void ClFullyConnectedFloat32Workload::Execute() const$/;"	f	class:armnn::ClFullyConnectedFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.cpp	/^void ClL2NormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::ClL2NormalizationFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClMergerFloat32Workload.cpp	/^void ClMergerFloat32Workload::Execute() const$/;"	f	class:armnn::ClMergerFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClMergerUint8Workload.cpp	/^void ClMergerUint8Workload::Execute() const$/;"	f	class:armnn::ClMergerUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.cpp	/^void ClMultiplicationFloat32Workload::Execute() const$/;"	f	class:armnn::ClMultiplicationFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.cpp	/^void ClNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::ClNormalizationFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.cpp	/^void ClPermuteWorkload<DataType>::Execute() const$/;"	f	class:armnn::ClPermuteWorkload
Execute	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.cpp	/^void ClPooling2dFloat32Workload::Execute() const$/;"	f	class:armnn::ClPooling2dFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.cpp	/^void ClPooling2dUint8Workload::Execute() const$/;"	f	class:armnn::ClPooling2dUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.cpp	/^void ClReshapeFloat32Workload::Execute() const$/;"	f	class:armnn::ClReshapeFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.cpp	/^void ClReshapeUint8Workload::Execute() const$/;"	f	class:armnn::ClReshapeUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.cpp	/^void ClResizeBilinearFloat32Workload::Execute() const$/;"	f	class:armnn::ClResizeBilinearFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.cpp	/^void ClSoftmaxFloat32Workload::Execute() const$/;"	f	class:armnn::ClSoftmaxFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.cpp	/^void ClSoftmaxUint8Workload::Execute() const$/;"	f	class:armnn::ClSoftmaxUint8Workload
Execute	./src/armnn/backends/ClWorkloads/ClSplitterFloat32Workload.cpp	/^void ClSplitterFloat32Workload::Execute() const$/;"	f	class:armnn::ClSplitterFloat32Workload
Execute	./src/armnn/backends/ClWorkloads/ClSplitterUint8Workload.cpp	/^void ClSplitterUint8Workload::Execute() const$/;"	f	class:armnn::ClSplitterUint8Workload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromClToCpuWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromClToCpuWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromClToNeonWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromClToNeonWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromCpuToClWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromCpuToClWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromCpuToCpuWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromCpuToCpuWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromCpuToNeonWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromCpuToNeonWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromNeonToClWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromNeonToClWorkload
Execute	./src/armnn/backends/MemCopyWorkload.cpp	/^void CopyFromNeonToCpuWorkload<DataType>::Execute() const$/;"	f	class:armnn::CopyFromNeonToCpuWorkload
Execute	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.cpp	/^void NeonActivationFloat32Workload::Execute() const$/;"	f	class:armnn::NeonActivationFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.cpp	/^void NeonActivationUint8Workload::Execute() const$/;"	f	class:armnn::NeonActivationUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.cpp	/^void NeonAdditionFloat32Workload::Execute() const$/;"	f	class:armnn::NeonAdditionFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.cpp	/^void NeonBatchNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::NeonBatchNormalizationFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonConstantFloat32Workload.cpp	/^void NeonConstantFloat32Workload::Execute() const$/;"	f	class:armnn::NeonConstantFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonConstantUint8Workload.cpp	/^void NeonConstantUint8Workload::Execute() const$/;"	f	class:armnn::NeonConstantUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.cpp	/^void NeonConvolution2dFloat32Workload::Execute() const$/;"	f	class:armnn::NeonConvolution2dFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.cpp	/^void NeonConvolution2dUint8Workload::Execute() const$/;"	f	class:armnn::NeonConvolution2dUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.cpp	/^void NeonDepthwiseConvolutionFloat32Workload::Execute() const$/;"	f	class:armnn::NeonDepthwiseConvolutionFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.cpp	/^void NeonDepthwiseConvolutionUint8Workload::Execute() const$/;"	f	class:armnn::NeonDepthwiseConvolutionUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.cpp	/^void NeonFloorFloat32Workload::Execute() const$/;"	f	class:armnn::NeonFloorFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.cpp	/^void NeonFullyConnectedFloat32Workload::Execute() const$/;"	f	class:armnn::NeonFullyConnectedFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.cpp	/^void NeonL2NormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::NeonL2NormalizationFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonMergerFloat32Workload.cpp	/^void NeonMergerFloat32Workload::Execute() const$/;"	f	class:armnn::NeonMergerFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonMergerUint8Workload.cpp	/^void NeonMergerUint8Workload::Execute() const$/;"	f	class:armnn::NeonMergerUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.cpp	/^void NeonMultiplicationFloat32Workload::Execute() const$/;"	f	class:armnn::NeonMultiplicationFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.cpp	/^void NeonNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::NeonNormalizationFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.cpp	/^void NeonPermuteWorkload<DataType>::Execute() const$/;"	f	class:armnn::NeonPermuteWorkload
Execute	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.cpp	/^void NeonPooling2dFloat32Workload::Execute() const$/;"	f	class:armnn::NeonPooling2dFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.cpp	/^void NeonPooling2dUint8Workload::Execute() const$/;"	f	class:armnn::NeonPooling2dUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.cpp	/^void NeonReshapeFloat32Workload::Execute() const$/;"	f	class:armnn::NeonReshapeFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.cpp	/^void NeonReshapeUint8Workload::Execute() const$/;"	f	class:armnn::NeonReshapeUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.cpp	/^void NeonSoftmaxFloat32Workload::Execute() const$/;"	f	class:armnn::NeonSoftmaxFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.cpp	/^void NeonSoftmaxUint8Workload::Execute() const$/;"	f	class:armnn::NeonSoftmaxUint8Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonSplitterFloat32Workload.cpp	/^void NeonSplitterFloat32Workload::Execute() const$/;"	f	class:armnn::NeonSplitterFloat32Workload
Execute	./src/armnn/backends/NeonWorkloads/NeonSplitterUint8Workload.cpp	/^void NeonSplitterUint8Workload::Execute() const$/;"	f	class:armnn::NeonSplitterUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefActivationFloat32Workload.cpp	/^void RefActivationFloat32Workload::Execute() const$/;"	f	class:armnn::RefActivationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefActivationUint8Workload.cpp	/^void RefActivationUint8Workload::Execute() const$/;"	f	class:armnn::RefActivationUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefAdditionFloat32Workload.cpp	/^void RefAdditionFloat32Workload::Execute() const$/;"	f	class:armnn::RefAdditionFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefAdditionUint8Workload.cpp	/^void RefAdditionUint8Workload::Execute() const$/;"	f	class:armnn::RefAdditionUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.cpp	/^void RefBaseConstantWorkload<DataType>::Execute() const$/;"	f	class:armnn::RefBaseConstantWorkload
Execute	./src/armnn/backends/RefWorkloads/RefBatchNormalizationFloat32Workload.cpp	/^void RefBatchNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::RefBatchNormalizationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefBatchNormalizationUint8Workload.cpp	/^void RefBatchNormalizationUint8Workload::Execute() const$/;"	f	class:armnn::RefBatchNormalizationUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefConstantFloat32Workload.cpp	/^void RefConstantFloat32Workload::Execute() const$/;"	f	class:armnn::RefConstantFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefConstantUint8Workload.cpp	/^void RefConstantUint8Workload::Execute() const$/;"	f	class:armnn::RefConstantUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefConvolution2dFloat32Workload.cpp	/^void RefConvolution2dFloat32Workload::Execute() const$/;"	f	class:armnn::RefConvolution2dFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefConvolution2dUint8Workload.cpp	/^void RefConvolution2dUint8Workload::Execute() const$/;"	f	class:armnn::RefConvolution2dUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dFloat32Workload.cpp	/^void RefDepthwiseConvolution2dFloat32Workload::Execute() const$/;"	f	class:armnn::RefDepthwiseConvolution2dFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dUint8Workload.cpp	/^void RefDepthwiseConvolution2dUint8Workload::Execute() const$/;"	f	class:armnn::RefDepthwiseConvolution2dUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.cpp	/^void RefFakeQuantizationFloat32Workload::Execute() const$/;"	f	class:armnn::RefFakeQuantizationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefFloorFloat32Workload.cpp	/^void RefFloorFloat32Workload::Execute() const$/;"	f	class:armnn::RefFloorFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefFullyConnectedFloat32Workload.cpp	/^void RefFullyConnectedFloat32Workload::Execute() const$/;"	f	class:armnn::RefFullyConnectedFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefFullyConnectedUint8Workload.cpp	/^void RefFullyConnectedUint8Workload::Execute() const$/;"	f	class:armnn::RefFullyConnectedUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefL2NormalizationFloat32Workload.cpp	/^void RefL2NormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::RefL2NormalizationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefMergerFloat32Workload.cpp	/^void RefMergerFloat32Workload::Execute() const$/;"	f	class:armnn::RefMergerFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefMergerUint8Workload.cpp	/^void RefMergerUint8Workload::Execute() const$/;"	f	class:armnn::RefMergerUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefMultiplicationFloat32Workload.cpp	/^void RefMultiplicationFloat32Workload::Execute() const$/;"	f	class:armnn::RefMultiplicationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefMultiplicationUint8Workload.cpp	/^void RefMultiplicationUint8Workload::Execute() const$/;"	f	class:armnn::RefMultiplicationUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.cpp	/^void RefNormalizationFloat32Workload::Execute() const$/;"	f	class:armnn::RefNormalizationFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.cpp	/^void RefPermuteWorkload<DataType>::Execute() const$/;"	f	class:armnn::RefPermuteWorkload
Execute	./src/armnn/backends/RefWorkloads/RefPooling2dFloat32Workload.cpp	/^void RefPooling2dFloat32Workload::Execute() const$/;"	f	class:armnn::RefPooling2dFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefPooling2dUint8Workload.cpp	/^void RefPooling2dUint8Workload::Execute() const$/;"	f	class:armnn::RefPooling2dUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefReshapeFloat32Workload.cpp	/^void RefReshapeFloat32Workload::Execute() const$/;"	f	class:armnn::RefReshapeFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefReshapeUint8Workload.cpp	/^void RefReshapeUint8Workload::Execute() const$/;"	f	class:armnn::RefReshapeUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefResizeBilinearFloat32Workload.cpp	/^void RefResizeBilinearFloat32Workload::Execute() const$/;"	f	class:armnn::RefResizeBilinearFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefResizeBilinearUint8Workload.cpp	/^void RefResizeBilinearUint8Workload::Execute() const$/;"	f	class:armnn::RefResizeBilinearUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefSoftmaxFloat32Workload.cpp	/^void RefSoftmaxFloat32Workload::Execute() const$/;"	f	class:armnn::RefSoftmaxFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefSoftmaxUint8Workload.cpp	/^void RefSoftmaxUint8Workload::Execute() const$/;"	f	class:armnn::RefSoftmaxUint8Workload
Execute	./src/armnn/backends/RefWorkloads/RefSplitterFloat32Workload.cpp	/^void RefSplitterFloat32Workload::Execute() const$/;"	f	class:armnn::RefSplitterFloat32Workload
Execute	./src/armnn/backends/RefWorkloads/RefSplitterUint8Workload.cpp	/^void RefSplitterUint8Workload::Execute() const$/;"	f	class:armnn::RefSplitterUint8Workload
ExpandTensorShapeTo3dForPermute	./src/armnn/backends/test/LayerTests.cpp	/^armnn::TensorShape ExpandTensorShapeTo3dForPermute(const armnn::TensorShape & inputShape)$/;"	f
ExplicitDimensionOneSqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^typedef SqueezeFixture<false, true>  ExplicitDimensionOneSqueezeFixture;$/;"	t	file:
ExplicitDimensionZeroSqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^typedef SqueezeFixture<true, false>  ExplicitDimensionZeroSqueezeFixture;$/;"	t	file:
ExplicitDimensionsSqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^typedef SqueezeFixture<true, true>   ExplicitDimensionsSqueezeFixture;$/;"	t	file:
FORWARD_CL_LAYER_SUPPORT_FUNC	./src/armnn/backends/ClLayerSupport.cpp	64;"	d	file:
FORWARD_CL_LAYER_SUPPORT_FUNC	./src/armnn/backends/ClLayerSupport.cpp	66;"	d	file:
FORWARD_LAYER_SUPPORT_FUNC	./src/armnn/LayerSupport.cpp	33;"	d	file:
FORWARD_WORKLOAD_VALIDATE_FUNC	./src/armnn/backends/ClLayerSupport.cpp	82;"	d	file:
FORWARD_WORKLOAD_VALIDATE_FUNC	./src/armnn/backends/ClLayerSupport.cpp	85;"	d	file:
FORWARD_WORKLOAD_VALIDATE_FUNC	./src/armnn/backends/NeonLayerSupport.cpp	139;"	d	file:
FORWARD_WORKLOAD_VALIDATE_FUNC	./src/armnn/backends/NeonLayerSupport.cpp	142;"	d	file:
Failed	./tests/InferenceTest.hpp	/^    Failed,$/;"	m	class:armnn::test::TestCaseResult
Failure	./include/armnn/Types.hpp	/^    Failure = 1$/;"	m	class:armnn::Status
FakeQuantization	./src/armnn/InternalTypes.hpp	/^    FakeQuantization,$/;"	m	class:armnn::LayerType
FakeQuantization	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.cpp	/^void FakeQuantization(const float* inputData, float* outputData, uint32_t numElements, float min, float max)$/;"	f	namespace:armnn
FakeQuantizationDescriptor	./include/armnn/Descriptors.hpp	/^    FakeQuantizationDescriptor()$/;"	f	struct:armnn::FakeQuantizationDescriptor
FakeQuantizationDescriptor	./include/armnn/Descriptors.hpp	/^struct FakeQuantizationDescriptor$/;"	s	namespace:armnn
FakeQuantizationLayer	./src/armnn/layers/FakeQuantizationLayer.cpp	/^FakeQuantizationLayer::FakeQuantizationLayer(const FakeQuantizationDescriptor& param, const char* name)$/;"	f	class:armnn::FakeQuantizationLayer
FakeQuantizationLayer	./src/armnn/layers/FakeQuantizationLayer.hpp	/^class FakeQuantizationLayer : public LayerWithParameters<FakeQuantizationDescriptor>$/;"	c	namespace:armnn
FakeQuantizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    FakeQuantizationQueueDescriptor()$/;"	f	struct:armnn::FakeQuantizationQueueDescriptor
FakeQuantizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct FakeQuantizationQueueDescriptor : QueueDescriptorWithParameters<FakeQuantizationDescriptor>$/;"	s	namespace:armnn
FakeQuantizationTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> FakeQuantizationTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
FalseFunc	./src/armnn/LayerSupportCommon.hpp	/^bool FalseFunc(std::string* reasonIfUnsupported, Params&&... params)$/;"	f	namespace:armnn
FalseFuncF32	./src/armnn/LayerSupportCommon.hpp	/^bool FalseFuncF32(std::string* reasonIfUnsupported, Params&&... params)$/;"	f	namespace:armnn
FalseFuncU8	./src/armnn/LayerSupportCommon.hpp	/^bool FalseFuncU8(std::string* reasonIfUnsupported, Params&&... params)$/;"	f	namespace:armnn
FileNotFoundException	./include/armnn/Exceptions.hpp	/^class FileNotFoundException : public Exception$/;"	c	namespace:armnn
Finalize	./src/armnn/backends/AclBaseMemoryManager.cpp	/^void AclBaseMemoryManager::Finalize()$/;"	f	class:armnn::AclBaseMemoryManager
Finalize	./src/armnn/backends/ClWorkloadFactory.cpp	/^void ClWorkloadFactory::Finalize()$/;"	f	class:armnn::ClWorkloadFactory
Finalize	./src/armnn/backends/NeonWorkloadFactory.cpp	/^void NeonWorkloadFactory::Finalize()$/;"	f	class:armnn::NeonWorkloadFactory
Finalize	./src/armnn/backends/WorkloadFactory.hpp	/^    virtual void Finalize() { }$/;"	f	class:armnn::IWorkloadFactory
FirstLayer	./src/armnn/InternalTypes.hpp	/^    FirstLayer,$/;"	m	class:armnn::LayerType
Float32	./include/armnn/Types.hpp	/^    Float32   = 0,$/;"	m	class:armnn::Status::DataType
Floor	./include/armnn/Types.hpp	/^    Floor       = 0,$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding
Floor	./src/armnn/InternalTypes.hpp	/^    Floor,$/;"	m	class:armnn::LayerType
FloorLayer	./src/armnn/layers/FloorLayer.cpp	/^FloorLayer::FloorLayer(const char* name)$/;"	f	class:armnn::FloorLayer
FloorLayer	./src/armnn/layers/FloorLayer.hpp	/^class FloorLayer : public Layer$/;"	c	namespace:armnn
FloorQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct FloorQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
ForwardToEndOfInputs	./src/armnn/Graph.hpp	/^    Iterator ForwardToEndOfInputs(Iterator it) const$/;"	f	class:armnn::Graph
FullyConnected	./src/armnn/InternalTypes.hpp	/^    FullyConnected,$/;"	m	class:armnn::LayerType
FullyConnected	./src/armnn/backends/RefWorkloads/FullyConnected.cpp	/^void FullyConnected(const float*      inputData,$/;"	f	namespace:armnn
FullyConnectedBiasTypeForInputType	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^struct FullyConnectedBiasTypeForInputType<float>$/;"	s
FullyConnectedBiasTypeForInputType	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^struct FullyConnectedBiasTypeForInputType<uint8_t>$/;"	s
FullyConnectedDescriptor	./include/armnn/Descriptors.hpp	/^    FullyConnectedDescriptor()$/;"	f	struct:armnn::FullyConnectedDescriptor
FullyConnectedDescriptor	./include/armnn/Descriptors.hpp	/^struct FullyConnectedDescriptor$/;"	s	namespace:armnn
FullyConnectedFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^    FullyConnectedFixture()$/;"	f	struct:FullyConnectedFixture
FullyConnectedFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^struct FullyConnectedFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
FullyConnectedFloat32Test	./src/armnn/backends/test/FullyConnectedTestImpl.hpp	/^LayerTestResult<float, 2> FullyConnectedFloat32Test(armnn::IWorkloadFactory& workloadFactory, bool biasEnabled,$/;"	f
FullyConnectedLargeTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 2> FullyConnectedLargeTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
FullyConnectedLargeTestCommon	./src/armnn/backends/test/FullyConnectedTestImpl.hpp	/^LayerTestResult<T, 2> FullyConnectedLargeTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
FullyConnectedLayer	./src/armnn/layers/FullyConnectedLayer.cpp	/^FullyConnectedLayer::FullyConnectedLayer(const FullyConnectedDescriptor& param, const char* name)$/;"	f	class:armnn::FullyConnectedLayer
FullyConnectedLayer	./src/armnn/layers/FullyConnectedLayer.hpp	/^class FullyConnectedLayer : public LayerWithParameters<FullyConnectedDescriptor>$/;"	c	namespace:armnn
FullyConnectedQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^    FullyConnectedQueueDescriptor()$/;"	f	struct:armnn::FullyConnectedQueueDescriptor
FullyConnectedQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct FullyConnectedQueueDescriptor : QueueDescriptorWithParameters<FullyConnectedDescriptor>$/;"	s	namespace:armnn
FullyConnectedUint8Test	./src/armnn/backends/test/FullyConnectedTestImpl.hpp	/^LayerTestResult<uint8_t, 2> FullyConnectedUint8Test(armnn::IWorkloadFactory& workloadFactory, bool biasEnabled)$/;"	f
Func	./src/armnn/backends/MakeWorkloadHelper.hpp	/^    static std::unique_ptr<NullWorkload> Func(const QueueDescriptorType& descriptor,$/;"	f	struct:armnn::__anon4::MakeWorkloadForType
Func	./src/armnn/backends/MakeWorkloadHelper.hpp	/^    static std::unique_ptr<WorkloadType> Func(const QueueDescriptorType& descriptor,$/;"	f	struct:armnn::__anon4::MakeWorkloadForType
FusedBatchNormFixture	./src/armnnTfParser/test/FusedBatchNorm.cpp	/^    FusedBatchNormFixture()$/;"	f	struct:FusedBatchNormFixture
FusedBatchNormFixture	./src/armnnTfParser/test/FusedBatchNorm.cpp	/^struct FusedBatchNormFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
G	./tests/InferenceTestImage.hpp	/^    G,$/;"	m	class:ImageChannel
GatherTensorHandlePairs	./src/armnn/backends/MemCopyWorkload.cpp	/^void GatherTensorHandlePairs(const MemCopyQueueDescriptor& descriptor,$/;"	f	namespace:armnn::__anon5
Generate3dPermuteVectorForConcat	./src/armnn/backends/test/LayerTests.cpp	/^void Generate3dPermuteVectorForConcat($/;"	f
GenerateLayerGuid	./src/armnn/Layer.cpp	/^LayerGuid GenerateLayerGuid()$/;"	f	namespace:armnn::__anon1
GenerateNetworkId	./src/armnn/Runtime.cpp	/^int Runtime::GenerateNetworkId()$/;"	f	class:armnn::Runtime
Get	./src/armnn/Profiling.hpp	/^    static Profiler& Get() { return s_Instance; }$/;"	f	class:armnn::Profiler
Get	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    std::shared_ptr<arm_compute::MemoryManagerOnDemand>& Get() { return m_IntraLayerMemoryMgr; }$/;"	f	class:armnn::AclBaseMemoryManager
Get	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^    DataType& Get(unsigned int b, unsigned int c, unsigned int h, unsigned int w) const$/;"	f	class:armnn::TensorBufferArrayView
GetAccumulator	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^    Accumulator GetAccumulator(PoolingAlgorithm algorithm)$/;"	f	namespace:__anon8
GetActivationFunctionAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetActivationFunctionAsCString(ActivationFunction activation)$/;"	f	namespace:armnn
GetArmComputeDataType	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^arm_compute::DataType GetArmComputeDataType(armnn::DataType dataType)$/;"	f	namespace:armnn::armcomputetensorutils
GetArmnnOutputSlotForCaffeTop	./src/armnnCaffeParser/CaffeParser.cpp	/^armnn::IOutputSlot& CaffeParser::GetArmnnOutputSlotForCaffeTop(const std::string& caffeTopName) const$/;"	f	class:armnnCaffeParser::CaffeParser
GetAttributeSet	./src/armnnUtils/DotSerializer.hpp	/^    DotAttributeSet& GetAttributeSet() { return *m_Attributes.get(); }$/;"	f	class:armnn::DotDefaults
GetAttributeSet	./src/armnnUtils/DotSerializer.hpp	/^    DotAttributeSet& GetAttributeSet() { return *m_Attributes.get(); }$/;"	f	class:armnn::DotEdge
GetAttributeSet	./src/armnnUtils/DotSerializer.hpp	/^    DotAttributeSet& GetAttributeSet() { return *m_Attributes.get(); }$/;"	f	class:armnn::DotNode
GetBias2	./src/armnn/backends/test/LayerTests.cpp	/^boost::multi_array<T, 1> GetBias2(bool biasEnabled, float qScale, int32_t qOffset)$/;"	f
GetBiasDataType	./src/armnn/backends/WorkloadData.cpp	/^DataType GetBiasDataType(DataType inputDataType)$/;"	f	namespace:armnn
GetBindingId	./src/armnn/Layer.hpp	/^    LayerBindingId GetBindingId() const { return m_Id; };$/;"	f	class:armnn::BindableLayer
GetBindingId	./src/armnn/LoadedNetwork.cpp	/^    LayerBindingId GetBindingId() const { return m_Id; }$/;"	f	class:armnn::__anon2::TensorPin
GetBindingInfo	./src/armnnCaffeParser/CaffeParser.cpp	/^std::pair<armnn::LayerBindingId, armnn::TensorInfo> CaffeParser::GetBindingInfo(const std::string& layerName,$/;"	f	class:armnnCaffeParser::CaffeParser
GetBindingInfo	./src/armnnTfParser/TfParser.cpp	/^std::pair<LayerBindingId, TensorInfo> TfParser::GetBindingInfo(const std::string& layerName,$/;"	f	class:armnnTfParser::TfParser
GetComputeDevice	./src/armnn/Layer.hpp	/^    Compute GetComputeDevice() const { return m_ComputeDevice; }$/;"	f	class:armnn::Layer
GetComputeDeviceAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetComputeDeviceAsCString(Compute compute)$/;"	f	namespace:armnn
GetConnectedOutputSlot	./src/armnn/Layer.hpp	/^    OutputSlot* GetConnectedOutputSlot() { return m_Connection; }$/;"	f	class:armnn::final
GetConnectedOutputSlot	./src/armnn/Layer.hpp	/^    const OutputSlot* GetConnectedOutputSlot() const { return m_Connection; }$/;"	f	class:armnn::final
GetConnection	./src/armnn/Layer.cpp	/^InputSlot* OutputSlot::GetConnection(unsigned int index)$/;"	f	class:armnn::OutputSlot
GetConnection	./src/armnn/Layer.cpp	/^const InputSlot* OutputSlot::GetConnection(unsigned int index) const$/;"	f	class:armnn::OutputSlot
GetConnection	./src/armnn/Layer.hpp	/^inline IOutputSlot* InputSlot::GetConnection() { return GetConnectedOutputSlot(); }$/;"	f	class:armnn::InputSlot
GetConnection	./src/armnn/Layer.hpp	/^inline const IOutputSlot* InputSlot::GetConnection() const { return GetConnectedOutputSlot(); }$/;"	f	class:armnn::InputSlot
GetConnections	./src/armnn/Layer.hpp	/^    const std::vector<InputSlot*>& GetConnections() const { return m_Connections; }$/;"	f	class:armnn::final
GetConstCpuData	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline const DataType* GetConstCpuData(const ITensorHandle* tensorHandle)$/;"	f	namespace:armnn
GetConstCpuU8Data	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline const uint8_t* GetConstCpuU8Data(const ITensorHandle* tensorHandle)$/;"	f	namespace:armnn
GetConstTensor	./src/armnn/backends/CpuTensorHandle.cpp	/^const void* ConstCpuTensorHandle::GetConstTensor() const$/;"	f	class:armnn::ConstCpuTensorHandle
GetConstTensor	./src/armnn/backends/CpuTensorHandle.hpp	/^    const T* GetConstTensor() const$/;"	f	class:armnn::ConstCpuTensorHandle
GetConstTensor	./src/armnnTfParser/TfParser.cpp	/^    ConstTensor GetConstTensor(bool swizzleForConvolutionWeights, std::vector<T>& outputTensorData) const$/;"	f	class:armnnTfParser::ParsedConstTfOperation
GetContents	./src/armnnUtils/DotSerializer.hpp	/^    NodeContent& GetContents()         { return *m_Contents.get(); }$/;"	f	class:armnn::DotNode
GetCpuData	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline DataType* GetCpuData(const ITensorHandle* tensorHandle)$/;"	f	namespace:armnn
GetCpuU8Data	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline uint8_t* GetCpuU8Data(const ITensorHandle* tensorHandle)$/;"	f	namespace:armnn
GetData	./src/armnn/backends/OutputHandler.hpp	/^    ITensorHandle* GetData() const { return m_TensorHandle.get(); }$/;"	f	class:armnn::OutputHandler
GetData	./src/armnn/backends/Workload.hpp	/^    const QueueDescriptor& GetData() const { return m_Data; }$/;"	f	class:armnn::BaseWorkload
GetDataFromBlob	./src/armnnCaffeParser/CaffeParser.cpp	/^void GetDataFromBlob(const LayerParameter& layerParam, vector<float>& outData, unsigned int blobIndex)$/;"	f	namespace:armnnCaffeParser
GetDataType	./include/armnn/Tensor.hpp	/^    DataType GetDataType() const                    { return m_DataType; }$/;"	f	class:armnn::TensorInfo
GetDataType	./include/armnn/Tensor.hpp	/^    DataType GetDataType() const                    { return m_Info.GetDataType(); }$/;"	f	class:armnn::BaseTensor
GetDataType	./include/armnn/TypesUtils.hpp	/^constexpr DataType GetDataType<float>()$/;"	f	namespace:armnn
GetDataType	./include/armnn/TypesUtils.hpp	/^constexpr DataType GetDataType<int32_t>()$/;"	f	namespace:armnn
GetDataType	./include/armnn/TypesUtils.hpp	/^constexpr DataType GetDataType<uint8_t>()$/;"	f	namespace:armnn
GetDataType	./src/armnn/Layer.cpp	/^DataType Layer::GetDataType() const$/;"	f	class:armnn::Layer
GetDataTypeName	./include/armnn/TypesUtils.hpp	/^constexpr const char* GetDataTypeName(DataType dataType)$/;"	f	namespace:armnn
GetDataTypeSize	./include/armnn/TypesUtils.hpp	/^constexpr unsigned int GetDataTypeSize(DataType dataType)$/;"	f	namespace:armnn
GetEdgeList	./src/armnn/test/GraphTests.cpp	/^static std::vector<Edge> GetEdgeList(const armnn::Graph& graph)$/;"	f	file:
GetEventColor	./src/armnn/Profiling.cpp	/^std::uint32_t Profiler::GetEventColor(Compute compute) const$/;"	f	class:armnn::Profiler
GetEventComputeDevice	./src/armnn/Profiling.cpp	/^const char* Profiler::GetEventComputeDevice(Compute compute) const$/;"	f	class:armnn::Profiler
GetExecutor	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^    Executor GetExecutor(PoolingAlgorithm algorithm)$/;"	f	namespace:__anon8
GetFirstLayerWithName	./src/armnn/test/GraphTests.cpp	/^static armnn::Layer* GetFirstLayerWithName(armnn::Graph& graph, const std::string& name)$/;"	f	file:
GetGraph	./src/armnn/Network.hpp	/^    Graph& GetGraph() { return *m_Graph; }$/;"	f	class:armnn::final
GetGraph	./src/armnn/Network.hpp	/^    const Graph& GetGraph() const { return *m_Graph; }$/;"	f	class:armnn::final
GetHeight	./tests/InferenceTestImage.hpp	/^    unsigned int GetHeight() const { return m_Height; }$/;"	f	class:InferenceTestImage
GetImageChannelIndex	./tests/InferenceTestImage.cpp	/^unsigned int GetImageChannelIndex(ImageChannelLayout channelLayout, ImageChannel channel)$/;"	f	namespace:__anon32
GetImageDataAsNormalizedFloats	./tests/InferenceTestImage.cpp	/^std::vector<float> GetImageDataAsNormalizedFloats(ImageChannelLayout layout,$/;"	f
GetImageDataInArmNnLayoutAsFloats	./tests/InferenceTestImage.cpp	/^std::vector<float> GetImageDataInArmNnLayoutAsFloats(ImageChannelLayout channelLayout,$/;"	f
GetImageDataInArmNnLayoutAsFloatsSubtractingMean	./tests/InferenceTestImage.cpp	/^std::vector<float> GetImageDataInArmNnLayoutAsFloatsSubtractingMean(ImageChannelLayout layout,$/;"	f
GetImageDataInArmNnLayoutAsNormalizedFloats	./tests/InferenceTestImage.cpp	/^std::vector<float> GetImageDataInArmNnLayoutAsNormalizedFloats(ImageChannelLayout layout,$/;"	f
GetInfo	./include/armnn/Tensor.hpp	/^    TensorInfo& GetInfo() { return m_Info; }$/;"	f	class:armnn::BaseTensor
GetInfo	./include/armnn/Tensor.hpp	/^    const TensorInfo& GetInfo() const { return m_Info; }$/;"	f	class:armnn::BaseTensor
GetInputLayers	./src/armnn/Graph.hpp	/^    InputLayersAccessor GetInputLayers() const { return InputLayersAccessor(*this); }$/;"	f	class:armnn::Graph
GetInputParsedTfOperationsChecked	./src/armnnTfParser/TfParser.cpp	/^TfParser::GetInputParsedTfOperationsChecked(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
GetInputSlots	./src/armnn/Layer.hpp	/^    const std::vector<InputSlot>& GetInputSlots() const { return m_InputSlots; }$/;"	f	class:armnn::Layer
GetInputTensorData	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^const DataType* GetInputTensorData(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetInputTensorDataFloat	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^const float* GetInputTensorDataFloat(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetInputTensorDataU8	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^const uint8_t* GetInputTensorDataU8(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetInputTensorInfo	./src/armnn/LoadedNetwork.cpp	/^TensorInfo LoadedNetwork::GetInputTensorInfo(LayerBindingId layerId) const$/;"	f	class:armnn::LoadedNetwork
GetInputTensorInfo	./src/armnn/Runtime.cpp	/^TensorInfo Runtime::GetInputTensorInfo(NetworkId networkId, LayerBindingId layerId) const$/;"	f	class:armnn::Runtime
GetInputTensorInfo	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    static armnn::TensorInfo GetInputTensorInfo()$/;"	f	struct:__anon11::BoundedReLuRandomInputTestTraits
GetInputTensorPin	./src/armnn/LoadedNetwork.cpp	/^    const TensorPin& GetInputTensorPin(LayerBindingId id) const$/;"	f	class:armnn::__anon2::WorkloadData
GetInputs	./src/armnnCaffeParser/CaffeParser.cpp	/^vector<const LayerParameter*> CaffeParser::GetInputs(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
GetLayerTypeAsCString	./src/armnn/InternalTypes.cpp	/^char const* GetLayerTypeAsCString(LayerType type)$/;"	f	namespace:armnn
GetLinearBufferOffset	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^inline size_t GetLinearBufferOffset(const arm_compute::ITensorInfo& info,$/;"	f	namespace:armnn::armcomputetensorutils
GetLoadedNetworkPtr	./src/armnn/Runtime.cpp	/^LoadedNetwork* Runtime::GetLoadedNetworkPtr(NetworkId networkId) const$/;"	f	class:armnn::Runtime
GetMemoryArea	./include/armnn/Tensor.hpp	/^    MemoryType GetMemoryArea() const { return m_MemoryArea; }$/;"	f	class:armnn::BaseTensor
GetName	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.hpp	/^    static const std::string& GetName()$/;"	f	class:armnn::ClPermuteWorkload
GetName	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.hpp	/^    static const std::string& GetName()$/;"	f	class:armnn::NeonPermuteWorkload
GetName	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.hpp	/^    static const std::string& GetName()$/;"	f	class:armnn::RefPermuteWorkload
GetNameStr	./src/armnn/Layer.hpp	/^    const std::string& GetNameStr() const$/;"	f	class:armnn::Layer
GetNetworkInputBindingInfo	./src/armnnCaffeParser/CaffeParser.cpp	/^BindingPointInfo CaffeParser::GetNetworkInputBindingInfo(const std::string& name) const$/;"	f	class:armnnCaffeParser::CaffeParser
GetNetworkInputBindingInfo	./src/armnnTfParser/TfParser.cpp	/^BindingPointInfo TfParser::GetNetworkInputBindingInfo(const std::string& name) const$/;"	f	class:armnnTfParser::TfParser
GetNetworkOutputBindingInfo	./src/armnnCaffeParser/CaffeParser.cpp	/^BindingPointInfo CaffeParser::GetNetworkOutputBindingInfo(const std::string& name) const$/;"	f	class:armnnCaffeParser::CaffeParser
GetNetworkOutputBindingInfo	./src/armnnTfParser/TfParser.cpp	/^BindingPointInfo TfParser::GetNetworkOutputBindingInfo(const std::string& name) const$/;"	f	class:armnnTfParser::TfParser
GetNode	./src/armnnTfParser/TfParser.cpp	/^    const tensorflow::NodeDef& GetNode() const { return m_Node; }$/;"	f	class:armnnTfParser::ParsedTfOperation
GetNumBytes	./include/armnn/Tensor.hpp	/^    unsigned int GetNumBytes() const { return m_Info.GetNumBytes(); }$/;"	f	class:armnn::BaseTensor
GetNumBytes	./src/armnn/Tensor.cpp	/^unsigned int TensorInfo::GetNumBytes() const$/;"	f	class:armnn::TensorInfo
GetNumChannels	./tests/InferenceTestImage.hpp	/^    unsigned int GetNumChannels() const { return m_NumChannels; }$/;"	f	class:InferenceTestImage
GetNumDimensions	./include/armnn/Tensor.hpp	/^    unsigned int GetNumDimensions() const { return m_Info.GetNumDimensions(); }$/;"	f	class:armnn::BaseTensor
GetNumDimensions	./include/armnn/Tensor.hpp	/^    unsigned int GetNumDimensions() const { return m_NumDimensions; }$/;"	f	class:armnn::TensorShape
GetNumDimensions	./include/armnn/Tensor.hpp	/^    unsigned int GetNumDimensions() const { return m_Shape.GetNumDimensions(); }$/;"	f	class:armnn::TensorInfo
GetNumDimensions	./src/armnn/Descriptors.cpp	/^uint32_t OriginsDescriptor::GetNumDimensions() const$/;"	f	class:armnn::OriginsDescriptor
GetNumDimensions	./src/armnn/Descriptors.cpp	/^uint32_t ViewsDescriptor::GetNumDimensions() const$/;"	f	class:armnn::ViewsDescriptor
GetNumDimensions	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^    unsigned int GetNumDimensions()$/;"	f	struct:armnn::BroadcastLoop
GetNumElements	./include/armnn/Tensor.hpp	/^    unsigned int GetNumElements() const { return m_Info.GetNumElements(); }$/;"	f	class:armnn::BaseTensor
GetNumElements	./include/armnn/Tensor.hpp	/^    unsigned int GetNumElements() const { return m_Shape.GetNumElements(); }$/;"	f	class:armnn::TensorInfo
GetNumElements	./src/armnn/Tensor.cpp	/^unsigned int TensorShape::GetNumElements() const$/;"	f	class:armnn::TensorShape
GetNumElements	./tests/InferenceTestImage.hpp	/^    unsigned int GetNumElements() const { return GetWidth() * GetHeight() * GetNumChannels(); }$/;"	f	class:InferenceTestImage
GetNumImageBytes	./tests/ImageNetDatabase.hpp	/^    unsigned int GetNumImageBytes() const { return 4 * GetNumImageElements(); }$/;"	f	class:ImageNetDatabase
GetNumImageBytes	./tests/MobileNetDatabase.hpp	/^    unsigned int GetNumImageBytes() const { return 4 * GetNumImageElements(); }$/;"	f	class:MobileNetDatabase
GetNumImageElements	./tests/ImageNetDatabase.hpp	/^    unsigned int GetNumImageElements() const { return 3 * m_Width * m_Height; }$/;"	f	class:ImageNetDatabase
GetNumImageElements	./tests/MobileNetDatabase.hpp	/^    unsigned int GetNumImageElements() const { return 3 * m_Width * m_Height; }$/;"	f	class:MobileNetDatabase
GetNumInputs	./src/armnn/Graph.hpp	/^    size_t GetNumInputs() const { return m_InputIds.size(); }$/;"	f	class:armnn::Graph
GetNumInputs	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^unsigned int GetNumInputs(const armnn::Layer& layer)$/;"	f	namespace:__anon16
GetNumInputs	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^unsigned int GetNumInputs<armnn::LayerType::Merger>(const armnn::Layer& layer)$/;"	f	namespace:__anon16
GetNumLayers	./src/armnn/Graph.hpp	/^    size_t GetNumLayers() const { return m_Layers.size(); }$/;"	f	class:armnn::Graph
GetNumOutputs	./src/armnn/Graph.hpp	/^    size_t GetNumOutputs() const { return m_OutputIds.size(); }$/;"	f	class:armnn::Graph
GetNumOutputs	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^unsigned int GetNumOutputs(const armnn::Layer& layer)$/;"	f	namespace:__anon16
GetNumViews	./src/armnn/Descriptors.cpp	/^uint32_t OriginsDescriptor::GetNumViews() const$/;"	f	class:armnn::OriginsDescriptor
GetNumViews	./src/armnn/Descriptors.cpp	/^uint32_t ViewsDescriptor::GetNumViews() const$/;"	f	class:armnn::ViewsDescriptor
GetOutput	./tests/InferenceTest.hpp	/^    const std::vector<typename TModel::DataType>& GetOutput() const { return m_Output; }$/;"	f	class:armnn::test::InferenceModelTestCase
GetOutputHandler	./src/armnn/Layer.hpp	/^    OutputHandler& GetOutputHandler() { return m_OutputHandler; }$/;"	f	class:armnn::final
GetOutputHandler	./src/armnn/Layer.hpp	/^    OutputHandler& GetOutputHandler(unsigned int i = 0)$/;"	f	class:armnn::Layer
GetOutputHandler	./src/armnn/Layer.hpp	/^    const OutputHandler& GetOutputHandler() const { return m_OutputHandler; }$/;"	f	class:armnn::final
GetOutputHandler	./src/armnn/Layer.hpp	/^    const OutputHandler& GetOutputHandler(unsigned int i = 0) const$/;"	f	class:armnn::Layer
GetOutputLayers	./src/armnn/Graph.hpp	/^    OutputLayersAccessor GetOutputLayers() const { return OutputLayersAccessor(*this); }$/;"	f	class:armnn::Graph
GetOutputShapeRoundingAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetOutputShapeRoundingAsCString(OutputShapeRounding rounding)$/;"	f	namespace:armnn
GetOutputSize	./tests/InferenceModel.hpp	/^    unsigned int GetOutputSize() const$/;"	f	class:InferenceModel
GetOutputSlots	./src/armnn/Layer.hpp	/^    const std::vector<OutputSlot>& GetOutputSlots() const { return m_OutputSlots; }$/;"	f	class:armnn::Layer
GetOutputTensorData	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^DataType* GetOutputTensorData(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetOutputTensorDataFloat	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^float* GetOutputTensorDataFloat(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetOutputTensorDataU8	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^uint8_t* GetOutputTensorDataU8(unsigned int idx, const PayloadType& data)$/;"	f	namespace:armnn
GetOutputTensorInfo	./src/armnn/LoadedNetwork.cpp	/^TensorInfo LoadedNetwork::GetOutputTensorInfo(LayerBindingId layerId) const$/;"	f	class:armnn::LoadedNetwork
GetOutputTensorInfo	./src/armnn/Runtime.cpp	/^TensorInfo Runtime::GetOutputTensorInfo(NetworkId networkId, LayerBindingId layerId) const$/;"	f	class:armnn::Runtime
GetOutputTensorInfo	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    static armnn::TensorInfo GetOutputTensorInfo()$/;"	f	struct:__anon11::BoundedReLuRandomInputTestTraits
GetOutputTensorPin	./src/armnn/LoadedNetwork.cpp	/^    const TensorPin& GetOutputTensorPin(LayerBindingId id) const$/;"	f	class:armnn::__anon2::WorkloadData
GetOwningLayer	./src/armnn/Layer.hpp	/^    Layer& GetOwningLayer() const { return m_OwningLayer; }$/;"	f	class:armnn::final
GetPaddingMethodAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetPaddingMethodAsCString(PaddingMethod method)$/;"	f	namespace:armnn
GetParameters	./src/armnn/layers/LayerWithParameters.hpp	/^    const Parameters& GetParameters() const { return m_Param; }$/;"	f	class:armnn::LayerWithParameters
GetPermutation	./src/armnn/layers/PermuteLayer.hpp	/^    const PermutationVector& GetPermutation() const$/;"	f	class:armnn::PermuteLayer
GetPixelAs3Channels	./tests/InferenceTestImage.cpp	/^std::tuple<uint8_t, uint8_t, uint8_t> InferenceTestImage::GetPixelAs3Channels(unsigned int x, unsigned int y) const$/;"	f	class:InferenceTestImage
GetPoolingAlgorithmAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetPoolingAlgorithmAsCString(PoolingAlgorithm pooling)$/;"	f	namespace:armnn
GetPosInGraph	./src/armnn/Graph.hpp	/^inline Graph::Iterator Graph::GetPosInGraph(Layer& layer)$/;"	f	class:armnn::Graph
GetPriority	./src/armnn/Layer.cpp	/^LayerPriority Layer::GetPriority() const$/;"	f	class:armnn::Layer
GetQuantizationOffset	./include/armnn/Tensor.hpp	/^    int32_t GetQuantizationOffset() const           { return m_Quantization.m_Offset; }$/;"	f	class:armnn::TensorInfo
GetQuantizationScale	./include/armnn/Tensor.hpp	/^    float GetQuantizationScale() const              { return m_Quantization.m_Scale; }$/;"	f	class:armnn::TensorInfo
GetShape	./include/armnn/Tensor.hpp	/^    TensorShape& GetShape()                         { return m_Shape; }$/;"	f	class:armnn::TensorInfo
GetShape	./include/armnn/Tensor.hpp	/^    TensorShape& GetShape() { return m_Info.GetShape(); }$/;"	f	class:armnn::BaseTensor
GetShape	./include/armnn/Tensor.hpp	/^    const TensorShape& GetShape() const             { return m_Shape; }$/;"	f	class:armnn::TensorInfo
GetShape	./include/armnn/Tensor.hpp	/^    const TensorShape& GetShape() const { return m_Info.GetShape(); }$/;"	f	class:armnn::BaseTensor
GetSingleElementSizeInBytes	./tests/InferenceTestImage.hpp	/^    static unsigned int GetSingleElementSizeInBytes()$/;"	f	class:InferenceTestImage
GetSize	./include/armnn/Types.hpp	/^    SizeType GetSize() const { return m_NumDimMappings; }$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
GetSizeInBytes	./tests/InferenceTestImage.hpp	/^    unsigned int GetSizeInBytes() const { return GetNumElements() * GetSingleElementSizeInBytes(); }$/;"	f	class:InferenceTestImage
GetSlotIndex	./src/armnn/Layer.hpp	/^    unsigned int GetSlotIndex() const { return m_SlotIndex; }$/;"	f	class:armnn::final
GetStatusAsCString	./include/armnn/TypesUtils.hpp	/^constexpr char const* GetStatusAsCString(Status compute)$/;"	f	namespace:armnn
GetStream	./src/armnnUtils/DotSerializer.hpp	/^    std::ostream& GetStream() { return m_Stream; }$/;"	f	class:armnn::DotBase
GetTensor	./src/armnn/backends/CpuTensorHandle.cpp	/^void* CpuTensorHandle::GetTensor() const$/;"	f	class:armnn::CpuTensorHandle
GetTensor	./src/armnn/backends/CpuTensorHandle.hpp	/^    T* GetTensor() const$/;"	f	class:armnn::CpuTensorHandle
GetTensorHandle	./src/armnn/LoadedNetwork.cpp	/^    ITensorHandle* GetTensorHandle() const { return m_TensorHandle.get(); }$/;"	f	class:armnn::__anon2::TensorPin
GetTensorInfo	./src/armnn/Layer.cpp	/^const TensorInfo& OutputSlot::GetTensorInfo() const$/;"	f	class:armnn::OutputSlot
GetTensorInfo	./src/armnn/LoadedNetwork.cpp	/^    const TensorInfo& GetTensorInfo() const { return m_TensorInfo; }$/;"	f	class:armnn::__anon2::TensorPin
GetTensorInfo	./src/armnn/backends/CpuTensorHandle.hpp	/^    const TensorInfo& GetTensorInfo() const$/;"	f	class:armnn::ConstCpuTensorHandle
GetTensorInfo	./src/armnn/backends/OutputHandler.hpp	/^    const TensorInfo& GetTensorInfo() const { return m_TensorInfo; }$/;"	f	class:armnn::OutputHandler
GetTensorInfo	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline const TensorInfo& GetTensorInfo(const ITensorHandle* tensorHandle)$/;"	f	namespace:armnn
GetTensorOffset	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^inline size_t GetTensorOffset(const arm_compute::ITensorInfo& info,$/;"	f	namespace:armnn::armcomputetensorutils
GetTensorPin	./src/armnn/LoadedNetwork.cpp	/^static const TensorPin& GetTensorPin(LayerBindingId id,$/;"	f	namespace:armnn::__anon2
GetTensorShapeAsArray	./src/armnn/backends/test/LayerTests.hpp	/^boost::array<unsigned int, n> GetTensorShapeAsArray(const armnn::TensorInfo& tensorInfo)$/;"	f
GetTestCaseData	./tests/Cifar10Database.cpp	/^std::unique_ptr<Cifar10Database::TTestCaseData> Cifar10Database::GetTestCaseData(unsigned int testCaseId)$/;"	f	class:Cifar10Database
GetTestCaseData	./tests/ImageNetDatabase.cpp	/^std::unique_ptr<ImageNetDatabase::TTestCaseData> ImageNetDatabase::GetTestCaseData(unsigned int testCaseId)$/;"	f	class:ImageNetDatabase
GetTestCaseData	./tests/MnistDatabase.cpp	/^std::unique_ptr<MnistDatabase::TTestCaseData> MnistDatabase::GetTestCaseData(unsigned int testCaseId)$/;"	f	class:MnistDatabase
GetTestCaseData	./tests/MobileNetDatabase.cpp	/^MobileNetDatabase::GetTestCaseData(unsigned int testCaseId)$/;"	f	class:MobileNetDatabase
GetTestCaseData	./tests/YoloDatabase.cpp	/^std::unique_ptr<YoloDatabase::TTestCaseData> YoloDatabase::GetTestCaseData(unsigned int testCaseId)$/;"	f	class:YoloDatabase
GetTestCaseId	./tests/InferenceTest.hpp	/^    unsigned int GetTestCaseId() const { return m_TestCaseId; }$/;"	f	class:armnn::test::InferenceModelTestCase
GetTfInputNodes	./src/armnnTfParser/TfParser.cpp	/^TfParser::GetTfInputNodes(const tensorflow::NodeDef& nodeDef) const$/;"	f	class:armnnTfParser::TfParser
GetType	./src/armnn/Layer.hpp	/^    LayerType GetType() const { return m_Type; }$/;"	f	class:armnn::Layer
GetViewOrigin	./src/armnn/Descriptors.cpp	/^const uint32_t* OriginsDescriptor::GetViewOrigin(uint32_t idx) const$/;"	f	class:armnn::OriginsDescriptor
GetViewOrigin	./src/armnn/Descriptors.cpp	/^const uint32_t* ViewsDescriptor::GetViewOrigin(uint32_t idx) const$/;"	f	class:armnn::ViewsDescriptor
GetViewSizes	./src/armnn/Descriptors.cpp	/^const uint32_t* ViewsDescriptor::GetViewSizes(uint32_t idx) const$/;"	f	class:armnn::ViewsDescriptor
GetWidth	./tests/InferenceTestImage.hpp	/^    unsigned int GetWidth() const { return m_Width; }$/;"	f	class:InferenceTestImage
GetWorkloadFactory	./src/armnn/LoadedNetwork.cpp	/^const IWorkloadFactory& LoadedNetwork::GetWorkloadFactory(const Layer& layer) const$/;"	f	class:armnn::LoadedNetwork
GlobalPoolingFixture	./src/armnnCaffeParser/test/TestPooling2d.cpp	/^    GlobalPoolingFixture()$/;"	f	struct:GlobalPoolingFixture
GlobalPoolingFixture	./src/armnnCaffeParser/test/TestPooling2d.cpp	/^struct GlobalPoolingFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
GpuAcc	./include/armnn/Types.hpp	/^    GpuAcc      = 2,  \/\/ GPU Execution: OpenCL: ArmCompute$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
Graph	./src/armnn/Graph.cpp	/^Graph::Graph(const Graph& other)$/;"	f	class:armnn::Graph
Graph	./src/armnn/Graph.hpp	/^    Graph() : m_LayersInOrder(true) {}$/;"	f	class:armnn::Graph
Graph	./src/armnn/Graph.hpp	/^class Graph$/;"	c	namespace:armnn
GraphHasNamedLayer	./src/armnn/test/GraphUtils.hpp	/^bool GraphHasNamedLayer(const armnn::Graph& graph, const std::string& name)$/;"	f	namespace:__anon24
GraphTopologicalSort	./src/armnnUtils/GraphTopologicalSort.hpp	/^bool GraphTopologicalSort($/;"	f	namespace:armnnUtils
GraphValidationException	./include/armnn/Exceptions.hpp	/^class GraphValidationException : public Exception$/;"	c	namespace:armnn
HEX	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HasParsedConstTensor	./src/armnnTfParser/TfParser.cpp	/^bool TfParser::HasParsedConstTensor(const std::string & nodeName) const$/;"	f	class:armnnTfParser::TfParser
Horse	./tests/YoloDatabase.cpp	/^    Horse,$/;"	m	class:__anon34::YoloVocClass	file:
HtmlBold	./src/armnnUtils/DotSerializer.hpp	/^    explicit HtmlBold(std::ostream &stream)$/;"	f	class:armnn::HtmlBold
HtmlBold	./src/armnnUtils/DotSerializer.hpp	/^class HtmlBold : public HtmlSimpleTag$/;"	c	namespace:armnn
HtmlFont	./src/armnnUtils/DotSerializer.cpp	/^HtmlFont::HtmlFont(std::ostream& stream)$/;"	f	class:armnn::HtmlFont
HtmlFont	./src/armnnUtils/DotSerializer.cpp	/^HtmlFont::HtmlFont(std::ostream& stream, int fontSize, const char *color, const char *face)$/;"	f	class:armnn::HtmlFont
HtmlFont	./src/armnnUtils/DotSerializer.hpp	/^class HtmlFont : public DotBase$/;"	c	namespace:armnn
HtmlSection	./src/armnnUtils/DotSerializer.hpp	/^    explicit HtmlSection(std::ostream& stream)$/;"	f	class:armnn::HtmlSection
HtmlSection	./src/armnnUtils/DotSerializer.hpp	/^class HtmlSection : public DotBase$/;"	c	namespace:armnn
HtmlSimpleTag	./src/armnnUtils/DotSerializer.hpp	/^    explicit HtmlSimpleTag(std::ostream& stream, const char* name)$/;"	f	class:armnn::HtmlSimpleTag
HtmlSimpleTag	./src/armnnUtils/DotSerializer.hpp	/^class HtmlSimpleTag : public DotBase$/;"	c	namespace:armnn
ICaffeParser	./include/armnnCaffeParser/ICaffeParser.hpp	/^class ICaffeParser$/;"	c	namespace:armnnCaffeParser
IClTensorHandle	./src/armnn/backends/ClTensorHandle.hpp	/^class IClTensorHandle : public ITensorHandle$/;"	c	namespace:armnn
IClTunedParameters	./include/armnn/IRuntime.hpp	/^class IClTunedParameters$/;"	c	namespace:armnn
IConnectableLayer	./include/armnn/INetwork.hpp	/^class IConnectableLayer$/;"	c	namespace:armnn
ID_VOID_MAIN	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IInferenceTestCase	./tests/InferenceTest.hpp	/^class IInferenceTestCase$/;"	c	namespace:armnn::test
IInferenceTestCaseProvider	./tests/InferenceTest.hpp	/^class IInferenceTestCaseProvider$/;"	c	namespace:armnn::test
IInputSlot	./include/armnn/INetwork.hpp	/^class IInputSlot$/;"	c	namespace:armnn
INeonTensorHandle	./src/armnn/backends/NeonTensorHandle.hpp	/^class INeonTensorHandle : public ITensorHandle$/;"	c	namespace:armnn
INetwork	./include/armnn/INetwork.hpp	/^class INetwork$/;"	c	namespace:armnn
IOptimizedNetwork	./include/armnn/INetwork.hpp	/^class IOptimizedNetwork$/;"	c	namespace:armnn
IOutputSlot	./include/armnn/INetwork.hpp	/^class IOutputSlot$/;"	c	namespace:armnn
IRuntime	./include/armnn/IRuntime.hpp	/^class IRuntime$/;"	c	namespace:armnn
ITensorHandle	./src/armnn/backends/ITensorHandle.hpp	/^class ITensorHandle$/;"	c	namespace:armnn
ITfParser	./include/armnnTfParser/ITfParser.hpp	/^class ITfParser$/;"	c	namespace:armnnTfParser
IWorkload	./src/armnn/backends/Workload.hpp	/^class IWorkload$/;"	c	namespace:armnn
IWorkloadFactory	./src/armnn/backends/WorkloadFactory.hpp	/^class IWorkloadFactory$/;"	c	namespace:armnn
IdentityChainFixture	./src/armnnTfParser/test/Identity.cpp	/^    IdentityChainFixture()$/;"	f	struct:IdentityChainFixture
IdentityChainFixture	./src/armnnTfParser/test/Identity.cpp	/^struct IdentityChainFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
IdentityFixture	./src/armnnTfParser/test/Identity.cpp	/^    IdentityFixture()$/;"	f	struct:IdentityFixture
IdentityFixture	./src/armnnTfParser/test/Identity.cpp	/^struct IdentityFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
IdentitySimpleFixture	./src/armnnTfParser/test/Identity.cpp	/^    IdentitySimpleFixture()$/;"	f	struct:IdentitySimpleFixture
IdentitySimpleFixture	./src/armnnTfParser/test/Identity.cpp	/^struct IdentitySimpleFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
IgnorePaddingAveragePooling2dSize3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingAveragePooling2dSize3Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingAveragePooling2dSize3TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingAveragePooling2dSize3TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingAveragePooling2dSize3Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingAveragePooling2dSize3Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingAveragePooling2dSize3x2Stride2x2Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingAveragePooling2dSize3x2Stride2x2Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingAveragePooling2dSize3x2Stride2x2TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingAveragePooling2dSize3x2Stride2x2TestCommon($/;"	f
IgnorePaddingL2Pooling2dSize3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingL2Pooling2dSize3Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingL2Pooling2dSize3TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingL2Pooling2dSize3TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingL2Pooling2dSize3Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingL2Pooling2dSize3Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingMaxPooling2dSize3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingMaxPooling2dSize3Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingMaxPooling2dSize3TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingMaxPooling2dSize3TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingMaxPooling2dSize3Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingMaxPooling2dSize3Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleAveragePooling2dNoPaddingTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingSimpleAveragePooling2dNoPaddingTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleAveragePooling2dNoPaddingTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingSimpleAveragePooling2dNoPaddingTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingSimpleAveragePooling2dNoPaddingUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingSimpleAveragePooling2dNoPaddingUint8Test($/;"	f
IgnorePaddingSimpleAveragePooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingSimpleAveragePooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleAveragePooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingSimpleAveragePooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingSimpleAveragePooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingSimpleAveragePooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleL2Pooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingSimpleL2Pooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleL2Pooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingSimpleL2Pooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingSimpleL2Pooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingSimpleL2Pooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleMaxPooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> IgnorePaddingSimpleMaxPooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnorePaddingSimpleMaxPooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> IgnorePaddingSimpleMaxPooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
IgnorePaddingSimpleMaxPooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> IgnorePaddingSimpleMaxPooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
IgnoreValue	./include/armnn/Types.hpp	/^    IgnoreValue = 0, \/\/ The padding fields count, but ignored$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod
ImageChannel	./tests/InferenceTestImage.hpp	/^enum class ImageChannel$/;"	c
ImageChannelLayout	./tests/InferenceTestImage.hpp	/^enum class ImageChannelLayout$/;"	c
ImageNetDatabase	./tests/ImageNetDatabase.cpp	/^ImageNetDatabase::ImageNetDatabase(const std::string& binaryFileDirectory, unsigned int width, unsigned int height,$/;"	f	class:ImageNetDatabase
ImageNetDatabase	./tests/ImageNetDatabase.hpp	/^class ImageNetDatabase$/;"	c
ImageNotFoundException	./tests/YoloDatabase.cpp	/^class ImageNotFoundException : public armnn::Exception$/;"	c	namespace:__anon34	file:
Impl	./src/armnnUtils/LeakChecking.cpp	/^    Impl(const std::string & name)$/;"	f	struct:ScopedLeakChecker::Impl
Impl	./src/armnnUtils/LeakChecking.cpp	/^struct ScopedDisableLeakChecking::Impl$/;"	s	class:ScopedDisableLeakChecking	file:
Impl	./src/armnnUtils/LeakChecking.cpp	/^struct ScopedLeakChecker::Impl$/;"	s	class:ScopedLeakChecker	file:
ImpliedDimensionsSqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^typedef SqueezeFixture<false, false> ImpliedDimensionsSqueezeFixture;$/;"	t	file:
InPlaceFixture	./src/armnnCaffeParser/test/TestInPlace.cpp	/^    InPlaceFixture()$/;"	f	struct:InPlaceFixture
InPlaceFixture	./src/armnnCaffeParser/test/TestInPlace.cpp	/^struct InPlaceFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
InPlaceOutputFixture	./src/armnnCaffeParser/test/TestInPlace.cpp	/^    InPlaceOutputFixture()$/;"	f	struct:InPlaceOutputFixture
InPlaceOutputFixture	./src/armnnCaffeParser/test/TestInPlace.cpp	/^struct InPlaceOutputFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
Indent	./src/armnnUtils/DotSerializer.cpp	/^std::string Indent(int numSpaces)$/;"	f	namespace:armnn::__anon28
InferTensorInfos	./src/armnn/Graph.cpp	/^void Graph::InferTensorInfos()$/;"	f	class:armnn::Graph
InferenceModel	./tests/InferenceModel.hpp	/^    InferenceModel(const Params& params)$/;"	f	class:InferenceModel
InferenceModel	./tests/InferenceModel.hpp	/^class InferenceModel$/;"	c
InferenceModelTestCase	./tests/InferenceTest.hpp	/^    InferenceModelTestCase(TModel& model,$/;"	f	class:armnn::test::InferenceModelTestCase
InferenceModelTestCase	./tests/InferenceTest.hpp	/^class InferenceModelTestCase : public IInferenceTestCase$/;"	c	namespace:armnn::test
InferenceTest	./tests/InferenceTest.cpp	/^bool InferenceTest(const InferenceTestOptions& params,$/;"	f	namespace:armnn::test
InferenceTestImage	./tests/InferenceTestImage.cpp	/^InferenceTestImage::InferenceTestImage(char const* filePath)$/;"	f	class:InferenceTestImage
InferenceTestImage	./tests/InferenceTestImage.hpp	/^class InferenceTestImage$/;"	c
InferenceTestImageException	./tests/InferenceTestImage.hpp	/^class InferenceTestImageException : public armnn::Exception$/;"	c
InferenceTestImageLoadFailed	./tests/InferenceTestImage.hpp	/^class InferenceTestImageLoadFailed : public InferenceTestImageException$/;"	c
InferenceTestImageOutOfBoundsAccess	./tests/InferenceTestImage.hpp	/^class InferenceTestImageOutOfBoundsAccess : public InferenceTestImageException$/;"	c
InferenceTestImageResizeFailed	./tests/InferenceTestImage.hpp	/^class InferenceTestImageResizeFailed : public InferenceTestImageException$/;"	c
InferenceTestImageWriteFailed	./tests/InferenceTestImage.hpp	/^class InferenceTestImageWriteFailed : public InferenceTestImageException$/;"	c
InferenceTestOptions	./tests/InferenceTest.hpp	/^    InferenceTestOptions()$/;"	f	struct:armnn::test::InferenceTestOptions
InferenceTestOptions	./tests/InferenceTest.hpp	/^struct InferenceTestOptions$/;"	s	namespace:armnn::test
Info	./include/armnn/Utils.hpp	/^    Info,$/;"	m	class:armnn::LogSeverity
InitClDepthwiseConvolutionWorkload	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionHelper.hpp	/^void InitClDepthwiseConvolutionWorkload(WorkloadType& workload)$/;"	f	namespace:armnn
InitialiseArmComputeClTensorData	./src/armnn/backends/ClWorkloadUtils.hpp	/^void InitialiseArmComputeClTensorData(arm_compute::CLTensor& clTensor, const T* data)$/;"	f	namespace:armnn
InitialiseArmComputeTensorData	./src/armnn/backends/NeonWorkloadUtils.cpp	/^void InitialiseArmComputeTensorData(arm_compute::Tensor& tensor, const T* data)$/;"	f	namespace:armnn
InitialiseArmComputeTensorEmpty	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^void InitialiseArmComputeTensorEmpty(Tensor& tensor)$/;"	f	namespace:armnn::armcomputetensorutils
Input	./src/armnn/InternalTypes.hpp	/^    Input,$/;"	m	class:armnn::LayerType
InputLayer	./src/armnn/layers/InputLayer.cpp	/^InputLayer::InputLayer(LayerBindingId id, const char* name)$/;"	f	class:armnn::InputLayer
InputLayer	./src/armnn/layers/InputLayer.hpp	/^class InputLayer : public BindableLayer$/;"	c	namespace:armnn
InputLayersAccessor	./src/armnn/Graph.hpp	/^        explicit InputLayersAccessor(const Graph& graph) : m_Graph(graph) {}$/;"	f	struct:armnn::Graph::InputLayersAccessor
InputLayersAccessor	./src/armnn/Graph.hpp	/^    struct InputLayersAccessor$/;"	s	class:armnn::Graph
InputSlot	./src/armnn/Layer.hpp	/^    explicit InputSlot(Layer& owner, unsigned int slotIndex)$/;"	f	class:armnn::final
Insert	./src/armnn/Layer.cpp	/^void InputSlot::Insert(Layer& layer)$/;"	f	class:armnn::InputSlot
InsertNewLayer	./src/armnn/Graph.hpp	/^inline LayerT* Graph::InsertNewLayer(InputSlot& insertBefore, Args&&... args)$/;"	f	class:armnn::Graph
InvalidArgumentException	./include/armnn/Exceptions.hpp	/^class InvalidArgumentException : public Exception$/;"	c	namespace:armnn
InvokeParseFunction	./src/armnnTfParser/TfParser.cpp	/^struct InvokeParseFunction$/;"	s	namespace:armnnTfParser	file:
IsActivationSupported	./src/armnn/LayerSupport.cpp	/^bool IsActivationSupported(Compute compute,$/;"	f	namespace:armnn
IsActivationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsActivationSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsActivationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsActivationSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsActivationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsActivationSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsActive	./src/armnnUtils/LeakChecking.cpp	/^bool ScopedLeakChecker::IsActive()$/;"	f	class:ScopedLeakChecker
IsAdditionSupported	./src/armnn/LayerSupport.cpp	/^bool IsAdditionSupported(Compute compute,$/;"	f	namespace:armnn
IsAdditionSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsAdditionSupportedCl(const TensorInfo& input0,$/;"	f	namespace:armnn
IsAdditionSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsAdditionSupportedNeon(const TensorInfo& input0,$/;"	f	namespace:armnn
IsAdditionSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsAdditionSupportedRef(const TensorInfo& input0,$/;"	f	namespace:armnn
IsBatchNormalizationSupported	./src/armnn/LayerSupport.cpp	/^bool IsBatchNormalizationSupported(Compute compute,$/;"	f	namespace:armnn
IsBatchNormalizationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsBatchNormalizationSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsBatchNormalizationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsBatchNormalizationSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsBatchNormalizationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsBatchNormalizationSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsClActivationUint8Supported	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsClActivationUint8Supported(std::string* reasonIfUnsupported, const ActivationDescriptor& parameters)$/;"	f	namespace:armnn
IsClBackendSupported	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsClBackendSupported(std::string* reasonIfUnsupported)$/;"	f	namespace:armnn::__anon3
IsClDepthwiseConvolution2dDescParamsSupported	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsClDepthwiseConvolution2dDescParamsSupported(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsClDirectConvolution2dSupported	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsClDirectConvolution2dSupported(const TensorInfo& weightInfo, const Convolution2dDescriptor& desc)$/;"	f	namespace:armnn
IsConstantSupported	./src/armnn/LayerSupport.cpp	/^bool IsConstantSupported(Compute compute,$/;"	f	namespace:armnn
IsConstantSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsConstantSupportedCl(const TensorInfo& output,$/;"	f	namespace:armnn
IsConstantSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsConstantSupportedNeon(const TensorInfo& output,$/;"	f	namespace:armnn
IsConstantSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsConstantSupportedRef(const TensorInfo& output,$/;"	f	namespace:armnn
IsConvolution2dSupported	./src/armnn/LayerSupport.cpp	/^bool IsConvolution2dSupported(Compute compute,$/;"	f	namespace:armnn
IsConvolution2dSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsConvolution2dSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsConvolution2dSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsConvolution2dSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsConvolution2dSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsConvolution2dSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsDepthwiseConvolutionSupported	./src/armnn/LayerSupport.cpp	/^bool IsDepthwiseConvolutionSupported(Compute compute,$/;"	f	namespace:armnn
IsDepthwiseConvolutionSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsDepthwiseConvolutionSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsDepthwiseConvolutionSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsDepthwiseConvolutionSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsDepthwiseConvolutionSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsDepthwiseConvolutionSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsDirectConvolution2dParamsSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsDirectConvolution2dParamsSupportedCl(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsEqual	./include/armnn/Types.hpp	/^    bool IsEqual(const PermutationVector& other) const$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
IsEqual	./src/armnn/layers/PermuteLayer.hpp	/^    bool IsEqual(const Layer& other) const$/;"	f	class:armnn::PermuteLayer
IsEqual	./src/armnn/layers/ReshapeLayer.hpp	/^    bool IsEqual(const Layer& other) const$/;"	f	class:armnn::ReshapeLayer
IsFakeQuantizationSupported	./src/armnn/LayerSupport.cpp	/^bool IsFakeQuantizationSupported(Compute compute,$/;"	f	namespace:armnn
IsFakeQuantizationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsFakeQuantizationSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsFakeQuantizationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsFakeQuantizationSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsFakeQuantizationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsFakeQuantizationSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsFloatIterFunc	./src/armnn/test/EndToEndTest.cpp	/^bool IsFloatIterFunc(T iter)$/;"	f	namespace:__anon22
IsFloatingPointIterator	./src/armnn/backends/test/QuantizeHelper.hpp	/^struct IsFloatingPointIterator$/;"	s
IsFloorSupported	./src/armnn/LayerSupport.cpp	/^bool IsFloorSupported(Compute compute,$/;"	f	namespace:armnn
IsFloorSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsFloorSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsFloorSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsFloorSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsFloorSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsFloorSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsFullyConnectedSupported	./src/armnn/LayerSupport.cpp	/^bool IsFullyConnectedSupported(Compute compute,$/;"	f	namespace:armnn
IsFullyConnectedSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsFullyConnectedSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsFullyConnectedSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsFullyConnectedSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsFullyConnectedSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsFullyConnectedSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsInRange	./src/armnnCaffeParser/CaffeParser.cpp	/^bool IsInRange(unsigned int value, unsigned int min, unsigned int max)$/;"	f	namespace:armnnCaffeParser
IsInputSupported	./src/armnn/LayerSupport.cpp	/^bool IsInputSupported(Compute compute,$/;"	f	namespace:armnn
IsInputSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsInputSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsInputSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsInputSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsInputSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsInputSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsInverse	./include/armnn/Types.hpp	/^    bool IsInverse(const PermutationVector& other) const$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
IsInverse	./src/armnn/layers/PermuteLayer.hpp	/^    bool IsInverse(const Layer& other) const$/;"	f	class:armnn::PermuteLayer
IsL2NormalizationSupported	./src/armnn/LayerSupport.cpp	/^bool IsL2NormalizationSupported(Compute compute,$/;"	f	namespace:armnn
IsL2NormalizationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsL2NormalizationSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsL2NormalizationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsL2NormalizationSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsL2NormalizationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsL2NormalizationSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsLayerOfType	./src/armnn/test/OptimizerTests.cpp	/^bool IsLayerOfType(const armnn::Layer* const layer)$/;"	f	namespace:__anon26
IsLayerSupported	./src/armnn/backends/ClWorkloadFactory.cpp	/^bool ClWorkloadFactory::IsLayerSupported(const Layer& layer, DataType dataType, std::string& outReasonIfUnsupported)$/;"	f	class:armnn::ClWorkloadFactory
IsLayerSupported	./src/armnn/backends/NeonWorkloadFactory.cpp	/^bool NeonWorkloadFactory::IsLayerSupported(const Layer& layer, DataType dataType, std::string& outReasonIfUnsupported)$/;"	f	class:armnn::NeonWorkloadFactory
IsLayerSupported	./src/armnn/backends/RefWorkloadFactory.cpp	/^bool RefWorkloadFactory::IsLayerSupported(const Layer& layer, DataType dataType, std::string& outReasonIfUnsupported)$/;"	f	class:armnn::RefWorkloadFactory
IsLayerSupported	./src/armnn/backends/WorkloadFactory.cpp	/^bool IWorkloadFactory::IsLayerSupported(Compute compute, const Layer& layer, DataType dataType,$/;"	f	class:armnn::IWorkloadFactory
IsLayerSupported	./src/armnn/backends/WorkloadFactory.cpp	/^bool IWorkloadFactory::IsLayerSupported(const Layer& layer, DataType dataType, std::string& outReasonIfUnsupported)$/;"	f	class:armnn::IWorkloadFactory
IsLayerSupportedTest	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool IsLayerSupportedTest(FactoryType *factory, Tag<Type>)$/;"	f	namespace:__anon16
IsLayerSupportedTests	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool IsLayerSupportedTests(FactoryType *factory)$/;"	f	namespace:__anon16
IsLayerSupportedTestsImpl	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool IsLayerSupportedTestsImpl(FactoryType *factory, Tag<Type>)$/;"	f	namespace:__anon16
IsLayerSupportedTestsImpl	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool IsLayerSupportedTestsImpl(FactoryType *factory, Tag<armnn::LayerType::LastLayer>)$/;"	f	namespace:__anon16
IsMatchingSize2d	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsMatchingSize2d(const TensorInfo& weightInfo)$/;"	f	namespace:armnn::__anon3
IsMatchingStride	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsMatchingStride(uint32_t actualStride)$/;"	f	namespace:armnn::__anon3
IsMergerSupported	./src/armnn/LayerSupport.cpp	/^bool IsMergerSupported(Compute compute,$/;"	f	namespace:armnn
IsMergerSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsMergerSupportedCl(const std::vector<const TensorInfo*> inputs,$/;"	f	namespace:armnn
IsMergerSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsMergerSupportedNeon(const std::vector<const TensorInfo*> inputs,$/;"	f	namespace:armnn
IsMergerSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsMergerSupportedRef(const std::vector<const TensorInfo*> inputs,$/;"	f	namespace:armnn
IsMultiplicationSupported	./src/armnn/LayerSupport.cpp	/^bool IsMultiplicationSupported(Compute compute,$/;"	f	namespace:armnn
IsMultiplicationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsMultiplicationSupportedCl(const TensorInfo& input0,$/;"	f	namespace:armnn
IsMultiplicationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsMultiplicationSupportedNeon(const TensorInfo& input0,$/;"	f	namespace:armnn
IsMultiplicationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsMultiplicationSupportedRef(const TensorInfo& input0,$/;"	f	namespace:armnn
IsNeonActivationUint8Supported	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNeonActivationUint8Supported(std::string* reasonIfUnsupported, const ActivationDescriptor& parameters)$/;"	f	namespace:armnn
IsNeonBackendSupported	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNeonBackendSupported(std::string* reasonIfUnsupported)$/;"	f	namespace:armnn
IsNeonDepthwiseConvolution2dDescParamsSupported	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNeonDepthwiseConvolution2dDescParamsSupported(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsNeonDirectConvolutionPreferred	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNeonDirectConvolutionPreferred(const TensorInfo& weightInfo, const Convolution2dDescriptor& desc)$/;"	f	namespace:armnn
IsNeonNormalizationDescParamsSupported	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNeonNormalizationDescParamsSupported(std::string* reasonIfUnsupported, const NormalizationDescriptor& parameters)$/;"	f	namespace:armnn
IsNormalizationSupported	./src/armnn/LayerSupport.cpp	/^bool IsNormalizationSupported(Compute compute,$/;"	f	namespace:armnn
IsNormalizationSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsNormalizationSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsNormalizationSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsNormalizationSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsNormalizationSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsNormalizationSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsOperationQueueDescriptor	./src/armnn/backends/RefWorkloadFactory.hpp	/^constexpr bool IsOperationQueueDescriptor(const ConstantQueueDescriptor&) { return false; }$/;"	f	namespace:armnn
IsOperationQueueDescriptor	./src/armnn/backends/RefWorkloadFactory.hpp	/^constexpr bool IsOperationQueueDescriptor(const MemCopyQueueDescriptor&) { return false; }$/;"	f	namespace:armnn
IsOperationQueueDescriptor	./src/armnn/backends/RefWorkloadFactory.hpp	/^constexpr bool IsOperationQueueDescriptor(const PermuteQueueDescriptor&) { return false; }$/;"	f	namespace:armnn
IsOperationQueueDescriptor	./src/armnn/backends/RefWorkloadFactory.hpp	/^constexpr bool IsOperationQueueDescriptor(const QueueDescriptorType&) { return true; }$/;"	f	namespace:armnn
IsOutputSupported	./src/armnn/LayerSupport.cpp	/^bool IsOutputSupported(Compute compute,$/;"	f	namespace:armnn
IsOutputSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsOutputSupportedCl(const TensorInfo& output,$/;"	f	namespace:armnn
IsOutputSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsOutputSupportedNeon(const TensorInfo& output,$/;"	f	namespace:armnn
IsOutputSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsOutputSupportedRef(const TensorInfo& output,$/;"	f	namespace:armnn
IsOutputUnconnected	./src/armnn/Layer.hpp	/^    bool IsOutputUnconnected()$/;"	f	class:armnn::Layer
IsPermuteSupported	./src/armnn/LayerSupport.cpp	/^bool IsPermuteSupported(Compute compute,$/;"	f	namespace:armnn
IsPermuteSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsPermuteSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsPermuteSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsPermuteSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsPermuteSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsPermuteSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsPooling2dSupported	./src/armnn/LayerSupport.cpp	/^bool IsPooling2dSupported(Compute compute,$/;"	f	namespace:armnn
IsPooling2dSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsPooling2dSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsPooling2dSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsPooling2dSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsPooling2dSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsPooling2dSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsQuantizedType	./include/armnn/TypesUtils.hpp	/^constexpr bool IsQuantizedType()$/;"	f	namespace:armnn
IsReshape	./src/armnn/optimizations/PermuteAsReshape.hpp	/^    static bool IsReshape(const PermuteLayer& layer)$/;"	f	class:armnn::optimizations::PermuteAsReshapeImpl
IsReshapeSupported	./src/armnn/LayerSupport.cpp	/^bool IsReshapeSupported(Compute compute,$/;"	f	namespace:armnn
IsReshapeSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsReshapeSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsReshapeSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsReshapeSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsReshapeSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsReshapeSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsResizeBilinearSupported	./src/armnn/LayerSupport.cpp	/^bool IsResizeBilinearSupported(Compute compute,$/;"	f	namespace:armnn
IsResizeBilinearSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsResizeBilinearSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsResizeBilinearSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsResizeBilinearSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsResizeBilinearSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsResizeBilinearSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsSoftmaxSupported	./src/armnn/LayerSupport.cpp	/^bool IsSoftmaxSupported(Compute compute,$/;"	f	namespace:armnn
IsSoftmaxSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsSoftmaxSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsSoftmaxSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsSoftmaxSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsSoftmaxSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsSoftmaxSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsSplitterSupported	./src/armnn/LayerSupport.cpp	/^bool IsSplitterSupported(Compute compute,$/;"	f	namespace:armnn
IsSplitterSupportedCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsSplitterSupportedCl(const TensorInfo& input,$/;"	f	namespace:armnn
IsSplitterSupportedNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsSplitterSupportedNeon(const TensorInfo& input,$/;"	f	namespace:armnn
IsSplitterSupportedRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsSplitterSupportedRef(const TensorInfo& input,$/;"	f	namespace:armnn
IsSupported	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.cpp	/^bool ClAdditionFloat32Workload::IsSupported(const TensorInfo& input0,$/;"	f	class:armnn::ClAdditionFloat32Workload
IsSupportedForDataTypeCl	./src/armnn/backends/ClLayerSupport.cpp	/^bool IsSupportedForDataTypeCl(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsSupportedForDataTypeGeneric	./src/armnn/LayerSupportCommon.hpp	/^bool IsSupportedForDataTypeGeneric(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsSupportedForDataTypeNeon	./src/armnn/backends/NeonLayerSupport.cpp	/^bool IsSupportedForDataTypeNeon(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsSupportedForDataTypeRef	./src/armnn/backends/RefLayerSupport.cpp	/^bool IsSupportedForDataTypeRef(std::string* reasonIfUnsupported,$/;"	f	namespace:armnn
IsTensorInfoSet	./src/armnn/Layer.cpp	/^bool OutputSlot::IsTensorInfoSet() const$/;"	f	class:armnn::OutputSlot
IsTensorInfoSet	./src/armnn/backends/OutputHandler.hpp	/^    bool IsTensorInfoSet() const { return m_bTensorInfoSet; }$/;"	f	class:armnn::OutputHandler
IsWorkloadSupported	./src/armnn/backends/ClLayerSupport.cpp	/^inline bool IsWorkloadSupported(FuncType&& func, std::string* reasonIfUnsupported, Args&&... args)$/;"	f	namespace:armnn::__anon3
IsWorkloadSupported	./src/armnn/backends/NeonLayerSupport.cpp	/^inline bool IsWorkloadSupported(FuncType& func, std::string* reasonIfUnsupported, Args&&... args)$/;"	f	namespace:armnn
KernelDataType	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    typedef float KernelDataType;$/;"	t	class:armnn::ClDepthwiseConvolutionFloat32Workload
KernelDataType	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    typedef uint8_t KernelDataType;$/;"	t	class:armnn::ClDepthwiseConvolutionUint8Workload
L2	./include/armnn/Types.hpp	/^    L2      = 2$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm
L2Normalization	./src/armnn/InternalTypes.hpp	/^    L2Normalization,$/;"	m	class:armnn::LayerType
L2Normalization1dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Normalization1dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Normalization2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Normalization2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Normalization3dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Normalization3dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Normalization4dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Normalization4dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2NormalizationLayer	./src/armnn/layers/L2NormalizationLayer.cpp	/^L2NormalizationLayer::L2NormalizationLayer(const char* name)$/;"	f	class:armnn::L2NormalizationLayer
L2NormalizationLayer	./src/armnn/layers/L2NormalizationLayer.hpp	/^class L2NormalizationLayer : public Layer$/;"	c	namespace:armnn
L2NormalizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct L2NormalizationQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
L2Pooling2dSize3Stride1Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Pooling2dSize3Stride1Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize3Stride1TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> L2Pooling2dSize3Stride1TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
L2Pooling2dSize3Stride1Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> L2Pooling2dSize3Stride1Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize3Stride3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Pooling2dSize3Stride3Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize3Stride3TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> L2Pooling2dSize3Stride3TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
L2Pooling2dSize3Stride3Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> L2Pooling2dSize3Stride3Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize3Stride4Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Pooling2dSize3Stride4Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize3Stride4TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> L2Pooling2dSize3Stride4TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
L2Pooling2dSize3Stride4Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> L2Pooling2dSize3Stride4Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize7Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Pooling2dSize7Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize7TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> L2Pooling2dSize7TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
L2Pooling2dSize7Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> L2Pooling2dSize7Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize9Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> L2Pooling2dSize9Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
L2Pooling2dSize9TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> L2Pooling2dSize9TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
L2Pooling2dSize9Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> L2Pooling2dSize9Uint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
LOCAL_ADDITIONAL_DEPENDENCIES	./Android.mk	/^LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)\/Android.mk$/;"	m
LOCAL_ARM_MODE	./Android.mk	/^LOCAL_ARM_MODE := arm$/;"	m
LOCAL_CFLAGS	./Android.mk	/^LOCAL_CFLAGS := \\$/;"	m
LOCAL_C_INCLUDES	./Android.mk	/^LOCAL_C_INCLUDES :=  \\$/;"	m
LOCAL_C_INCLUDES	./Android.mk	/^LOCAL_C_INCLUDES := \\$/;"	m
LOCAL_EXPORT_C_INCLUDES	./Android.mk	/^LOCAL_EXPORT_C_INCLUDES := \\$/;"	m
LOCAL_MODULE	./Android.mk	/^LOCAL_MODULE := armnn-tests$/;"	m
LOCAL_MODULE	./Android.mk	/^LOCAL_MODULE := libarmnn$/;"	m
LOCAL_MODULE_TAGS	./Android.mk	/^LOCAL_MODULE_TAGS := eng optional$/;"	m
LOCAL_PATH	./Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PROPRIETARY_MODULE	./Android.mk	/^LOCAL_PROPRIETARY_MODULE := true$/;"	m
LOCAL_SHARED_LIBRARIES	./Android.mk	/^LOCAL_SHARED_LIBRARIES :=  \\$/;"	m
LOCAL_SHARED_LIBRARIES	./Android.mk	/^LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	./Android.mk	/^LOCAL_SRC_FILES :=  \\$/;"	m
LOCAL_SRC_FILES	./Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_STATIC_LIBRARIES	./Android.mk	/^LOCAL_STATIC_LIBRARIES := \\$/;"	m
LargeTensorsAveragePooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> LargeTensorsAveragePooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
LargeTensorsAveragePooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> LargeTensorsAveragePooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
LargeTensorsAveragePooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> LargeTensorsAveragePooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
LastLayer	./src/armnn/InternalTypes.hpp	/^    LastLayer,$/;"	m	class:armnn::LayerType
Layer	./src/armnn/Layer.cpp	/^Layer::Layer(unsigned int numInputSlots, unsigned int numOutputSlots, LayerType type, const char* name)$/;"	f	class:armnn::Layer
Layer	./src/armnn/Layer.hpp	/^class Layer : public IConnectableLayer$/;"	c	namespace:armnn
LayerInGraph	./src/armnn/Graph.hpp	/^    LayerInGraph(Graph& graph, Args&&... args)$/;"	f	class:armnn::final
LayerInGraph	./src/armnn/Graph.hpp	/^    LayerInGraph(Graph& graph, Iterator insertBefore, Args&&... args)$/;"	f	class:armnn::final
LayerInGraph	./src/armnn/Graph.hpp	/^    LayerInGraph(Graph& graph, Iterator, Args&&... args)$/;"	f	class:armnn::final
LayerInGraphBase	./src/armnn/Graph.hpp	/^    LayerInGraphBase(Graph& graph, Iterator insertBefore, Args&&... args)$/;"	f	class:armnn::Graph::LayerInGraphBase
LayerInGraphBase	./src/armnn/Graph.hpp	/^class Graph::LayerInGraphBase : public LayerT$/;"	c	class:armnn::Graph
LayerTestResult	./src/armnn/backends/test/LayerTests.hpp	/^    LayerTestResult(const armnn::TensorInfo& outputInfo)$/;"	f	struct:LayerTestResult
LayerTestResult	./src/armnn/backends/test/LayerTests.hpp	/^struct LayerTestResult$/;"	s
LayerType	./src/armnn/InternalTypes.hpp	/^enum class LayerType$/;"	c	namespace:armnn
LayerTypeMatchesTest	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool LayerTypeMatchesTest()$/;"	f	namespace:__anon16
LayerTypeMatchesTestImpl	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool LayerTypeMatchesTestImpl(Tag<Type>)$/;"	f	namespace:__anon16
LayerTypeMatchesTestImpl	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool LayerTypeMatchesTestImpl(Tag<armnn::LayerType::LastLayer>)$/;"	f	namespace:__anon16
LayerValidationException	./include/armnn/Exceptions.hpp	/^class LayerValidationException : public Exception$/;"	c	namespace:armnn
LayerWithParameters	./src/armnn/layers/LayerWithParameters.hpp	/^    LayerWithParameters(unsigned int numInputSlots,$/;"	f	class:armnn::LayerWithParameters
LayerWithParameters	./src/armnn/layers/LayerWithParameters.hpp	/^class LayerWithParameters : public Layer$/;"	c	namespace:armnn
LeakyReLu	./include/armnn/Types.hpp	/^    LeakyReLu   = 6,$/;"	m	class:armnn::Status::DataType::ActivationFunction
Lerp	./src/armnn/backends/RefWorkloads/ResizeBilinear.cpp	/^inline float Lerp(float a, float b, float w)$/;"	f	namespace:armnn::__anon9
Lerp	./tests/MobileNetDatabase.cpp	/^inline float Lerp(float a, float b, float w)$/;"	f	namespace:__anon33
Linear	./include/armnn/Types.hpp	/^    Linear      = 2,$/;"	m	class:armnn::Status::DataType::ActivationFunction
Load	./src/armnn/backends/ClContextControl.cpp	/^void ClTunedParameters::Load(const char* filename)$/;"	f	class:armnn::ClTunedParameters
LoadGraphDef	./src/armnnTfParser/TfParser.cpp	/^void TfParser::LoadGraphDef(const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
LoadNetParam	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::LoadNetParam(NetParameter& netParameter)$/;"	f	class:armnnCaffeParser::CaffeParser
LoadNetwork	./src/armnn/Runtime.cpp	/^Status Runtime::LoadNetwork(NetworkId& networkIdOut, IOptimizedNetworkPtr inNetwork)$/;"	f	class:armnn::Runtime
LoadNodeDef	./src/armnnTfParser/TfParser.cpp	/^void TfParser::LoadNodeDef(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
LoadOpenClRuntime	./src/armnn/backends/ClContextControl.cpp	/^void ClContextControl::LoadOpenClRuntime()$/;"	f	class:armnn::ClContextControl
LoadedNetwork	./src/armnn/LoadedNetwork.cpp	/^LoadedNetwork::LoadedNetwork(std::unique_ptr<OptimizedNetwork> net, bool useCpuRefAsFallback)$/;"	f	class:armnn::LoadedNetwork
LoadedNetwork	./src/armnn/LoadedNetwork.hpp	/^class LoadedNetwork$/;"	c	namespace:armnn
LocalBrightness	./include/armnn/Types.hpp	/^    LocalBrightness = 0, \/* Krichevsky 2012: Local Brightness Normalization *\/$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod
LocalContrast	./include/armnn/Types.hpp	/^    LocalContrast = 1  \/* Jarret 2009: Local Contrast Normalization       *\/$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod
LocalResponseNormalizationBaseFixture	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^    explicit LocalResponseNormalizationBaseFixture(float alpha, float beta, float bias)$/;"	f	struct:LocalResponseNormalizationBaseFixture
LocalResponseNormalizationBaseFixture	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^struct LocalResponseNormalizationBaseFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
LocalResponseNormalizationFixture	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^    explicit LocalResponseNormalizationFixture()$/;"	f	struct:LocalResponseNormalizationFixture
LocalResponseNormalizationFixture	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^struct LocalResponseNormalizationFixture : public LocalResponseNormalizationBaseFixture$/;"	s	file:
LocalResponseNormalizationFixtureSimple	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^    explicit LocalResponseNormalizationFixtureSimple()$/;"	f	struct:LocalResponseNormalizationFixtureSimple
LocalResponseNormalizationFixtureSimple	./src/armnnTfParser/test/LocalResponseNormalization.cpp	/^struct LocalResponseNormalizationFixtureSimple : public LocalResponseNormalizationBaseFixture$/;"	s	file:
LogSeverity	./include/armnn/Utils.hpp	/^enum class LogSeverity$/;"	c	namespace:armnn
MainImpl	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^int MainImpl(const char* modelPath, bool isModelBinary, armnn::Compute computeDevice,$/;"	f
MakeAndCheckWorkload	./src/armnn/test/CreateWorkload.hpp	/^std::unique_ptr<Workload> MakeAndCheckWorkload(Layer& layer, Graph& graph, const IWorkloadFactory& factory)$/;"	f	namespace:__anon20
MakeConv2dDesc	./src/armnn/backends/test/ArmComputeNeon.cpp	/^armnn::Convolution2dDescriptor MakeConv2dDesc(uint32_t strideX, uint32_t strideY,$/;"	f	namespace:__anon12
MakeDepthwiseConv2dDesc	./src/armnn/backends/test/ArmComputeNeon.cpp	/^armnn::DepthwiseConvolution2dDescriptor MakeDepthwiseConv2dDesc(uint32_t strideX, uint32_t strideY,$/;"	f	namespace:__anon13
MakeDummyTensorInfo	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^armnn::TensorInfo MakeDummyTensorInfo()$/;"	f	namespace:__anon16
MakeDummyWorkloadInfo	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^armnn::WorkloadInfo MakeDummyWorkloadInfo(unsigned int numInputs, unsigned int numOutputs)$/;"	f	namespace:__anon16
MakeInputTensors	./tests/InferenceModel.hpp	/^    armnn::InputTensors MakeInputTensors(const TContainer& inputTensorData)$/;"	f	class:InferenceModel
MakeInputTensors	./tests/InferenceModel.hpp	/^inline armnn::InputTensors MakeInputTensors(const std::pair<armnn::LayerBindingId, armnn::TensorInfo>& input,$/;"	f
MakeLoadedNetwork	./src/armnn/LoadedNetwork.cpp	/^std::unique_ptr<LoadedNetwork> LoadedNetwork::MakeLoadedNetwork(std::unique_ptr<OptimizedNetwork> net,$/;"	f	class:armnn::LoadedNetwork
MakeOutputTensors	./tests/InferenceModel.hpp	/^    armnn::OutputTensors MakeOutputTensors(TContainer& outputTensorData)$/;"	f	class:InferenceModel
MakeOutputTensors	./tests/InferenceModel.hpp	/^inline armnn::OutputTensors MakeOutputTensors(const std::pair<armnn::LayerBindingId, armnn::TensorInfo>& output,$/;"	f
MakeRandomTensor	./src/armnn/test/TensorHelpers.hpp	/^boost::multi_array<T, n> MakeRandomTensor(const armnn::TensorInfo& tensorInfo,$/;"	f
MakeTensor	./src/armnn/test/TensorHelpers.hpp	/^boost::multi_array<T, n> MakeTensor(const armnn::TensorInfo& tensorInfo)$/;"	f
MakeTensor	./src/armnn/test/TensorHelpers.hpp	/^boost::multi_array<T, n> MakeTensor(const armnn::TensorInfo& tensorInfo, const std::vector<T>& flat)$/;"	f
MakeTfOperation	./src/armnnTfParser/TfParser.cpp	/^struct MakeTfOperation$/;"	s	namespace:armnnTfParser	file:
MakeTfOperation	./src/armnnTfParser/TfParser.cpp	/^struct MakeTfOperation<ParsedConstTfOperation>$/;"	s	namespace:armnnTfParser	file:
MakeWorkload	./src/armnn/backends/MakeWorkloadHelper.hpp	/^std::unique_ptr<IWorkload> MakeWorkload(const QueueDescriptorType& descriptor, const WorkloadInfo& info, Args&&... args)$/;"	f	namespace:armnn::__anon4
MakeWorkload	./src/armnn/backends/RefWorkloadFactory.cpp	/^std::unique_ptr<IWorkload> RefWorkloadFactory::MakeWorkload(const QueueDescriptorType& descriptor,$/;"	f	class:armnn::RefWorkloadFactory
MakeWorkloadForType	./src/armnn/backends/MakeWorkloadHelper.hpp	/^struct MakeWorkloadForType$/;"	s	namespace:armnn::__anon4
MakeWorkloadForType	./src/armnn/backends/MakeWorkloadHelper.hpp	/^struct MakeWorkloadForType<NullWorkload>$/;"	s	namespace:armnn::__anon4
Marker	./src/armnn/Profiling.hpp	/^    struct Marker$/;"	s	class:armnn::Profiler
MatMulFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^    MatMulFixture()$/;"	f	struct:MatMulFixture
MatMulFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^struct MatMulFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MatMulUsedInTwoFcFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^    MatMulUsedInTwoFcFixture()$/;"	f	struct:MatMulUsedInTwoFcFixture
MatMulUsedInTwoFcFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^struct MatMulUsedInTwoFcFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MatMulUsedInTwoFcStaggeredFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^    MatMulUsedInTwoFcStaggeredFixture()$/;"	f	struct:MatMulUsedInTwoFcStaggeredFixture
MatMulUsedInTwoFcStaggeredFixture	./src/armnnTfParser/test/FullyConnected.cpp	/^struct MatMulUsedInTwoFcStaggeredFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Max	./include/armnn/Types.hpp	/^    Max     = 0,$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm
MaxNumOfTensorDimensions	./include/armnn/Types.hpp	/^constexpr unsigned int MaxNumOfTensorDimensions = 4U;$/;"	m	namespace:armnn
MaxPoolFixture	./src/armnnTfParser/test/Pooling.cpp	/^    MaxPoolFixture() : Pooling2dFixture("MaxPool") {}$/;"	f	struct:MaxPoolFixture
MaxPoolFixture	./src/armnnTfParser/test/Pooling.cpp	/^struct MaxPoolFixture : Pooling2dFixture$/;"	s	file:
MemCopy	./src/armnn/InternalTypes.hpp	/^    MemCopy,$/;"	m	class:armnn::LayerType
MemCopyLayer	./src/armnn/layers/MemCopyLayer.cpp	/^MemCopyLayer::MemCopyLayer(const char* name)$/;"	f	class:armnn::MemCopyLayer
MemCopyLayer	./src/armnn/layers/MemCopyLayer.hpp	/^class MemCopyLayer : public Layer$/;"	c	namespace:armnn
MemCopyQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct MemCopyQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
MemCopyTest	./src/armnn/backends/test/MemCopyTests.cpp	/^void MemCopyTest(armnn::IWorkloadFactory& srcWorkloadFactory, armnn::IWorkloadFactory& dstWorkloadFactory,$/;"	f
MemCopyTest	./src/armnn/backends/test/MemCopyTests.cpp	/^void MemCopyTest(bool withSubtensors)$/;"	f
Merger	./src/armnn/InternalTypes.hpp	/^    Merger,$/;"	m	class:armnn::LayerType
Merger	./src/armnn/backends/RefWorkloads/Merger.hpp	/^void Merger(const MergerQueueDescriptor& data)$/;"	f	namespace:armnn
MergerLayer	./src/armnn/layers/MergerLayer.cpp	/^MergerLayer::MergerLayer(const OriginsDescriptor& param, const char* name)$/;"	f	class:armnn::MergerLayer
MergerLayer	./src/armnn/layers/MergerLayer.hpp	/^class MergerLayer : public LayerWithParameters<OriginsDescriptor>$/;"	c	namespace:armnn
MergerQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct MergerQueueDescriptor : QueueDescriptorWithParameters<OriginsDescriptor>$/;"	s	namespace:armnn
MergerTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,3> MergerTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MergerUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 3> MergerUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MnistDatabase	./tests/MnistDatabase.cpp	/^MnistDatabase::MnistDatabase(const std::string& binaryFileDirectory, bool scaleValues)$/;"	f	class:MnistDatabase
MnistDatabase	./tests/MnistDatabase.hpp	/^class MnistDatabase$/;"	c
MobileNetDatabase	./tests/MobileNetDatabase.cpp	/^MobileNetDatabase::MobileNetDatabase(const std::string& binaryFileDirectory,$/;"	f	class:MobileNetDatabase
MobileNetDatabase	./tests/MobileNetDatabase.hpp	/^class MobileNetDatabase$/;"	c
Mode	./include/armnn/IRuntime.hpp	/^    enum class Mode$/;"	c	class:armnn::IClTunedParameters
Motorbike	./tests/YoloDatabase.cpp	/^    Motorbike,$/;"	m	class:__anon34::YoloVocClass	file:
MoveAllConnections	./src/armnn/Layer.cpp	/^void OutputSlot::MoveAllConnections(OutputSlot& destination)$/;"	f	class:armnn::OutputSlot
MovePermuteUpImpl	./src/armnn/optimizations/MovePermuteUp.hpp	/^class MovePermuteUpImpl$/;"	c	namespace:armnn::optimizations
MulFixture	./src/armnnCaffeParser/test/TestMul.cpp	/^    MulFixture()$/;"	f	struct:MulFixture
MulFixture	./src/armnnCaffeParser/test/TestMul.cpp	/^struct MulFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
MultiInputsOutputsFixture	./src/armnnCaffeParser/test/TestMultiInputsOutputs.cpp	/^    MultiInputsOutputsFixture()$/;"	f	struct:MultiInputsOutputsFixture
MultiInputsOutputsFixture	./src/armnnCaffeParser/test/TestMultiInputsOutputs.cpp	/^struct MultiInputsOutputsFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
MultiInputsOutputsFixture	./src/armnnTfParser/test/TestMultiInputsOutputs.cpp	/^    MultiInputsOutputsFixture()$/;"	f	struct:MultiInputsOutputsFixture
MultiInputsOutputsFixture	./src/armnnTfParser/test/TestMultiInputsOutputs.cpp	/^struct MultiInputsOutputsFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MultiOutFailFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^    MultiOutFailFixture()$/;"	f	struct:MultiOutFailFixture
MultiOutFailFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^struct MultiOutFailFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MultiOutInvalidFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^    MultiOutInvalidFixture()$/;"	f	struct:MultiOutInvalidFixture
MultiOutInvalidFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^struct MultiOutInvalidFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MultiOutMatchFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^    MultiOutMatchFixture()$/;"	f	struct:MultiOutMatchFixture
MultiOutMatchFixture	./src/armnnTfParser/test/MultiOutput.cpp	/^struct MultiOutMatchFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Multiplication	./src/armnn/InternalTypes.hpp	/^    Multiplication,$/;"	m	class:armnn::LayerType
Multiplication	./src/armnn/backends/RefWorkloads/Multiplication.cpp	/^void Multiplication(const TensorShape& inShape0,$/;"	f	namespace:armnn
MultiplicationBroadcast1DVectorTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> MultiplicationBroadcast1DVectorTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationBroadcast1DVectorUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> MultiplicationBroadcast1DVectorUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationBroadcast1ElementTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> MultiplicationBroadcast1ElementTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationBroadcast1ElementUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> MultiplicationBroadcast1ElementUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationBroadcastFixture	./src/armnnTfParser/test/Multiplication.cpp	/^    MultiplicationBroadcastFixture(const armnn::TensorShape& inputShape0, const armnn::TensorShape& inputShape1)$/;"	f	struct:MultiplicationBroadcastFixture
MultiplicationBroadcastFixture	./src/armnnTfParser/test/Multiplication.cpp	/^struct MultiplicationBroadcastFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MultiplicationBroadcastFixture1D4D	./src/armnnTfParser/test/Multiplication.cpp	/^    MultiplicationBroadcastFixture1D4D() : MultiplicationBroadcastFixture({ 1 }, { 1, 2, 2, 3 }) {}$/;"	f	struct:MultiplicationBroadcastFixture1D4D
MultiplicationBroadcastFixture1D4D	./src/armnnTfParser/test/Multiplication.cpp	/^struct MultiplicationBroadcastFixture1D4D : public MultiplicationBroadcastFixture$/;"	s	file:
MultiplicationBroadcastFixture4D1D	./src/armnnTfParser/test/Multiplication.cpp	/^    MultiplicationBroadcastFixture4D1D() : MultiplicationBroadcastFixture({ 1, 2, 2, 3 }, { 1 }) {}$/;"	f	struct:MultiplicationBroadcastFixture4D1D
MultiplicationBroadcastFixture4D1D	./src/armnnTfParser/test/Multiplication.cpp	/^struct MultiplicationBroadcastFixture4D1D : public MultiplicationBroadcastFixture$/;"	s	file:
MultiplicationFixture	./src/armnnTfParser/test/Multiplication.cpp	/^    MultiplicationFixture()$/;"	f	struct:MultiplicationFixture
MultiplicationFixture	./src/armnnTfParser/test/Multiplication.cpp	/^struct MultiplicationFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
MultiplicationLayer	./src/armnn/layers/MultiplicationLayer.cpp	/^MultiplicationLayer::MultiplicationLayer(const char* name)$/;"	f	class:armnn::MultiplicationLayer
MultiplicationLayer	./src/armnn/layers/MultiplicationLayer.hpp	/^class MultiplicationLayer : public Layer$/;"	c	namespace:armnn
MultiplicationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct MultiplicationQueueDescriptor : QueueDescriptor$/;"	s	namespace:armnn
MultiplicationTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> MultiplicationTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationTestHelper	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> MultiplicationTestHelper(armnn::IWorkloadFactory& workloadFactory,$/;"	f	namespace:__anon17
MultiplicationUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> MultiplicationUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
MultiplicationUint8TestHelper	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> MultiplicationUint8TestHelper(armnn::IWorkloadFactory& workloadFactory,$/;"	f	namespace:__anon19
NHWCToArmNN	./src/armnnTfParser/TfParser.cpp	/^const PermutationVector NHWCToArmNN = { 0, 2, 3, 1 };$/;"	m	namespace:armnnTfParser::__anon27	file:
NN_HEADER_PATH	./Android.mk	/^NN_HEADER_PATH := $(LOCAL_PATH)\/..\/..\/..\/..\/frameworks\/ml\/nn\/runtime\/include$/;"	m
NeedPermuteForConcat	./src/armnn/backends/test/LayerTests.cpp	/^bool NeedPermuteForConcat($/;"	f
Neon	./src/armnn/backends/ITensorHandle.hpp	/^        Neon$/;"	e	enum:armnn::ITensorHandle::Type
NeonActivationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.cpp	/^NeonActivationFloat32Workload::NeonActivationFloat32Workload(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonActivationFloat32Workload
NeonActivationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.hpp	/^class NeonActivationFloat32Workload : public Float32Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
NeonActivationUint8Workload	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.cpp	/^NeonActivationUint8Workload::NeonActivationUint8Workload(const ActivationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonActivationUint8Workload
NeonActivationUint8Workload	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.hpp	/^class NeonActivationUint8Workload : public Uint8Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
NeonAdditionFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.cpp	/^NeonAdditionFloat32Workload::NeonAdditionFloat32Workload(const AdditionQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonAdditionFloat32Workload
NeonAdditionFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.hpp	/^class NeonAdditionFloat32Workload : public Float32Workload<AdditionQueueDescriptor>$/;"	c	namespace:armnn
NeonBaseConstantWorkload	./src/armnn/backends/NeonWorkloads/NeonBaseConstantWorkload.hpp	/^    NeonBaseConstantWorkload(const ConstantQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::NeonBaseConstantWorkload
NeonBaseConstantWorkload	./src/armnn/backends/NeonWorkloads/NeonBaseConstantWorkload.hpp	/^class NeonBaseConstantWorkload : public TypedWorkload<ConstantQueueDescriptor, DataFormat>$/;"	c	namespace:armnn
NeonBaseMergerWorkload	./src/armnn/backends/NeonWorkloads/NeonBaseMergerWorkload.hpp	/^class NeonBaseMergerWorkload : public TypedWorkload<MergerQueueDescriptor, DataType>$/;"	c	namespace:armnn
NeonBaseSplitterWorkload	./src/armnn/backends/NeonWorkloads/NeonBaseSplitterWorkload.hpp	/^class NeonBaseSplitterWorkload : public TypedWorkload<SplitterQueueDescriptor, DataType>$/;"	c	namespace:armnn
NeonBatchNormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.cpp	/^NeonBatchNormalizationFloat32Workload::NeonBatchNormalizationFloat32Workload($/;"	f	class:armnn::NeonBatchNormalizationFloat32Workload
NeonBatchNormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^class NeonBatchNormalizationFloat32Workload : public Float32Workload<BatchNormalizationQueueDescriptor>$/;"	c	namespace:armnn
NeonConstantFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonConstantFloat32Workload.hpp	/^class NeonConstantFloat32Workload : public NeonBaseConstantWorkload<DataType::Float32>$/;"	c	namespace:armnn
NeonConstantUint8Workload	./src/armnn/backends/NeonWorkloads/NeonConstantUint8Workload.hpp	/^class NeonConstantUint8Workload : public NeonBaseConstantWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
NeonConvolution2dBaseWorkload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.cpp	/^NeonConvolution2dBaseWorkload<dataType>::NeonConvolution2dBaseWorkload(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonConvolution2dBaseWorkload
NeonConvolution2dBaseWorkload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^class NeonConvolution2dBaseWorkload : public TypedWorkload<Convolution2dQueueDescriptor, dataType>$/;"	c	namespace:armnn
NeonConvolution2dFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.cpp	/^NeonConvolution2dFloat32Workload::NeonConvolution2dFloat32Workload(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonConvolution2dFloat32Workload
NeonConvolution2dFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.hpp	/^class NeonConvolution2dFloat32Workload : public NeonConvolution2dBaseWorkload<DataType::Float32>$/;"	c	namespace:armnn
NeonConvolution2dUint8Workload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.cpp	/^NeonConvolution2dUint8Workload::NeonConvolution2dUint8Workload(const Convolution2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonConvolution2dUint8Workload
NeonConvolution2dUint8Workload	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.hpp	/^class NeonConvolution2dUint8Workload : public NeonConvolution2dBaseWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
NeonConvolution2dWorkloadValidate	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.cpp	/^arm_compute::Status NeonConvolution2dWorkloadValidate(const TensorInfo& input,$/;"	f	namespace:armnn
NeonCreateReshapeWorkloadTest	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^static void NeonCreateReshapeWorkloadTest(DataType dataType)$/;"	f	file:
NeonDepthwiseConvolutionFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.cpp	/^NeonDepthwiseConvolutionFloat32Workload::NeonDepthwiseConvolutionFloat32Workload($/;"	f	class:armnn::NeonDepthwiseConvolutionFloat32Workload
NeonDepthwiseConvolutionFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^class NeonDepthwiseConvolutionFloat32Workload : public Float32Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
NeonDepthwiseConvolutionUint8Workload	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.cpp	/^NeonDepthwiseConvolutionUint8Workload::NeonDepthwiseConvolutionUint8Workload($/;"	f	class:armnn::NeonDepthwiseConvolutionUint8Workload
NeonDepthwiseConvolutionUint8Workload	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^class NeonDepthwiseConvolutionUint8Workload : public Uint8Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
NeonFloorFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.cpp	/^NeonFloorFloat32Workload::NeonFloorFloat32Workload(const FloorQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonFloorFloat32Workload
NeonFloorFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.hpp	/^class NeonFloorFloat32Workload : public Float32Workload<FloorQueueDescriptor>$/;"	c	namespace:armnn
NeonFullyConnectedFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.cpp	/^NeonFullyConnectedFloat32Workload::NeonFullyConnectedFloat32Workload(const FullyConnectedQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonFullyConnectedFloat32Workload
NeonFullyConnectedFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^class NeonFullyConnectedFloat32Workload : public Float32Workload<FullyConnectedQueueDescriptor>$/;"	c	namespace:armnn
NeonL2NormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.cpp	/^NeonL2NormalizationFloat32Workload::NeonL2NormalizationFloat32Workload(const L2NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonL2NormalizationFloat32Workload
NeonL2NormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.hpp	/^class NeonL2NormalizationFloat32Workload : public Float32Workload<L2NormalizationQueueDescriptor>$/;"	c	namespace:armnn
NeonMergerFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonMergerFloat32Workload.hpp	/^class NeonMergerFloat32Workload : public NeonBaseMergerWorkload<DataType::Float32>$/;"	c	namespace:armnn
NeonMergerUint8Workload	./src/armnn/backends/NeonWorkloads/NeonMergerUint8Workload.hpp	/^class NeonMergerUint8Workload : public NeonBaseMergerWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
NeonMultiplicationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.cpp	/^NeonMultiplicationFloat32Workload::NeonMultiplicationFloat32Workload(const MultiplicationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonMultiplicationFloat32Workload
NeonMultiplicationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.hpp	/^class NeonMultiplicationFloat32Workload : public Float32Workload<MultiplicationQueueDescriptor>$/;"	c	namespace:armnn
NeonNormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.cpp	/^NeonNormalizationFloat32Workload::NeonNormalizationFloat32Workload(const NormalizationQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonNormalizationFloat32Workload
NeonNormalizationFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.hpp	/^class NeonNormalizationFloat32Workload : public Float32Workload<NormalizationQueueDescriptor>$/;"	c	namespace:armnn
NeonPermuteWorkload	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.cpp	/^NeonPermuteWorkload<DataType>::NeonPermuteWorkload(const PermuteQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonPermuteWorkload
NeonPermuteWorkload	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.hpp	/^class NeonPermuteWorkload : public TypedWorkload<PermuteQueueDescriptor, DataType>$/;"	c	namespace:armnn
NeonPermuteWorkloadValidate	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.cpp	/^arm_compute::Status NeonPermuteWorkloadValidate(const TensorInfo& input,$/;"	f	namespace:armnn
NeonPooling2dBaseWorkload	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.cpp	/^NeonPooling2dBaseWorkload<dataType>::NeonPooling2dBaseWorkload($/;"	f	class:armnn::NeonPooling2dBaseWorkload
NeonPooling2dBaseWorkload	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.hpp	/^class NeonPooling2dBaseWorkload : public TypedWorkload<Pooling2dQueueDescriptor, dataType>$/;"	c	namespace:armnn
NeonPooling2dFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.cpp	/^NeonPooling2dFloat32Workload::NeonPooling2dFloat32Workload(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonPooling2dFloat32Workload
NeonPooling2dFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.hpp	/^class NeonPooling2dFloat32Workload : public NeonPooling2dBaseWorkload<armnn::DataType::Float32>$/;"	c	namespace:armnn
NeonPooling2dUint8Workload	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.cpp	/^NeonPooling2dUint8Workload::NeonPooling2dUint8Workload(const Pooling2dQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonPooling2dUint8Workload
NeonPooling2dUint8Workload	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.hpp	/^class NeonPooling2dUint8Workload : public NeonPooling2dBaseWorkload<armnn::DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
NeonPooling2dWorkloadValidate	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.cpp	/^arm_compute::Status NeonPooling2dWorkloadValidate(const TensorInfo& input,$/;"	f	namespace:armnn
NeonReshapeFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.cpp	/^NeonReshapeFloat32Workload::NeonReshapeFloat32Workload(const ReshapeQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonReshapeFloat32Workload
NeonReshapeFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.hpp	/^class NeonReshapeFloat32Workload : public Float32Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
NeonReshapeUint8Workload	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.cpp	/^NeonReshapeUint8Workload::NeonReshapeUint8Workload(const ReshapeQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonReshapeUint8Workload
NeonReshapeUint8Workload	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.hpp	/^class NeonReshapeUint8Workload : public Uint8Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
NeonSoftmaxFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.cpp	/^NeonSoftmaxFloat32Workload::NeonSoftmaxFloat32Workload(const SoftmaxQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonSoftmaxFloat32Workload
NeonSoftmaxFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.hpp	/^class NeonSoftmaxFloat32Workload : public Float32Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
NeonSoftmaxUint8Workload	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.cpp	/^NeonSoftmaxUint8Workload::NeonSoftmaxUint8Workload(const SoftmaxQueueDescriptor& descriptor,$/;"	f	class:armnn::NeonSoftmaxUint8Workload
NeonSoftmaxUint8Workload	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.hpp	/^class NeonSoftmaxUint8Workload : public Uint8Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
NeonSplitterFloat32Workload	./src/armnn/backends/NeonWorkloads/NeonSplitterFloat32Workload.hpp	/^class NeonSplitterFloat32Workload : public NeonBaseSplitterWorkload<DataType::Float32>$/;"	c	namespace:armnn
NeonSplitterUint8Workload	./src/armnn/backends/NeonWorkloads/NeonSplitterUint8Workload.hpp	/^class NeonSplitterUint8Workload : public NeonBaseSplitterWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
NeonSubTensorHandle	./src/armnn/backends/NeonTensorHandle.hpp	/^    NeonSubTensorHandle(arm_compute::ITensor& parent,$/;"	f	class:armnn::NeonSubTensorHandle
NeonSubTensorHandle	./src/armnn/backends/NeonTensorHandle.hpp	/^class NeonSubTensorHandle : public INeonTensorHandle$/;"	c	namespace:armnn
NeonTensorHandle	./src/armnn/backends/NeonTensorHandle.hpp	/^    NeonTensorHandle(const TensorInfo& tensorInfo)$/;"	f	class:armnn::NeonTensorHandle
NeonTensorHandle	./src/armnn/backends/NeonTensorHandle.hpp	/^class NeonTensorHandle : public INeonTensorHandle$/;"	c	namespace:armnn
NeonWorkloadFactory	./src/armnn/backends/NeonWorkloadFactory.cpp	/^NeonWorkloadFactory::NeonWorkloadFactory()$/;"	f	class:armnn::NeonWorkloadFactory
NeonWorkloadFactory	./src/armnn/backends/NeonWorkloadFactory.hpp	/^class NeonWorkloadFactory : public IWorkloadFactory$/;"	c	namespace:armnn
Network	./src/armnn/Network.cpp	/^Network::Network()$/;"	f	class:armnn::Network
NextType	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^constexpr armnn::LayerType NextType(armnn::LayerType type)$/;"	f	namespace:__anon16
NoLeaks	./src/armnnUtils/LeakChecking.cpp	/^bool ScopedLeakChecker::NoLeaks()$/;"	f	class:ScopedLeakChecker
NodeContent	./src/armnnUtils/DotSerializer.cpp	/^NodeContent::NodeContent(std::ostream& stream)$/;"	f	class:armnn::NodeContent
NodeContent	./src/armnnUtils/DotSerializer.hpp	/^class NodeContent : public DotBase$/;"	c	namespace:armnn
NodeState	./src/armnnUtils/GraphTopologicalSort.hpp	/^enum class NodeState$/;"	c	namespace:armnnUtils::__anon29
Normalization	./src/armnn/InternalTypes.hpp	/^    Normalization,$/;"	m	class:armnn::LayerType
NormalizationAlgorithmChannel	./include/armnn/Types.hpp	/^enum class NormalizationAlgorithmChannel$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod
NormalizationAlgorithmMethod	./include/armnn/Types.hpp	/^enum class NormalizationAlgorithmMethod$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel
NormalizationDescriptor	./include/armnn/Descriptors.hpp	/^    NormalizationDescriptor()$/;"	f	struct:armnn::NormalizationDescriptor
NormalizationDescriptor	./include/armnn/Descriptors.hpp	/^struct NormalizationDescriptor$/;"	s	namespace:armnn
NormalizationLayer	./src/armnn/layers/NormalizationLayer.cpp	/^NormalizationLayer::NormalizationLayer(const NormalizationDescriptor& param, const char* name)$/;"	f	class:armnn::NormalizationLayer
NormalizationLayer	./src/armnn/layers/NormalizationLayer.hpp	/^class NormalizationLayer : public LayerWithParameters<NormalizationDescriptor>$/;"	c	namespace:armnn
NormalizationQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct NormalizationQueueDescriptor : QueueDescriptorWithParameters<NormalizationDescriptor>$/;"	s	namespace:armnn
NormalizeAcrossUingLbr	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.cpp	/^void NormalizeAcrossUingLbr(const float*       inputData,$/;"	f	namespace:armnn
NormalizeWithinUingLbr	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.cpp	/^static void NormalizeWithinUingLbr(const float*       inputData,$/;"	f	namespace:armnn
NullWorkload	./src/armnn/backends/Workload.hpp	/^class NullWorkload : public IWorkload$/;"	c	namespace:armnn
OPENCL_HEADER_PATH	./Android.mk	/^OPENCL_HEADER_PATH := $(LOCAL_PATH)\/..\/clframework\/include$/;"	m
ObjectsLeaked	./src/armnnUtils/LeakChecking.cpp	/^ssize_t ScopedLeakChecker::ObjectsLeaked() const$/;"	f	class:ScopedLeakChecker
Ok	./tests/InferenceTest.hpp	/^    Ok,$/;"	m	class:armnn::test::TestCaseResult
OnInferenceTestFinished	./tests/InferenceTest.hpp	/^    virtual bool OnInferenceTestFinished() { return true; };$/;"	f	class:armnn::test::IInferenceTestCaseProvider
OnPaddingOnly	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^    bool OnPaddingOnly(int start, int end, int maxRange, int padding)$/;"	f	namespace:__anon8
Optimization	./src/armnn/optimizations/Optimization.hpp	/^class Optimization$/;"	c	namespace:armnn
Optimize	./src/armnn/Network.cpp	/^IOptimizedNetworkPtr Optimize(const INetwork& inNetwork, const DeviceSpec& deviceSpec)$/;"	f	namespace:armnn
Optimize	./src/armnn/Optimizer.cpp	/^void Optimizer::Optimize(Graph& graph)$/;"	f	class:armnn::Optimizer
OptimizeConsecutiveReshapesImpl	./src/armnn/optimizations/OptimizeConsecutiveReshapes.hpp	/^class OptimizeConsecutiveReshapesImpl$/;"	c	namespace:armnn::optimizations
OptimizeForConnectionImpl	./src/armnn/optimizations/Optimization.hpp	/^class OptimizeForConnectionImpl : public Wrapped$/;"	c	namespace:armnn
OptimizeForTypeImpl	./src/armnn/optimizations/Optimization.hpp	/^class OptimizeForTypeImpl : public armnn::Optimization, public Wrapped$/;"	c	namespace:armnn
OptimizeForTypeImpl	./src/armnn/optimizations/Optimization.hpp	/^class OptimizeForTypeImpl<Layer, Wrapped> : public armnn::Optimization, public Wrapped$/;"	c	namespace:armnn
OptimizeInversePermutesImpl	./src/armnn/optimizations/OptimizeInversePermutes.hpp	/^class OptimizeInversePermutesImpl$/;"	c	namespace:armnn::optimizations
OptimizedNetwork	./src/armnn/Network.cpp	/^OptimizedNetwork::OptimizedNetwork(std::unique_ptr<Graph> graph)$/;"	f	class:armnn::OptimizedNetwork
Optimizer	./src/armnn/Optimizer.cpp	/^Optimizer::Optimizer()$/;"	f	class:armnn::Optimizer
Optimizer	./src/armnn/Optimizer.hpp	/^class Optimizer$/;"	c	namespace:armnn
OriginsDescriptor	./include/armnn/Descriptors.hpp	/^struct OriginsDescriptor$/;"	s	namespace:armnn
OriginsDescriptor	./src/armnn/Descriptors.cpp	/^OriginsDescriptor::OriginsDescriptor()$/;"	f	class:armnn::OriginsDescriptor
OriginsDescriptor	./src/armnn/Descriptors.cpp	/^OriginsDescriptor::OriginsDescriptor(OriginsDescriptor&& other)$/;"	f	class:armnn::OriginsDescriptor
OriginsDescriptor	./src/armnn/Descriptors.cpp	/^OriginsDescriptor::OriginsDescriptor(const OriginsDescriptor& other)$/;"	f	class:armnn::OriginsDescriptor
OriginsDescriptor	./src/armnn/Descriptors.cpp	/^OriginsDescriptor::OriginsDescriptor(uint32_t numViews, uint32_t numDimensions \/*= 4*\/)$/;"	f	class:armnn::OriginsDescriptor
Output	./src/armnn/InternalTypes.hpp	/^    Output,$/;"	m	class:armnn::LayerType
OutputHandler	./src/armnn/backends/OutputHandler.hpp	/^class OutputHandler$/;"	c	namespace:armnn
OutputLayer	./src/armnn/layers/OutputLayer.cpp	/^OutputLayer::OutputLayer(LayerBindingId id, const char* name)$/;"	f	class:armnn::OutputLayer
OutputLayer	./src/armnn/layers/OutputLayer.hpp	/^class OutputLayer : public BindableLayer$/;"	c	namespace:armnn
OutputLayersAccessor	./src/armnn/Graph.hpp	/^        explicit OutputLayersAccessor(const Graph& graph) : m_Graph(graph) {}$/;"	f	struct:armnn::Graph::OutputLayersAccessor
OutputLayersAccessor	./src/armnn/Graph.hpp	/^    struct OutputLayersAccessor$/;"	s	class:armnn::Graph
OutputShapeOfSqueeze	./src/armnnTfParser/TfParser.cpp	/^TensorInfo OutputShapeOfSqueeze(const tensorflow::NodeDef& nodeDef, TensorInfo inputTensorInfo)$/;"	f	namespace:armnnTfParser
OutputShapeRounding	./include/armnn/Types.hpp	/^enum class OutputShapeRounding$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod
OutputSlot	./src/armnn/Layer.hpp	/^    explicit OutputSlot(Layer& owner, OutputHandler& outputHandler)$/;"	f	class:armnn::final
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PaddingMethod	./include/armnn/Types.hpp	/^enum class PaddingMethod$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm
Params	./tests/InferenceModel.hpp	/^        Params()$/;"	f	struct:InferenceModel::Params
Params	./tests/InferenceModel.hpp	/^    struct Params$/;"	s	class:InferenceModel
Parse	./src/armnnTfParser/TfParser.cpp	/^    inline static std::unique_ptr<OperatorType<DataType>> Parse(TfParser* parser, const tensorflow::NodeDef& node,$/;"	f	struct:armnnTfParser::MakeTfOperation
Parse	./src/armnnTfParser/TfParser.cpp	/^    inline static std::unique_ptr<ParsedConstTfOperation<DataType>> Parse(TfParser* parser,$/;"	f	struct:armnnTfParser::MakeTfOperation
Parse	./src/armnnTfParser/TfParser.cpp	/^void ParseTfTensorValueList::Parse<float>(const tensorflow::TensorProto& tfTensor,$/;"	f	class:armnnTfParser::ParseTfTensorValueList
Parse	./src/armnnTfParser/TfParser.cpp	/^void ParseTfTensorValueList::Parse<int32_t>(const tensorflow::TensorProto& tfTensor,$/;"	f	class:armnnTfParser::ParseTfTensorValueList
ParseAdd	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseAdd(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseArray	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^std::vector<float> ParseArray(std::istream& stream)$/;"	f
ParseArray	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^std::vector<unsigned int> ParseArray(std::istream& stream)$/;"	f
ParseArrayImpl	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^std::vector<T> ParseArrayImpl(std::istream& stream, TParseElementFunc parseElementFunc)$/;"	f	namespace:__anon31
ParseAvgPool	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseAvgPool(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseBatchNormLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseBatchNormLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseBiasAdd	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseBiasAdd(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseCommandLine	./tests/InferenceTest.cpp	/^bool ParseCommandLine(int argc, char** argv, IInferenceTestCaseProvider& testCaseProvider,$/;"	f	namespace:armnn::test
ParseComputeDevice	./include/armnn/TypesUtils.hpp	/^constexpr Compute ParseComputeDevice(const char* str)$/;"	f	namespace:armnn
ParseConcat	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseConcat(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseConcatLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseConcatLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseConst	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseConst(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseConv2D	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseConv2D(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseConvLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseConvLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseDepthwiseConv2D	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseDepthwiseConv2D(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseDropoutLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseDropoutLayer(const caffe::LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseEltwiseLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseEltwiseLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseException	./include/armnn/Exceptions.hpp	/^class ParseException : public Exception$/;"	c	namespace:armnn
ParseFusedBatchNorm	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseFusedBatchNorm(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseIdentity	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseIdentity(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseInnerProductLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseInnerProductLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseInputLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseInputLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseLRNLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseLRNLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseLrn	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseLrn(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseMatMul	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseMatMul(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseMaxPool	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseMaxPool(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseMul	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseMul(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseOutputId	./src/armnnTfParser/TfParser.cpp	/^OutputId ParseOutputId(const std::string & name)$/;"	f	namespace:armnnTfParser::__anon27
ParsePlaceholder	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParsePlaceholder(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParsePooling2d	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParsePooling2d(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParsePoolingLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParsePoolingLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseRelu	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseRelu(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseRelu6	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseRelu6(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseReluLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseReluLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseReshape	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseReshape(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseResizeBilinear	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseResizeBilinear(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseScaleLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseScaleLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseShape	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseShape(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseSigmoid	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseSigmoid(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseSoftmax	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseSoftmax(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseSoftmaxLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseSoftmaxLayer(const LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseSoftplus	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseSoftplus(const tensorflow::NodeDef& nodeDef,$/;"	f	class:armnnTfParser::TfParser
ParseSplitLayer	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ParseSplitLayer(const caffe::LayerParameter& layerParam)$/;"	f	class:armnnCaffeParser::CaffeParser
ParseSqueeze	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseSqueeze(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseTanh	./src/armnnTfParser/TfParser.cpp	/^ParsedTfOperationPtr TfParser::ParseTanh(const tensorflow::NodeDef& nodeDef, const tensorflow::GraphDef& graphDef)$/;"	f	class:armnnTfParser::TfParser
ParseTfTensorValueList	./src/armnnTfParser/TfParser.cpp	/^struct ParseTfTensorValueList$/;"	s	namespace:armnnTfParser	file:
ParsedConstTfOperation	./src/armnnTfParser/TfParser.cpp	/^    ParsedConstTfOperation(TfParser* parser, const tensorflow::NodeDef& node,$/;"	f	class:armnnTfParser::ParsedConstTfOperation
ParsedConstTfOperation	./src/armnnTfParser/TfParser.cpp	/^class ParsedConstTfOperation : public DeferredSingleLayerParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
ParsedIdentityTfOperation	./src/armnnTfParser/TfParser.cpp	/^    ParsedIdentityTfOperation(TfParser* parser, const tensorflow::NodeDef& node, ParsedTfOperation* representative)$/;"	f	class:armnnTfParser::ParsedIdentityTfOperation
ParsedIdentityTfOperation	./src/armnnTfParser/TfParser.cpp	/^class ParsedIdentityTfOperation : public ParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
ParsedMatMulTfOperation	./src/armnnTfParser/TfParser.cpp	/^    ParsedMatMulTfOperation(TfParser* parser, const tensorflow::NodeDef& node)$/;"	f	class:armnnTfParser::ParsedMatMulTfOperation
ParsedMatMulTfOperation	./src/armnnTfParser/TfParser.cpp	/^class ParsedMatMulTfOperation : public DeferredSingleLayerParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
ParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^    ParsedTfOperation(TfParser* parser, const tensorflow::NodeDef& node)$/;"	f	class:armnnTfParser::ParsedTfOperation
ParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^class ParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
ParserPrototxtFixture	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    ParserPrototxtFixture()$/;"	f	struct:ParserPrototxtFixture
ParserPrototxtFixture	./src/armnnUtils/ParserPrototxtFixture.hpp	/^struct ParserPrototxtFixture$/;"	s
PassThruFixture	./src/armnnTfParser/test/PassThru.cpp	/^    PassThruFixture()$/;"	f	struct:PassThruFixture
PassThruFixture	./src/armnnTfParser/test/PassThru.cpp	/^struct PassThruFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
PassthroughCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^    PassthroughCpuTensorHandle(const TensorInfo& tensorInfo, void* mem)$/;"	f	class:armnn::PassthroughCpuTensorHandle
PassthroughCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^class PassthroughCpuTensorHandle : public CpuTensorHandle$/;"	c	namespace:armnn
PermutationVector	./include/armnn/Types.hpp	/^class PermutationVector$/;"	c	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
PermutationVector	./src/armnn/Descriptors.cpp	/^PermutationVector::PermutationVector(const ValueType *dimMappings, const SizeType numDimMappings)$/;"	f	class:armnn::PermutationVector
PermutationVector	./src/armnn/Descriptors.cpp	/^PermutationVector::PermutationVector(std::initializer_list<ValueType> dimMappings)$/;"	f	class:armnn::PermutationVector
Permute	./src/armnn/InternalTypes.hpp	/^    Permute,$/;"	m	class:armnn::LayerType
Permute	./src/armnnUtils/Permute.cpp	/^void Permute(const armnn::TensorShape& dstShape, const armnn::PermutationVector& mappings, const T* src, T* dst)$/;"	f	namespace:armnnUtils
PermuteAsReshapeImpl	./src/armnn/optimizations/PermuteAsReshape.hpp	/^class PermuteAsReshapeImpl$/;"	c	namespace:armnn::optimizations
PermuteDescriptor	./include/armnn/Descriptors.hpp	/^    PermuteDescriptor()$/;"	f	struct:armnn::PermuteDescriptor
PermuteDescriptor	./include/armnn/Descriptors.hpp	/^    PermuteDescriptor(const PermutationVector& dimMappings)$/;"	f	struct:armnn::PermuteDescriptor
PermuteDescriptor	./include/armnn/Descriptors.hpp	/^struct PermuteDescriptor$/;"	s	namespace:armnn
PermuteFloat32ValueSet1Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> PermuteFloat32ValueSet1Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteFloat32ValueSet1TestCommon	./src/armnn/backends/test/PermuteTestImpl.hpp	/^PermuteFloat32ValueSet1TestCommon(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteFloat32ValueSet2Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> PermuteFloat32ValueSet2Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteFloat32ValueSet2TestCommon	./src/armnn/backends/test/PermuteTestImpl.hpp	/^PermuteFloat32ValueSet2TestCommon(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteFloat32ValueSet3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> PermuteFloat32ValueSet3Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteFloat32ValueSet3TestCommon	./src/armnn/backends/test/PermuteTestImpl.hpp	/^PermuteFloat32ValueSet3TestCommon(armnn::IWorkloadFactory& workloadFactory)$/;"	f
PermuteInputsForConcat	./src/armnn/backends/test/LayerTests.cpp	/^void PermuteInputsForConcat($/;"	f
PermuteLayer	./src/armnn/layers/PermuteLayer.cpp	/^PermuteLayer::PermuteLayer(const PermuteDescriptor& param, const char* name)$/;"	f	class:armnn::PermuteLayer
PermuteLayer	./src/armnn/layers/PermuteLayer.hpp	/^class PermuteLayer : public LayerWithParameters<PermuteDescriptor>$/;"	c	namespace:armnn
PermuteLoop	./src/armnnUtils/Permute.cpp	/^    PermuteLoop(const armnn::TensorShape& dstShape, const armnn::PermutationVector& mappings)$/;"	f	class:__anon30::PermuteLoop
PermuteLoop	./src/armnnUtils/Permute.cpp	/^class PermuteLoop$/;"	c	namespace:__anon30	file:
PermuteOutputForConcat	./src/armnn/backends/test/LayerTests.cpp	/^void PermuteOutputForConcat($/;"	f
PermuteQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct PermuteQueueDescriptor : QueueDescriptorWithParameters<PermuteDescriptor>$/;"	s	namespace:armnn
PermuteTensorData	./src/armnn/backends/test/LayerTests.cpp	/^void PermuteTensorData($/;"	f
Permuted	./src/armnnUtils/Permute.cpp	/^armnn::TensorInfo Permuted(const armnn::TensorInfo& info, const armnn::PermutationVector& mappings)$/;"	f	namespace:armnnUtils
Permuted	./src/armnnUtils/Permute.cpp	/^armnn::TensorShape Permuted(const armnn::TensorShape& srcShape, const armnn::PermutationVector& mappings)$/;"	f	namespace:armnnUtils
Person	./tests/YoloDatabase.cpp	/^    Person,$/;"	m	class:__anon34::YoloVocClass	file:
Png	./tests/InferenceTestImage.hpp	/^        Png,$/;"	m	class:InferenceTestImage::WriteFormat
Pooling2d	./src/armnn/InternalTypes.hpp	/^    Pooling2d,$/;"	m	class:armnn::LayerType
Pooling2d	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^void Pooling2d(const float* in,$/;"	f	namespace:armnn
Pooling2dDescriptor	./include/armnn/Descriptors.hpp	/^    Pooling2dDescriptor()$/;"	f	struct:armnn::Pooling2dDescriptor
Pooling2dDescriptor	./include/armnn/Descriptors.hpp	/^struct Pooling2dDescriptor$/;"	s	namespace:armnn
Pooling2dFixture	./src/armnnTfParser/test/Pooling.cpp	/^    explicit Pooling2dFixture(const char* poolingtype)$/;"	f	struct:Pooling2dFixture
Pooling2dFixture	./src/armnnTfParser/test/Pooling.cpp	/^struct Pooling2dFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Pooling2dLayer	./src/armnn/layers/Pooling2dLayer.cpp	/^Pooling2dLayer::Pooling2dLayer(const Pooling2dDescriptor& param, const char* name)$/;"	f	class:armnn::Pooling2dLayer
Pooling2dLayer	./src/armnn/layers/SoftmaxLayer.hpp	/^class Pooling2dLayer : public LayerWithParameters<Pooling2dDescriptor>$/;"	c	namespace:armnn
Pooling2dQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct Pooling2dQueueDescriptor : QueueDescriptorWithParameters<Pooling2dDescriptor>$/;"	s	namespace:armnn
PoolingAlgorithm	./include/armnn/Types.hpp	/^enum class PoolingAlgorithm$/;"	c	class:armnn::Status::DataType::ActivationFunction
PositiveActivationFixture	./src/armnn/backends/test/ActivationFixture.hpp	/^    PositiveActivationFixture()$/;"	f	struct:PositiveActivationFixture
PositiveActivationFixture	./src/armnn/backends/test/ActivationFixture.hpp	/^struct PositiveActivationFixture : public ActivationFixture$/;"	s
PottedPlant	./tests/YoloDatabase.cpp	/^    PottedPlant,$/;"	m	class:__anon34::YoloVocClass	file:
PrepInfoAndDesc	./src/armnn/Layer.hpp	/^    WorkloadInfo PrepInfoAndDesc(QueueDescriptor& descriptor, const Graph& graph) const$/;"	f	class:armnn::Layer
PrepInfoAndDesc	./src/armnn/layers/LayerWithParameters.hpp	/^    WorkloadInfo PrepInfoAndDesc(QueueDescriptor& descriptor, const Graph& graph) const$/;"	f	class:armnn::LayerWithParameters
PrepareReshape	./src/armnnTfParser/TfParser.cpp	/^TensorInfo PrepareReshape(const TensorInfo& input, const std::vector<int32_t>& targetDims)$/;"	f	namespace:armnnTfParser::__anon27
Print	./src/armnn/Graph.cpp	/^Status Graph::Print() const$/;"	f	class:armnn::Graph
PrintArray	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^void PrintArray(const std::vector<float>& v)$/;"	f
PrintGraph	./src/armnn/Network.cpp	/^Status Network::PrintGraph()$/;"	f	class:armnn::Network
PrintGraph	./src/armnn/Network.cpp	/^Status OptimizedNetwork::PrintGraph()$/;"	f	class:armnn::OptimizedNetwork
ProcessCommandLineOptions	./tests/InferenceTest.hpp	/^    virtual bool ProcessCommandLineOptions() { return true; };$/;"	f	class:armnn::test::IInferenceTestCaseProvider
Profiler	./src/armnn/Profiling.cpp	/^Profiler::Profiler()$/;"	f	class:armnn::Profiler
Profiler	./src/armnn/Profiling.hpp	/^class Profiler$/;"	c	namespace:armnn
ProfilingEvent	./src/armnn/Profiling.hpp	/^    struct ProfilingEvent$/;"	s	class:armnn::Profiler
ProfilingEventStats	./src/armnn/Profiling.hpp	/^    struct ProfilingEventStats$/;"	s	class:armnn::Profiler
PtrCast	./src/armnn/Graph.hpp	/^    static CVLayerT* PtrCast(Layer* const layer)$/;"	f	class:armnn::Graph
Push	./src/armnn/backends/WorkloadDataCollector.hpp	/^    void Push(ITensorHandle* handle, const TensorInfo& info)$/;"	f	class:armnn::WorkloadDataCollector
PutData	./tests/MobileNetDatabase.cpp	/^inline void PutData(std::vector<float> & data,$/;"	f	namespace:__anon33
QuantisedAsymm8	./include/armnn/Types.hpp	/^    QuantisedAsymm8 = 1,$/;"	m	class:armnn::Status::DataType
Quantization	./include/armnn/Tensor.hpp	/^        Quantization() : m_Scale(0.f), m_Offset(0) {}$/;"	f	struct:armnn::TensorInfo::Quantization
Quantization	./include/armnn/Tensor.hpp	/^    struct Quantization$/;"	s	class:armnn::TensorInfo
Quantize	./include/armnn/TypesUtils.hpp	/^inline QuantizedType Quantize(float value, float scale, int32_t offset)$/;"	f	namespace:armnn
Quantize	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^inline void Quantize(uint8_t* quant, const float* dequant, const TensorInfo& info)$/;"	f	namespace:armnn
Quantize	./src/armnn/backends/test/QuantizeHelper.hpp	/^    static T Quantize(float value, float scale, int32_t offset)$/;"	f	struct:SelectiveQuantizer
QuantizedMultiplierSmallerThanOne	./src/armnn/backends/RefWorkloads/ConvImpl.cpp	/^QuantizedMultiplierSmallerThanOne::QuantizedMultiplierSmallerThanOne(float multiplier)$/;"	f	class:armnn::QuantizedMultiplierSmallerThanOne
QuantizedMultiplierSmallerThanOne	./src/armnn/backends/RefWorkloads/ConvImpl.hpp	/^struct QuantizedMultiplierSmallerThanOne$/;"	s	namespace:armnn
QuantizedVector	./src/armnn/backends/test/QuantizeHelper.hpp	/^std::vector<T> QuantizedVector(float qScale, int32_t qOffset, FloatIt first, FloatIt last)$/;"	f
QuantizedVector	./src/armnn/backends/test/QuantizeHelper.hpp	/^std::vector<T> QuantizedVector(float qScale, int32_t qOffset, const std::vector<float>& array)$/;"	f
QuantizedVector	./src/armnn/backends/test/QuantizeHelper.hpp	/^std::vector<T> QuantizedVector(float qScale, int32_t qOffset, std::initializer_list<float> array)$/;"	f
QueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct QueueDescriptor$/;"	s	namespace:armnn
QueueDescriptorWithParameters	./src/armnn/backends/WorkloadData.hpp	/^struct QueueDescriptorWithParameters : public QueueDescriptor$/;"	s	namespace:armnn
R	./tests/InferenceTestImage.hpp	/^    R,$/;"	m	class:ImageChannel
RM	./build_arm64/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ReLu	./include/armnn/Types.hpp	/^    ReLu        = 3,$/;"	m	class:armnn::Status::DataType::ActivationFunction
ReLu6Fixture	./src/armnnTfParser/test/Activations.cpp	/^    ReLu6Fixture() : ActivationFixture("Relu6") {}$/;"	f	struct:ReLu6Fixture
ReLu6Fixture	./src/armnnTfParser/test/Activations.cpp	/^struct ReLu6Fixture : ActivationFixture$/;"	s	file:
ReLuFixture	./src/armnnTfParser/test/Activations.cpp	/^    ReLuFixture() : ActivationFixture("Relu") {}$/;"	f	struct:ReLuFixture
ReLuFixture	./src/armnnTfParser/test/Activations.cpp	/^struct ReLuFixture : ActivationFixture$/;"	s	file:
ReadData	./src/armnnTfParser/TfParser.cpp	/^    static void ReadData(const void* srcData, unsigned int numSrcElements,$/;"	f	struct:armnnTfParser::ParseTfTensorValueList
ReadMandatoryNodeAttributeImpl	./src/armnnTfParser/TfParser.cpp	/^void ReadMandatoryNodeAttributeImpl(const tensorflow::NodeDef& nodeDef,$/;"	f	namespace:armnnTfParser::__anon27
ReadMandatoryNodeFloatAttribute	./src/armnnTfParser/TfParser.cpp	/^float ReadMandatoryNodeFloatAttribute(const tensorflow::NodeDef& nodeDef, const std::string& name)$/;"	f	namespace:armnnTfParser::__anon27
ReadMandatoryNodeStringAttribute	./src/armnnTfParser/TfParser.cpp	/^std::string ReadMandatoryNodeStringAttribute(const tensorflow::NodeDef& nodeDef, const std::string& name)$/;"	f	namespace:armnnTfParser::__anon27
ReadMandatoryNodeTypeAttribute	./src/armnnTfParser/TfParser.cpp	/^tensorflow::DataType ReadMandatoryNodeTypeAttribute(const tensorflow::NodeDef& nodeDef, const std::string& name)$/;"	f	namespace:armnnTfParser::__anon27
ReadMandatoryNodeUint32Attribute	./src/armnnTfParser/TfParser.cpp	/^uint32_t ReadMandatoryNodeUint32Attribute(const tensorflow::NodeDef& nodeDef, const std::string& name)$/;"	f	namespace:armnnTfParser::__anon27
ReadMandatoryNodeUint32ListAttribute	./src/armnnTfParser/TfParser.cpp	/^std::vector<uint32_t> ReadMandatoryNodeUint32ListAttribute(const tensorflow::NodeDef& nodeDef,$/;"	f	namespace:armnnTfParser::__anon27
ReadOptionalNodeAttributeImpl	./src/armnnTfParser/TfParser.cpp	/^void ReadOptionalNodeAttributeImpl(const tensorflow::NodeDef& nodeDef,$/;"	f	namespace:armnnTfParser::__anon27
ReadOptionalNodeBoolAttribute	./src/armnnTfParser/TfParser.cpp	/^bool ReadOptionalNodeBoolAttribute(const tensorflow::NodeDef& nodeDef,$/;"	f	namespace:armnnTfParser::__anon27
ReadOptionalNodeUint32ListAttribute	./src/armnnTfParser/TfParser.cpp	/^std::vector<uint32_t> ReadOptionalNodeUint32ListAttribute(const tensorflow::NodeDef& nodeDef,$/;"	f	namespace:armnnTfParser::__anon27
RediscoveredDependenciesFixture	./src/armnnTfParser/test/TestDependencies.cpp	/^    RediscoveredDependenciesFixture()$/;"	f	struct:RediscoveredDependenciesFixture
RediscoveredDependenciesFixture	./src/armnnTfParser/test/TestDependencies.cpp	/^struct RediscoveredDependenciesFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
RefActivationFloat32Workload	./src/armnn/backends/RefWorkloads/RefActivationFloat32Workload.hpp	/^class RefActivationFloat32Workload : public Float32Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
RefActivationUint8Workload	./src/armnn/backends/RefWorkloads/RefActivationUint8Workload.hpp	/^class RefActivationUint8Workload : public Uint8Workload<ActivationQueueDescriptor>$/;"	c	namespace:armnn
RefAdditionFloat32Workload	./src/armnn/backends/RefWorkloads/RefAdditionFloat32Workload.hpp	/^class RefAdditionFloat32Workload : public Float32Workload<AdditionQueueDescriptor>$/;"	c	namespace:armnn
RefAdditionUint8Workload	./src/armnn/backends/RefWorkloads/RefAdditionUint8Workload.hpp	/^class RefAdditionUint8Workload : public Uint8Workload<AdditionQueueDescriptor>$/;"	c	namespace:armnn
RefBaseConstantWorkload	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.hpp	/^    RefBaseConstantWorkload(const ConstantQueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::RefBaseConstantWorkload
RefBaseConstantWorkload	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.hpp	/^class RefBaseConstantWorkload : public TypedWorkload<ConstantQueueDescriptor, DataType>$/;"	c	namespace:armnn
RefBatchNormalizationFloat32Workload	./src/armnn/backends/RefWorkloads/RefBatchNormalizationFloat32Workload.hpp	/^class RefBatchNormalizationFloat32Workload : public Float32Workload<BatchNormalizationQueueDescriptor>$/;"	c	namespace:armnn
RefBatchNormalizationUint8Workload	./src/armnn/backends/RefWorkloads/RefBatchNormalizationUint8Workload.hpp	/^class RefBatchNormalizationUint8Workload : public Uint8Workload<BatchNormalizationQueueDescriptor>$/;"	c	namespace:armnn
RefConstantFloat32Workload	./src/armnn/backends/RefWorkloads/RefConstantFloat32Workload.hpp	/^class RefConstantFloat32Workload : public RefBaseConstantWorkload<DataType::Float32>$/;"	c	namespace:armnn
RefConstantUint8Workload	./src/armnn/backends/RefWorkloads/RefConstantUint8Workload.hpp	/^class RefConstantUint8Workload : public RefBaseConstantWorkload<DataType::QuantisedAsymm8>$/;"	c	namespace:armnn
RefConvolution2dFloat32Workload	./src/armnn/backends/RefWorkloads/RefConvolution2dFloat32Workload.hpp	/^class RefConvolution2dFloat32Workload : public Float32Workload<Convolution2dQueueDescriptor>$/;"	c	namespace:armnn
RefConvolution2dUint8Workload	./src/armnn/backends/RefWorkloads/RefConvolution2dUint8Workload.hpp	/^class RefConvolution2dUint8Workload : public Uint8Workload<Convolution2dQueueDescriptor>$/;"	c	namespace:armnn
RefCreateActivationWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateActivationWorkloadTest()$/;"	f	file:
RefCreateAdditionWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateAdditionWorkloadTest()$/;"	f	file:
RefCreateFullyConnectedWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateFullyConnectedWorkloadTest()$/;"	f	file:
RefCreateMultiplicationWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateMultiplicationWorkloadTest()$/;"	f	file:
RefCreatePooling2dWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreatePooling2dWorkloadTest()$/;"	f	file:
RefCreateReshapeWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateReshapeWorkloadTest()$/;"	f	file:
RefCreateResizeBilinearTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateResizeBilinearTest()$/;"	f	file:
RefCreateSingleOutputMultipleInputsTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateSingleOutputMultipleInputsTest()$/;"	f	file:
RefCreateSoftmaxWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateSoftmaxWorkloadTest()$/;"	f	file:
RefCreateSplitterMergerWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateSplitterMergerWorkloadTest()$/;"	f	file:
RefCreateSplitterWorkloadTest	./src/armnn/backends/test/CreateWorkloadRef.cpp	/^static void RefCreateSplitterWorkloadTest()$/;"	f	file:
RefDepthwiseConvolution2dFloat32Workload	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dFloat32Workload.hpp	/^class RefDepthwiseConvolution2dFloat32Workload : public Float32Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
RefDepthwiseConvolution2dUint8Workload	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dUint8Workload.hpp	/^class RefDepthwiseConvolution2dUint8Workload : public Uint8Workload<DepthwiseConvolution2dQueueDescriptor>$/;"	c	namespace:armnn
RefFakeQuantizationFloat32Workload	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.hpp	/^class RefFakeQuantizationFloat32Workload : public Float32Workload<FakeQuantizationQueueDescriptor>$/;"	c	namespace:armnn
RefFloorFloat32Workload	./src/armnn/backends/RefWorkloads/RefFloorFloat32Workload.hpp	/^class RefFloorFloat32Workload : public Float32Workload<FloorQueueDescriptor>$/;"	c	namespace:armnn
RefFullyConnectedFloat32Workload	./src/armnn/backends/RefWorkloads/RefFullyConnectedFloat32Workload.hpp	/^class RefFullyConnectedFloat32Workload : public Float32Workload<FullyConnectedQueueDescriptor>$/;"	c	namespace:armnn
RefFullyConnectedUint8Workload	./src/armnn/backends/RefWorkloads/RefFullyConnectedUint8Workload.hpp	/^class RefFullyConnectedUint8Workload : public Uint8Workload<FullyConnectedQueueDescriptor>$/;"	c	namespace:armnn
RefL2NormalizationFloat32Workload	./src/armnn/backends/RefWorkloads/RefL2NormalizationFloat32Workload.hpp	/^class RefL2NormalizationFloat32Workload : public Float32Workload<L2NormalizationQueueDescriptor>$/;"	c	namespace:armnn
RefMergerFloat32Workload	./src/armnn/backends/RefWorkloads/RefMergerFloat32Workload.hpp	/^class RefMergerFloat32Workload : public Float32Workload<MergerQueueDescriptor>$/;"	c	namespace:armnn
RefMergerUint8Workload	./src/armnn/backends/RefWorkloads/RefMergerUint8Workload.hpp	/^class RefMergerUint8Workload : public Uint8Workload<MergerQueueDescriptor>$/;"	c	namespace:armnn
RefMultiplicationFloat32Workload	./src/armnn/backends/RefWorkloads/RefMultiplicationFloat32Workload.hpp	/^class RefMultiplicationFloat32Workload : public Float32Workload<MultiplicationQueueDescriptor>$/;"	c	namespace:armnn
RefMultiplicationUint8Workload	./src/armnn/backends/RefWorkloads/RefMultiplicationUint8Workload.hpp	/^class RefMultiplicationUint8Workload : public Uint8Workload<MultiplicationQueueDescriptor>$/;"	c	namespace:armnn
RefNormalizationFloat32Workload	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.hpp	/^class RefNormalizationFloat32Workload : public Float32Workload<NormalizationQueueDescriptor>$/;"	c	namespace:armnn
RefPermuteWorkload	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.hpp	/^class RefPermuteWorkload : public TypedWorkload<PermuteQueueDescriptor, DataType>$/;"	c	namespace:armnn
RefPooling2dFloat32Workload	./src/armnn/backends/RefWorkloads/RefPooling2dFloat32Workload.hpp	/^class RefPooling2dFloat32Workload : public Float32Workload<Pooling2dQueueDescriptor>$/;"	c	namespace:armnn
RefPooling2dUint8Workload	./src/armnn/backends/RefWorkloads/RefPooling2dUint8Workload.hpp	/^class RefPooling2dUint8Workload : public Uint8Workload<Pooling2dQueueDescriptor>$/;"	c	namespace:armnn
RefReshapeFloat32Workload	./src/armnn/backends/RefWorkloads/RefReshapeFloat32Workload.hpp	/^class RefReshapeFloat32Workload : public Float32Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
RefReshapeUint8Workload	./src/armnn/backends/RefWorkloads/RefReshapeUint8Workload.hpp	/^class RefReshapeUint8Workload : public Uint8Workload<ReshapeQueueDescriptor>$/;"	c	namespace:armnn
RefResizeBilinearFloat32Workload	./src/armnn/backends/RefWorkloads/RefResizeBilinearFloat32Workload.hpp	/^class RefResizeBilinearFloat32Workload : public Float32Workload<ResizeBilinearQueueDescriptor>$/;"	c	namespace:armnn
RefResizeBilinearUint8Workload	./src/armnn/backends/RefWorkloads/RefResizeBilinearUint8Workload.hpp	/^class RefResizeBilinearUint8Workload : public Uint8Workload<ResizeBilinearQueueDescriptor>$/;"	c	namespace:armnn
RefSoftmaxFloat32Workload	./src/armnn/backends/RefWorkloads/RefSoftmaxFloat32Workload.hpp	/^class RefSoftmaxFloat32Workload : public Float32Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
RefSoftmaxUint8Workload	./src/armnn/backends/RefWorkloads/RefSoftmaxUint8Workload.hpp	/^class RefSoftmaxUint8Workload : public Uint8Workload<SoftmaxQueueDescriptor>$/;"	c	namespace:armnn
RefSplitterFloat32Workload	./src/armnn/backends/RefWorkloads/RefSplitterFloat32Workload.hpp	/^class RefSplitterFloat32Workload : public Float32Workload<SplitterQueueDescriptor>$/;"	c	namespace:armnn
RefSplitterUint8Workload	./src/armnn/backends/RefWorkloads/RefSplitterUint8Workload.hpp	/^class RefSplitterUint8Workload : public Uint8Workload<SplitterQueueDescriptor>$/;"	c	namespace:armnn
RefWorkloadFactory	./src/armnn/backends/RefWorkloadFactory.cpp	/^RefWorkloadFactory::RefWorkloadFactory(bool operationWorkloadsAllowed)$/;"	f	class:armnn::RefWorkloadFactory
RefWorkloadFactory	./src/armnn/backends/RefWorkloadFactory.hpp	/^class RefWorkloadFactory : public IWorkloadFactory$/;"	c	namespace:armnn
ReorderOrigins	./src/armnn/Descriptors.cpp	/^void OriginsDescriptor::ReorderOrigins(unsigned int*  newOrdering, unsigned int numNewOrdering)$/;"	f	class:armnn::OriginsDescriptor
ResetPriority	./src/armnn/Layer.cpp	/^void Layer::ResetPriority() const$/;"	f	class:armnn::Layer
Reshape	./src/armnn/InternalTypes.hpp	/^    Reshape,$/;"	m	class:armnn::LayerType
ReshapeDescriptor	./include/armnn/Descriptors.hpp	/^struct ReshapeDescriptor$/;"	s	namespace:armnn
ReshapeFixture	./src/armnnTfParser/test/Reshape.cpp	/^    ReshapeFixture()$/;"	f	struct:ReshapeFixture
ReshapeFixture	./src/armnnTfParser/test/Reshape.cpp	/^struct ReshapeFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ReshapeLayer	./src/armnn/layers/ReshapeLayer.cpp	/^ReshapeLayer::ReshapeLayer(const ReshapeDescriptor& param, const char* name)$/;"	f	class:armnn::ReshapeLayer
ReshapeLayer	./src/armnn/layers/ReshapeLayer.hpp	/^class ReshapeLayer : public LayerWithParameters<ReshapeDescriptor>$/;"	c	namespace:armnn
ReshapeQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct ReshapeQueueDescriptor : QueueDescriptorWithParameters<ReshapeDescriptor>$/;"	s	namespace:armnn
Resize	./tests/InferenceTestImage.cpp	/^void InferenceTestImage::Resize(unsigned int newWidth, unsigned int newHeight)$/;"	f	class:InferenceTestImage
ResizeBilinear	./src/armnn/InternalTypes.hpp	/^    ResizeBilinear,$/;"	m	class:armnn::LayerType
ResizeBilinear	./src/armnn/backends/RefWorkloads/ResizeBilinear.cpp	/^void ResizeBilinear(const float* in, const TensorInfo& inputInfo, float* out, const TensorInfo& outputInfo)$/;"	f	namespace:armnn
ResizeBilinearAndNormalize	./tests/MobileNetDatabase.cpp	/^ResizeBilinearAndNormalize(const InferenceTestImage & image,$/;"	f	namespace:__anon33
ResizeBilinearDescriptor	./include/armnn/Descriptors.hpp	/^    ResizeBilinearDescriptor()$/;"	f	struct:armnn::ResizeBilinearDescriptor
ResizeBilinearDescriptor	./include/armnn/Descriptors.hpp	/^struct ResizeBilinearDescriptor$/;"	s	namespace:armnn
ResizeBilinearFixture	./src/armnnTfParser/test/ResizeBilinear.cpp	/^    ResizeBilinearFixture()$/;"	f	struct:ResizeBilinearFixture
ResizeBilinearFixture	./src/armnnTfParser/test/ResizeBilinear.cpp	/^struct ResizeBilinearFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
ResizeBilinearLayer	./src/armnn/layers/ResizeBilinearLayer.cpp	/^ResizeBilinearLayer::ResizeBilinearLayer(const ResizeBilinearDescriptor& param, const char* name)$/;"	f	class:armnn::ResizeBilinearLayer
ResizeBilinearLayer	./src/armnn/layers/ResizeBilinearLayer.hpp	/^class ResizeBilinearLayer : public LayerWithParameters<ResizeBilinearDescriptor>$/;"	c	namespace:armnn
ResizeBilinearMagTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ResizeBilinearMagTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearMagUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ResizeBilinearMagUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearMinTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ResizeBilinearMinTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearMinUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ResizeBilinearMinUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearNopTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ResizeBilinearNopTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearNopUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ResizeBilinearNopUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct ResizeBilinearQueueDescriptor : QueueDescriptorWithParameters<ResizeBilinearDescriptor>$/;"	s	namespace:armnn
ResizeBilinearSqMinTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> ResizeBilinearSqMinTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResizeBilinearSqMinUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> ResizeBilinearSqMinUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
ResolveIdentityNode	./src/armnnTfParser/TfParser.cpp	/^const tensorflow::NodeDef* TfParser::ResolveIdentityNode(const tensorflow::NodeDef* nodeDef)$/;"	f	class:armnnTfParser::TfParser
ResolveIdentityOperations	./src/armnnTfParser/TfParser.cpp	/^    virtual ParsedTfOperation* ResolveIdentityOperations()$/;"	f	class:armnnTfParser::ParsedTfOperation
ResolveInPlaceLayers	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::ResolveInPlaceLayers(caffe::NetParameter& netParameter)$/;"	f	class:armnnCaffeParser::CaffeParser
ResolveTypeImpl	./include/armnn/TypesUtils.hpp	/^struct ResolveTypeImpl<DataType::Float32>$/;"	s	namespace:armnn
ResolveTypeImpl	./include/armnn/TypesUtils.hpp	/^struct ResolveTypeImpl<DataType::QuantisedAsymm8>$/;"	s	namespace:armnn
Result	./src/armnnTfParser/TfParser.cpp	/^    inline static ResType Result(DataType dataType, Args&&... args)$/;"	f	struct:armnnTfParser::InvokeParseFunction
Result	./src/armnnTfParser/TfParser.cpp	/^    inline static void Result(DataType dataType, Args&&... args)$/;"	f	struct:armnnTfParser::InvokeParseFunction
RewindToBeginOfOutputs	./src/armnn/Graph.hpp	/^    Iterator RewindToBeginOfOutputs(Iterator it) const$/;"	f	class:armnn::Graph
Rgb	./tests/InferenceTestImage.hpp	/^    Rgb,$/;"	m	class:ImageChannelLayout
RoundingDivideByPOT	./src/armnn/backends/RefWorkloads/ConvImpl.cpp	/^int32_t QuantizedMultiplierSmallerThanOne::RoundingDivideByPOT(int32_t x, int exponent)$/;"	f	class:armnn::QuantizedMultiplierSmallerThanOne
Run	./src/armnn/optimizations/MovePermuteUp.hpp	/^    void Run(Graph& graph, InputSlot& connection) const$/;"	f	class:armnn::optimizations::MovePermuteUpImpl
Run	./src/armnn/optimizations/Optimization.hpp	/^    void Run(Graph& graph, BaseType& base) const$/;"	f	class:armnn::OptimizeForConnectionImpl
Run	./src/armnn/optimizations/OptimizeConsecutiveReshapes.hpp	/^    void Run(Graph& graph, InputSlot& connection) const$/;"	f	class:armnn::optimizations::OptimizeConsecutiveReshapesImpl
Run	./src/armnn/optimizations/OptimizeInversePermutes.hpp	/^    void Run(Graph& graph, InputSlot& connection) const$/;"	f	class:armnn::optimizations::OptimizeInversePermutesImpl
Run	./src/armnn/optimizations/PermuteAsReshape.hpp	/^    void Run(Graph& graph, PermuteLayer& permute) const$/;"	f	class:armnn::optimizations::PermuteAsReshapeImpl
Run	./src/armnn/optimizations/SquashEqualSiblings.hpp	/^    void Run(Graph& graph, InputSlot& connection) const$/;"	f	class:armnn::optimizations::SquashEqualSiblingsImpl
Run	./tests/InferenceModel.hpp	/^    void Run(const std::vector<TDataType>& input, std::vector<TDataType>& output)$/;"	f	class:InferenceModel
RunTest	./src/armnnUtils/ParserPrototxtFixture.hpp	/^void ParserPrototxtFixture<TParser>::RunTest(const std::map<std::string, std::vector<float>>& inputData,$/;"	f	class:ParserPrototxtFixture
RunTest	./src/armnnUtils/ParserPrototxtFixture.hpp	/^void ParserPrototxtFixture<TParser>::RunTest(const std::vector<float>& inputData,$/;"	f	class:ParserPrototxtFixture
RunTestFunction	./src/armnn/test/UnitTests.hpp	/^void RunTestFunction(const char* testName, TFuncPtr testFunction, Args... args)$/;"	f
Runtime	./src/armnn/Runtime.cpp	/^Runtime::Runtime(const CreationOptions& options)$/;"	f	class:armnn::Runtime
RuntimeLoadedNetworksReserve	./src/armnn/test/RuntimeTests.cpp	/^void RuntimeLoadedNetworksReserve(armnn::Runtime* runtime)$/;"	f	namespace:armnn
SHELL	./build_arm64/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
STB_IMAGE_IMPLEMENTATION	./tests/InferenceTestImage.cpp	14;"	d	file:
STB_IMAGE_RESIZE_IMPLEMENTATION	./tests/InferenceTestImage.cpp	17;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	./tests/InferenceTestImage.cpp	20;"	d	file:
STRINGIFY	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
SUFFIXES	./build_arm64/Makefile	/^SUFFIXES =$/;"	m
SaturatingRoundingDoublingHighMul	./src/armnn/backends/RefWorkloads/ConvImpl.cpp	/^int32_t QuantizedMultiplierSmallerThanOne::SaturatingRoundingDoublingHighMul(int32_t a, int32_t b)$/;"	f	class:armnn::QuantizedMultiplierSmallerThanOne
Save	./src/armnn/backends/ClContextControl.cpp	/^void ClTunedParameters::Save(const char* filename) const$/;"	f	class:armnn::ClTunedParameters
ScopedCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^ScopedCpuTensorHandle::ScopedCpuTensorHandle(const ConstTensor& tensor)$/;"	f	class:armnn::ScopedCpuTensorHandle
ScopedCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^ScopedCpuTensorHandle::ScopedCpuTensorHandle(const ScopedCpuTensorHandle& other)$/;"	f	class:armnn::ScopedCpuTensorHandle
ScopedCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^ScopedCpuTensorHandle::ScopedCpuTensorHandle(const TensorInfo& tensorInfo)$/;"	f	class:armnn::ScopedCpuTensorHandle
ScopedCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.hpp	/^class ScopedCpuTensorHandle : public CpuTensorHandle$/;"	c	namespace:armnn
ScopedDisableLeakChecking	./src/armnnUtils/LeakChecking.cpp	/^ScopedDisableLeakChecking::ScopedDisableLeakChecking()$/;"	f	class:ScopedDisableLeakChecking
ScopedHeapProfiler	./src/armnnUtils/HeapProfiling.cpp	/^ScopedHeapProfiler::ScopedHeapProfiler(const std::string & tag)$/;"	f	class:armnnUtils::ScopedHeapProfiler
ScopedLeakChecker	./src/armnnUtils/LeakChecking.cpp	/^ScopedLeakChecker::ScopedLeakChecker(const std::string & name)$/;"	f	class:ScopedLeakChecker
ScopedProfilingEvent	./src/armnn/Profiling.hpp	/^    ScopedProfilingEvent(Compute compute, const std::string name)$/;"	f	class:armnn::ScopedProfilingEvent
ScopedProfilingEvent	./src/armnn/Profiling.hpp	/^class ScopedProfilingEvent$/;"	c	namespace:armnn
SelectiveCompare	./src/armnn/test/TensorHelpers.hpp	/^bool SelectiveCompare(T a, T b)$/;"	f
SelectiveComparer	./src/armnn/test/TensorHelpers.hpp	/^struct SelectiveComparer$/;"	s
SelectiveComparer	./src/armnn/test/TensorHelpers.hpp	/^struct SelectiveComparer<T, false>$/;"	s
SelectiveDequantize	./src/armnn/backends/test/QuantizeHelper.hpp	/^float SelectiveDequantize(T value, float scale, int32_t offset)$/;"	f
SelectiveQuantize	./src/armnn/backends/test/QuantizeHelper.hpp	/^T SelectiveQuantize(float value, float scale, int32_t offset)$/;"	f
SelectiveQuantizer	./src/armnn/backends/test/QuantizeHelper.hpp	/^struct SelectiveQuantizer$/;"	s
SelectiveQuantizer	./src/armnn/backends/test/QuantizeHelper.hpp	/^struct SelectiveQuantizer<T, false>$/;"	s
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<ActivationDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<BatchNormalizationDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<Convolution2dDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<DepthwiseConvolution2dDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<FullyConnectedDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<OriginsDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<PermuteDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<Pooling2dDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<ReshapeDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.cpp	/^StringifyLayerParameters<SoftmaxDescriptor>::Serialize(ParameterStringifyFunction & fn,$/;"	f	class:armnn::StringifyLayerParameters
Serialize	./src/armnn/SerializeLayerParameters.hpp	/^    static void Serialize(ParameterStringifyFunction &, const LayerParameter &) {}$/;"	f	struct:armnn::StringifyLayerParameters
SerializeLayerParameters	./src/armnn/Layer.hpp	/^    virtual void SerializeLayerParameters(ParameterStringifyFunction &) const {}$/;"	f	class:armnn::Layer
SerializeLayerParameters	./src/armnn/layers/LayerWithParameters.hpp	/^    void SerializeLayerParameters(ParameterStringifyFunction & fn) const$/;"	f	class:armnn::LayerWithParameters
SerializeToDot	./src/armnn/Graph.cpp	/^Status Graph::SerializeToDot(std::ostream& stream)$/;"	f	class:armnn::Graph
SerializeToDot	./src/armnn/Network.cpp	/^Status OptimizedNetwork::SerializeToDot(std::ostream& stream) const$/;"	f	class:armnn::OptimizedNetwork
SetArmnnOutputSlotForCaffeTop	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::SetArmnnOutputSlotForCaffeTop(const std::string& caffeTopName, armnn::IOutputSlot& armnnOutputSlot)$/;"	f	class:armnnCaffeParser::CaffeParser
SetComputeDevice	./src/armnn/Layer.hpp	/^    void SetComputeDevice(Compute device) { m_ComputeDevice = device; }$/;"	f	class:armnn::Layer
SetConnection	./src/armnn/Layer.hpp	/^    void SetConnection(OutputSlot* source)$/;"	f	class:armnn::final
SetConstMemory	./src/armnn/backends/CpuTensorHandle.hpp	/^    void SetConstMemory(const void* mem) { m_Memory = mem; }$/;"	f	class:armnn::ConstCpuTensorHandle
SetData	./src/armnn/backends/OutputHandler.hpp	/^    void SetData(std::unique_ptr<ITensorHandle> data) { m_TensorHandle = std::move(data); }$/;"	f	class:armnn::OutputHandler
SetDataType	./include/armnn/Tensor.hpp	/^    void SetDataType(DataType type)                 { m_DataType = type; }$/;"	f	class:armnn::TensorInfo
SetGuid	./src/armnn/Layer.hpp	/^    void SetGuid(LayerGuid guid) { m_Guid = guid; }$/;"	f	class:armnn::Layer
SetMemory	./src/armnn/backends/CpuTensorHandle.hpp	/^    void SetMemory(void* mem)$/;"	f	class:armnn::CpuTensorHandle
SetName	./src/armnnUtils/DotSerializer.cpp	/^NodeContent & NodeContent::SetName(const std::string & name)$/;"	f	class:armnn::NodeContent
SetQuantizationOffset	./include/armnn/Tensor.hpp	/^    void SetQuantizationOffset(int32_t offset)      { m_Quantization.m_Offset = offset; }$/;"	f	class:armnn::TensorInfo
SetQuantizationScale	./include/armnn/Tensor.hpp	/^    void SetQuantizationScale(float scale)          { m_Quantization.m_Scale = scale; }$/;"	f	class:armnn::TensorInfo
SetShape	./include/armnn/Tensor.hpp	/^    void SetShape(const TensorShape& newShape)      { m_Shape = newShape; }$/;"	f	class:armnn::TensorInfo
SetTensorInfo	./src/armnn/Layer.cpp	/^void OutputSlot::SetTensorInfo(const TensorInfo& tensorInfo)$/;"	f	class:armnn::OutputSlot
SetTensorInfo	./src/armnn/backends/OutputHandler.cpp	/^void OutputHandler::SetTensorInfo(const TensorInfo& tensorInfo)$/;"	f	class:armnn::OutputHandler
SetViewOriginCoord	./src/armnn/Descriptors.cpp	/^Status OriginsDescriptor::SetViewOriginCoord(uint32_t view, uint32_t coord, uint32_t value)$/;"	f	class:armnn::OriginsDescriptor
SetViewOriginCoord	./src/armnn/Descriptors.cpp	/^Status ViewsDescriptor::SetViewOriginCoord(uint32_t view, uint32_t coord, uint32_t value)$/;"	f	class:armnn::ViewsDescriptor
SetViewSize	./src/armnn/Descriptors.cpp	/^Status ViewsDescriptor::SetViewSize(uint32_t view, uint32_t coord, uint32_t value)$/;"	f	class:armnn::ViewsDescriptor
SetWorkloadInput	./src/armnn/backends/test/WorkloadTestUtils.hpp	/^void SetWorkloadInput(QueueDescriptor& descriptor,$/;"	f
SetWorkloadOutput	./src/armnn/backends/test/WorkloadTestUtils.hpp	/^void SetWorkloadOutput(QueueDescriptor& descriptor,$/;"	f
Setup	./src/armnnUtils/ParserPrototxtFixture.hpp	/^void ParserPrototxtFixture<TParser>::Setup(const std::map<std::string, armnn::TensorShape>& inputShapes,$/;"	f	class:ParserPrototxtFixture
SetupDebugOutput	./src/armnn/test/UnitTests.cpp	/^    SetupDebugOutput()$/;"	f	class:SetupDebugOutput
SetupDebugOutput	./src/armnn/test/UnitTests.cpp	/^BOOST_GLOBAL_FIXTURE(SetupDebugOutput);$/;"	v
SetupDebugOutput	./src/armnn/test/UnitTests.cpp	/^class SetupDebugOutput$/;"	c	file:
SetupSingleInputSingleOutput	./src/armnnUtils/ParserPrototxtFixture.hpp	/^void ParserPrototxtFixture<TParser>::SetupSingleInputSingleOutput(const armnn::TensorShape& inputTensorShape,$/;"	f	class:ParserPrototxtFixture
SetupSingleInputSingleOutput	./src/armnnUtils/ParserPrototxtFixture.hpp	/^void ParserPrototxtFixture<TParser>::SetupSingleInputSingleOutput(const std::string& inputName,$/;"	f	class:ParserPrototxtFixture
ShapeFixture	./src/armnnTfParser/test/Shape.cpp	/^    ShapeFixture()$/;"	f	struct:ShapeFixture
ShapeFixture	./src/armnnTfParser/test/Shape.cpp	/^struct ShapeFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Sheep	./tests/YoloDatabase.cpp	/^    Sheep,$/;"	m	class:__anon34::YoloVocClass	file:
Sigmoid	./include/armnn/Types.hpp	/^    Sigmoid     = 0,$/;"	m	class:armnn::Status::DataType::ActivationFunction
SigmoidFixture	./src/armnnTfParser/test/Activations.cpp	/^    SigmoidFixture() : ActivationFixture("Sigmoid") {}$/;"	f	struct:SigmoidFixture
SigmoidFixture	./src/armnnTfParser/test/Activations.cpp	/^struct SigmoidFixture : ActivationFixture$/;"	s	file:
Signed32	./include/armnn/Types.hpp	/^    Signed32  = 2$/;"	m	class:armnn::Status::DataType
SimpleActivationTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<T, 4> SimpleActivationTest(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleAveragePooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleAveragePooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleAveragePooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> SimpleAveragePooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleAveragePooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleAveragePooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleConvolution2d3x3Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleConvolution2d3x3Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2d3x3TestCommon	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> SimpleConvolution2d3x3TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2d3x3Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleConvolution2d3x3Uint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2d3x5Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleConvolution2d3x5Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2d3x5TestCommon	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> SimpleConvolution2d3x5TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2d3x5Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleConvolution2d3x5Uint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2dAsymmetricPaddingTestCommon	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<T, 4> SimpleConvolution2dAsymmetricPaddingTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleConvolution2dTestImpl	./src/armnn/backends/test/Conv2dTestImpl.hpp	/^LayerTestResult<T, 4> SimpleConvolution2dTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleFloorTest	./src/armnn/backends/test/ReshapeTestImpl.hpp	/^LayerTestResult<float, 4> SimpleFloorTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleFullyConnectedTestImpl	./src/armnn/backends/test/FullyConnectedTestImpl.hpp	/^LayerTestResult<T, 2> SimpleFullyConnectedTestImpl($/;"	f
SimpleL2Pooling2dTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleL2Pooling2dTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleL2Pooling2dTestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> SimpleL2Pooling2dTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleL2Pooling2dUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleL2Pooling2dUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleMaxPooling2dSize2x2Stride2x2Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleMaxPooling2dSize2x2Stride2x2Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleMaxPooling2dSize2x2Stride2x2TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> SimpleMaxPooling2dSize2x2Stride2x2TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleMaxPooling2dSize2x2Stride2x2Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleMaxPooling2dSize2x2Stride2x2Uint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleMaxPooling2dSize3x3Stride2x4Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleMaxPooling2dSize3x3Stride2x4Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleMaxPooling2dSize3x3Stride2x4TestCommon	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> SimpleMaxPooling2dSize3x3Stride2x4TestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleMaxPooling2dSize3x3Stride2x4Uint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleMaxPooling2dSize3x3Stride2x4Uint8Test(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleNormalizationAcrossTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> SimpleNormalizationAcrossTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleNormalizationTestImpl	./src/armnn/backends/test/NormTestImpl.hpp	/^LayerTestResult<float,4> SimpleNormalizationTestImpl(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SimpleNormalizationWithinTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,4> SimpleNormalizationWithinTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimplePermuteFloat32Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimplePermuteFloat32Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimplePermuteFloat32TestCommon	./src/armnn/backends/test/PermuteTestImpl.hpp	/^LayerTestResult<float, 4> SimplePermuteFloat32TestCommon(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimplePermuteTestImpl	./src/armnn/backends/test/PermuteTestImpl.hpp	/^LayerTestResult<T, 4> SimplePermuteTestImpl($/;"	f
SimplePermuteUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimplePermuteUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimplePermuteUint8TestCommon	./src/armnn/backends/test/PermuteTestImpl.hpp	/^LayerTestResult<uint8_t, 4> SimplePermuteUint8TestCommon(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimplePooling2dTestImpl	./src/armnn/backends/test/Pooling2dTestImpl.hpp	/^LayerTestResult<T, 4> SimplePooling2dTestImpl($/;"	f
SimpleReshapeFloat32Test	./src/armnn/backends/test/ReshapeTestImpl.hpp	/^LayerTestResult<float, 4> SimpleReshapeFloat32Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleReshapeTestImpl	./src/armnn/backends/test/ReshapeTestImpl.hpp	/^LayerTestResult<T, 4> SimpleReshapeTestImpl($/;"	f
SimpleReshapeUint8Test	./src/armnn/backends/test/ReshapeTestImpl.hpp	/^LayerTestResult<uint8_t, 4> SimpleReshapeUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleResizeBilinearTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float, 4> SimpleResizeBilinearTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleResizeBilinearUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t, 4> SimpleResizeBilinearUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleSigmoidTest	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<float, 4> SimpleSigmoidTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleSigmoidTestCommon	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<T, 4> SimpleSigmoidTestCommon(armnn::IWorkloadFactory& workloadFactory, float qScale, int32_t qOffset)$/;"	f
SimpleSigmoidUint8Test	./src/armnn/backends/test/ActivationTestImpl.hpp	/^LayerTestResult<uint8_t, 4> SimpleSigmoidUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SimpleSoftmaxTest	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<float,2> SimpleSoftmaxTest(armnn::IWorkloadFactory& workloadFactory, float beta)$/;"	f
SimpleSoftmaxTestImpl	./src/armnn/backends/test/SoftmaxTestImpl.hpp	/^LayerTestResult<T, 2> SimpleSoftmaxTestImpl(armnn::IWorkloadFactory& workloadFactory, float beta)$/;"	f
SimpleSoftmaxUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^LayerTestResult<uint8_t,2> SimpleSoftmaxUint8Test(armnn::IWorkloadFactory& workloadFactory, float beta)$/;"	f
SingleLayerParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^    SingleLayerParsedTfOperation(TfParser* parser, const tensorflow::NodeDef& node, IConnectableLayer* layer)$/;"	f	class:armnnTfParser::SingleLayerParsedTfOperation
SingleLayerParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^class SingleLayerParsedTfOperation : public ParsedTfOperation$/;"	c	namespace:armnnTfParser	file:
SizeOfVectorData	./src/armnnCaffeParser/CaffeParser.cpp	/^size_t SizeOfVectorData(const vector<T>& vec)$/;"	f	namespace:armnnCaffeParser
Sofa	./tests/YoloDatabase.cpp	/^    Sofa,$/;"	m	class:__anon34::YoloVocClass	file:
SoftReLu	./include/armnn/Types.hpp	/^    SoftReLu    = 5,$/;"	m	class:armnn::Status::DataType::ActivationFunction
Softmax	./src/armnn/InternalTypes.hpp	/^    Softmax,$/;"	m	class:armnn::LayerType
Softmax	./src/armnn/backends/RefWorkloads/Softmax.cpp	/^void Softmax(const float* in, float* out, const TensorInfo& tensorInfo, float beta)$/;"	f	namespace:armnn
SoftmaxDescriptor	./include/armnn/Descriptors.hpp	/^    SoftmaxDescriptor() : m_Beta(1.0f) {};$/;"	f	struct:armnn::SoftmaxDescriptor
SoftmaxDescriptor	./include/armnn/Descriptors.hpp	/^struct SoftmaxDescriptor$/;"	s	namespace:armnn
SoftmaxFixture	./src/armnnTfParser/test/Softmax.cpp	/^    SoftmaxFixture()$/;"	f	struct:SoftmaxFixture
SoftmaxFixture	./src/armnnTfParser/test/Softmax.cpp	/^struct SoftmaxFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
SoftmaxLayer	./src/armnn/layers/Pooling2dLayer.hpp	/^class SoftmaxLayer : public LayerWithParameters<SoftmaxDescriptor>$/;"	c	namespace:armnn
SoftmaxLayer	./src/armnn/layers/SoftmaxLayer.cpp	/^SoftmaxLayer::SoftmaxLayer(const SoftmaxDescriptor &param, const char* name)$/;"	f	class:armnn::SoftmaxLayer
SoftmaxQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct SoftmaxQueueDescriptor : QueueDescriptorWithParameters<SoftmaxDescriptor>$/;"	s	namespace:armnn
SoftplusFixture	./src/armnnTfParser/test/Activations.cpp	/^    SoftplusFixture() : ActivationFixture("Softplus") {}$/;"	f	struct:SoftplusFixture
SoftplusFixture	./src/armnnTfParser/test/Activations.cpp	/^struct SoftplusFixture : ActivationFixture$/;"	s	file:
SplitFixture	./src/armnnCaffeParser/test/TestSplit.cpp	/^    SplitFixture()$/;"	f	struct:SplitFixture
SplitFixture	./src/armnnCaffeParser/test/TestSplit.cpp	/^struct SplitFixture : public ParserPrototxtFixture<armnnCaffeParser::ICaffeParser>$/;"	s	file:
Splitter	./src/armnn/InternalTypes.hpp	/^    Splitter = LastLayer,$/;"	m	class:armnn::LayerType
Splitter	./src/armnn/backends/RefWorkloads/Splitter.hpp	/^void Splitter(const SplitterQueueDescriptor& data)$/;"	f	namespace:armnn
SplitterLayer	./src/armnn/layers/SplitterLayer.cpp	/^SplitterLayer::SplitterLayer(const ViewsDescriptor& param, const char* name)$/;"	f	class:armnn::SplitterLayer
SplitterLayer	./src/armnn/layers/SplitterLayer.hpp	/^class SplitterLayer : public LayerWithParameters<ViewsDescriptor>$/;"	c	namespace:armnn
SplitterQueueDescriptor	./src/armnn/backends/WorkloadData.hpp	/^struct SplitterQueueDescriptor : QueueDescriptorWithParameters<ViewsDescriptor>$/;"	s	namespace:armnn
SplitterTest	./src/armnn/backends/test/LayerTests.cpp	/^std::vector<LayerTestResult<float,3>> SplitterTest(armnn::IWorkloadFactory& workloadFactory)$/;"	f
SplitterTestCommon	./src/armnn/backends/test/SplitterTestImpl.hpp	/^std::vector<LayerTestResult<T,3>> SplitterTestCommon(armnn::IWorkloadFactory& workloadFactory,$/;"	f
SplitterUint8Test	./src/armnn/backends/test/LayerTests.cpp	/^std::vector<LayerTestResult<uint8_t,3>> SplitterUint8Test(armnn::IWorkloadFactory& workloadFactory)$/;"	f
Sqrt	./include/armnn/Types.hpp	/^    Sqrt        = 8,$/;"	m	class:armnn::Status::DataType::ActivationFunction
Square	./include/armnn/Types.hpp	/^    Square      = 9$/;"	m	class:armnn::Status::DataType::ActivationFunction
SquashEqualSiblingsImpl	./src/armnn/optimizations/SquashEqualSiblings.hpp	/^class SquashEqualSiblingsImpl$/;"	c	namespace:armnn::optimizations
SqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^    SqueezeFixture()$/;"	f	struct:SqueezeFixture
SqueezeFixture	./src/armnnTfParser/test/Squeeze.cpp	/^struct SqueezeFixture : public ParserPrototxtFixture<armnnTfParser::ITfParser>$/;"	s	file:
Status	./include/armnn/Types.hpp	/^enum class Status$/;"	c	namespace:armnn
StrEqual	./include/armnn/TypesUtils.hpp	/^constexpr bool StrEqual(const char* strA, const char (&strB)[N])$/;"	f	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^struct StringifyLayerParameters$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<ActivationDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<BatchNormalizationDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<Convolution2dDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<DepthwiseConvolution2dDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<FullyConnectedDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<OriginsDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<PermuteDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<Pooling2dDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<ReshapeDescriptor>$/;"	s	namespace:armnn
StringifyLayerParameters	./src/armnn/SerializeLayerParameters.hpp	/^template <> struct StringifyLayerParameters<SoftmaxDescriptor>$/;"	s	namespace:armnn
Success	./include/armnn/Types.hpp	/^    Success = 0,$/;"	m	class:armnn::Status
SwizzleInDeswizzleOut	./src/armnnTfParser/TfParser.cpp	/^IConnectableLayer* SwizzleInDeswizzleOut(INetwork& network, IOutputSlot& input, IConnectableLayer& layer,$/;"	f	namespace:armnnTfParser::__anon27
Tag	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^struct Tag{};$/;"	s	namespace:__anon16
TanH	./include/armnn/Types.hpp	/^    TanH        = 1,$/;"	m	class:armnn::Status::DataType::ActivationFunction
TanhFixture	./src/armnnTfParser/test/Activations.cpp	/^    TanhFixture() : ActivationFixture("Tanh") {}$/;"	f	struct:TanhFixture
TanhFixture	./src/armnnTfParser/test/Activations.cpp	/^struct TanhFixture : ActivationFixture$/;"	s	file:
Tensor	./include/armnn/Tensor.hpp	/^class Tensor : public BaseTensor<void*>$/;"	c	namespace:armnn
TensorBufferArrayView	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^    TensorBufferArrayView(const TensorShape& shape, DataType* data)$/;"	f	class:armnn::TensorBufferArrayView
TensorBufferArrayView	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^class TensorBufferArrayView$/;"	c	namespace:armnn
TensorDescToBlobShape	./src/armnnCaffeParser/CaffeParser.cpp	/^BlobShape TensorDescToBlobShape(const TensorInfo& desc)$/;"	f	namespace:armnnCaffeParser
TensorInfo	./include/armnn/Tensor.hpp	/^class TensorInfo$/;"	c	namespace:armnn
TensorInfo	./src/armnn/Tensor.cpp	/^TensorInfo::TensorInfo()$/;"	f	class:armnn::TensorInfo
TensorInfo	./src/armnn/Tensor.cpp	/^TensorInfo::TensorInfo(const TensorInfo& other)$/;"	f	class:armnn::TensorInfo
TensorInfo	./src/armnn/Tensor.cpp	/^TensorInfo::TensorInfo(const TensorShape& shape, DataType dataType,$/;"	f	class:armnn::TensorInfo
TensorInfo	./src/armnn/Tensor.cpp	/^TensorInfo::TensorInfo(unsigned int numDimensions, const unsigned int* dimensionSizes, DataType dataType,$/;"	f	class:armnn::TensorInfo
TensorInfoFixture	./src/armnn/test/TensorTest.cpp	/^    TensorInfoFixture()$/;"	f	struct:TensorInfoFixture
TensorInfoFixture	./src/armnn/test/TensorTest.cpp	/^struct TensorInfoFixture$/;"	s	file:
TensorPin	./src/armnn/LoadedNetwork.cpp	/^    TensorPin(std::unique_ptr<ITensorHandle> handle, const TensorInfo& info, LayerBindingId id)$/;"	f	class:armnn::__anon2::TensorPin
TensorPin	./src/armnn/LoadedNetwork.cpp	/^class TensorPin$/;"	c	namespace:armnn::__anon2	file:
TensorShape	./include/armnn/Tensor.hpp	/^class TensorShape$/;"	c	namespace:armnn
TensorShape	./src/armnn/Tensor.cpp	/^TensorShape::TensorShape()$/;"	f	class:armnn::TensorShape
TensorShape	./src/armnn/Tensor.cpp	/^TensorShape::TensorShape(const TensorShape& other)$/;"	f	class:armnn::TensorShape
TensorShape	./src/armnn/Tensor.cpp	/^TensorShape::TensorShape(const unsigned int numDimensions, const unsigned int* const dimensionSizes)$/;"	f	class:armnn::TensorShape
TensorShape	./src/armnn/Tensor.cpp	/^TensorShape::TensorShape(std::initializer_list<unsigned int> dimensionSizeList)$/;"	f	class:armnn::TensorShape
TestCaseResult	./tests/InferenceTest.hpp	/^enum class TestCaseResult$/;"	c	namespace:armnn::test
TestFrameworkException	./tests/InferenceTest.hpp	/^class TestFrameworkException : public Exception$/;"	c	namespace:armnn::test
TestGraphAfterAddingCopyLayers	./src/armnn/test/GraphTests.cpp	/^static void TestGraphAfterAddingCopyLayers(const armnn::Graph& graph, const armnn::Graph& origGraph)$/;"	f	file:
TestLayerTypeMatches	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^bool TestLayerTypeMatches()$/;"	f	namespace:__anon16
TestNeonTensorHandleInfo	./src/armnn/backends/test/CreateWorkloadNeon.cpp	/^bool TestNeonTensorHandleInfo(armnn::INeonTensorHandle* handle, const armnn::TensorInfo& expectedInfo)$/;"	f	namespace:__anon14
TfParser	./src/armnnTfParser/TfParser.cpp	/^TfParser::TfParser()$/;"	f	class:armnnTfParser::TfParser
TfParser	./src/armnnTfParser/TfParser.hpp	/^class TfParser : public ITfParser$/;"	c	namespace:armnnTfParser
TidyWorkloadQueue	./src/armnn/LoadedNetwork.cpp	/^void LoadedNetwork::TidyWorkloadQueue(size_t numInputs, size_t numOutputs)$/;"	f	class:armnn::LoadedNetwork
TimePoint	./src/armnn/Profiling.hpp	/^    typedef std::chrono::time_point<Clock> TimePoint;$/;"	t	class:armnn::Profiler
TopologicalSort	./src/armnn/Graph.cpp	/^const Graph& Graph::TopologicalSort() const$/;"	f	class:armnn::Graph
TopologicalSort	./src/armnn/Graph.hpp	/^    Graph& TopologicalSort() { const_cast<const Graph*>(this)->TopologicalSort(); return *this; }$/;"	f	class:armnn::Graph
Trace	./include/armnn/Utils.hpp	/^    Trace,$/;"	m	class:armnn::LogSeverity
TrackBindingPoint	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::TrackBindingPoint(armnn::IConnectableLayer* layer,$/;"	f	class:armnnCaffeParser::CaffeParser
TrackBindingPoint	./src/armnnTfParser/TfParser.cpp	/^void TfParser::TrackBindingPoint(IConnectableLayer* layer,$/;"	f	class:armnnTfParser::TfParser
TrackInputBinding	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::TrackInputBinding(armnn::IConnectableLayer* layer,$/;"	f	class:armnnCaffeParser::CaffeParser
TrackInputBinding	./src/armnnTfParser/TfParser.cpp	/^void TfParser::TrackInputBinding(IConnectableLayer* layer, LayerBindingId id, const TensorInfo& tensorInfo)$/;"	f	class:armnnTfParser::TfParser
TrackOutputBinding	./src/armnnCaffeParser/CaffeParser.cpp	/^void CaffeParser::TrackOutputBinding(armnn::IConnectableLayer* layer,$/;"	f	class:armnnCaffeParser::CaffeParser
TrackOutputBinding	./src/armnnTfParser/TfParser.cpp	/^void TfParser::TrackOutputBinding(IConnectableLayer* layer, LayerBindingId id, const TensorInfo& tensorInfo)$/;"	f	class:armnnTfParser::TfParser
Train	./tests/YoloDatabase.cpp	/^    Train,$/;"	m	class:__anon34::YoloVocClass	file:
TrueFunc	./src/armnn/LayerSupportCommon.hpp	/^bool TrueFunc(std::string* reasonIfUnsupported, Params&&... params)$/;"	f	namespace:armnn
Type	./src/armnn/backends/ITensorHandle.hpp	/^    enum Type$/;"	g	class:armnn::ITensorHandle
TypedWorkload	./src/armnn/backends/Workload.hpp	/^    TypedWorkload(const QueueDescriptor& descriptor, const WorkloadInfo& info)$/;"	f	class:armnn::TypedWorkload
TypedWorkload	./src/armnn/backends/Workload.hpp	/^class TypedWorkload : public BaseWorkload<QueueDescriptor>$/;"	c	namespace:armnn
Undefined	./include/armnn/Types.hpp	/^    Undefined   = 5$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute
UnimplementedException	./include/armnn/Exceptions.hpp	/^class UnimplementedException : public Exception$/;"	c	namespace:armnn
UnimplementedException	./src/armnn/Exceptions.cpp	/^UnimplementedException::UnimplementedException()$/;"	f	class:armnn::UnimplementedException
UnknownImageChannelLayout	./tests/InferenceTestImage.hpp	/^class UnknownImageChannelLayout : public InferenceTestImageException$/;"	c
UnloadNetwork	./src/armnn/Runtime.cpp	/^Status Runtime::UnloadNetwork(NetworkId networkId)$/;"	f	class:armnn::Runtime
UnloadOpenClRuntime	./src/armnn/backends/ClContextControl.cpp	/^void ClContextControl::UnloadOpenClRuntime()$/;"	f	class:armnn::ClContextControl
Unroll	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^    void Unroll(Func operationFunc,$/;"	f	struct:armnn::BroadcastLoop
Unroll	./src/armnnUtils/Permute.cpp	/^    void Unroll(const T* srcData, T* dstData)$/;"	f	class:__anon30::PermuteLoop
Unroll	./src/armnnUtils/Permute.cpp	/^    void Unroll(size_type dimension, const T* srcData, T* dstData, const T* srcEnd, T* dstEnd)$/;"	f	class:__anon30::PermuteLoop	file:
UpdateEventTag	./src/armnn/Profiling.hpp	/^    void UpdateEventTag() { ++m_EventTag; m_EventTagUpdated = true; }$/;"	f	class:armnn::Profiler
UseTunedParameters	./include/armnn/IRuntime.hpp	/^        UseTunedParameters,$/;"	m	class:armnn::IClTunedParameters::Mode
Validate	./src/armnn/backends/WorkloadData.cpp	/^void ActivationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::ActivationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void AdditionQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::AdditionQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void BatchNormalizationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::BatchNormalizationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void ConstantQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::ConstantQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void Convolution2dQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::Convolution2dQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void DepthwiseConvolution2dQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::DepthwiseConvolution2dQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void FakeQuantizationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::FakeQuantizationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void FloorQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::FloorQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void FullyConnectedQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::FullyConnectedQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void L2NormalizationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::L2NormalizationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void MemCopyQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::MemCopyQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void MergerQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::MergerQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void MultiplicationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::MultiplicationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void NormalizationQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::NormalizationQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void PermuteQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::PermuteQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void Pooling2dQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::Pooling2dQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void ReshapeQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::ReshapeQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void ResizeBilinearQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::ResizeBilinearQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void SoftmaxQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::SoftmaxQueueDescriptor
Validate	./src/armnn/backends/WorkloadData.cpp	/^void SplitterQueueDescriptor::Validate(const WorkloadInfo& workloadInfo) const$/;"	f	class:armnn::SplitterQueueDescriptor
ValidateBiasTensorQuantization	./src/armnn/backends/WorkloadData.cpp	/^void ValidateBiasTensorQuantization(const TensorInfo& biasTensor, const TensorInfo& inputTensorInfo,$/;"	f	namespace:armnn::__anon10
ValidateBroadcastTensorShapesMatch	./src/armnn/backends/WorkloadData.cpp	/^void ValidateBroadcastTensorShapesMatch(const TensorInfo& first,$/;"	f	namespace:armnn::__anon10
ValidateConnectionIndex	./src/armnn/Layer.cpp	/^void OutputSlot::ValidateConnectionIndex(unsigned int index) const$/;"	f	class:armnn::OutputSlot
ValidateData	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^    virtual void ValidateData() const {};$/;"	f	class:armnn::NeonConvolution2dBaseWorkload
ValidateData	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.cpp	/^void NeonConvolution2dFloat32Workload::ValidateData() const$/;"	f	class:armnn::NeonConvolution2dFloat32Workload
ValidateData	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.cpp	/^void NeonConvolution2dUint8Workload::ValidateData() const$/;"	f	class:armnn::NeonConvolution2dUint8Workload
ValidateDirectory	./tests/InferenceTest.cpp	/^bool ValidateDirectory(std::string& dir)$/;"	f	namespace:armnn::test
ValidateInputsOutputs	./src/armnn/backends/WorkloadData.cpp	/^void QueueDescriptor::ValidateInputsOutputs(const std::string& descName,$/;"	f	class:armnn::QueueDescriptor
ValidateNoInputs	./src/armnn/backends/WorkloadData.cpp	/^void ValidateNoInputs(const WorkloadInfo& workloadInfo, std::string const& descName)$/;"	f	namespace:armnn::__anon10
ValidateNumInputsOutputs	./src/armnnCaffeParser/CaffeParser.cpp	/^void ValidateNumInputsOutputs(const caffe::LayerParameter& layerParameter,$/;"	f	namespace:armnnCaffeParser
ValidatePointer	./src/armnn/backends/WorkloadData.cpp	/^void ValidatePointer(const void* ptr, std::string const& descName, std::string const& paramName)$/;"	f	namespace:armnn::__anon10
ValidateSingleInput	./src/armnn/backends/WorkloadData.cpp	/^void ValidateSingleInput(const WorkloadInfo& workloadInfo, std::string const& descName)$/;"	f	namespace:armnn::__anon10
ValidateSingleOutput	./src/armnn/backends/WorkloadData.cpp	/^void ValidateSingleOutput(const WorkloadInfo& workloadInfo, std::string const& descName)$/;"	f	namespace:armnn::__anon10
ValidateTensorDataType	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTensorDataType(const TensorInfo& tensor, DataType dataType,$/;"	f	namespace:armnn::__anon10
ValidateTensorNumDimensions	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTensorNumDimensions(const TensorInfo&  tensor,$/;"	f	namespace:armnn::__anon10
ValidateTensorQuantizationMultiplier	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTensorQuantizationMultiplier(const TensorInfo& inputTensor1, const TensorInfo& inputTensor2,$/;"	f	namespace:armnn::__anon10
ValidateTensorShape	./src/armnn/Layer.cpp	/^bool OutputSlot::ValidateTensorShape(const TensorShape& shape) const$/;"	f	class:armnn::OutputSlot
ValidateTensorShapesFromInputs	./src/armnn/layers/ActivationLayer.cpp	/^void ActivationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::ActivationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/AdditionLayer.cpp	/^void AdditionLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::AdditionLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/BatchNormalizationLayer.cpp	/^void BatchNormalizationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::BatchNormalizationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/ConstantLayer.cpp	/^void ConstantLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::ConstantLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/Convolution2dLayer.cpp	/^void Convolution2dLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::Convolution2dLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/DepthwiseConvolution2dLayer.cpp	/^void DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::DepthwiseConvolution2dLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/FakeQuantizationLayer.cpp	/^void FakeQuantizationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::FakeQuantizationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/FloorLayer.cpp	/^void FloorLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::FloorLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/FullyConnectedLayer.cpp	/^void FullyConnectedLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::FullyConnectedLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/InputLayer.cpp	/^void InputLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::InputLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/L2NormalizationLayer.cpp	/^void L2NormalizationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::L2NormalizationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/MemCopyLayer.cpp	/^void MemCopyLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::MemCopyLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/MergerLayer.cpp	/^void MergerLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::MergerLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/MultiplicationLayer.cpp	/^void MultiplicationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::MultiplicationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/NormalizationLayer.cpp	/^void NormalizationLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::NormalizationLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/OutputLayer.cpp	/^void OutputLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::OutputLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/PermuteLayer.cpp	/^void PermuteLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::PermuteLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/Pooling2dLayer.cpp	/^void Pooling2dLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::Pooling2dLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/ReshapeLayer.cpp	/^void ReshapeLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::ReshapeLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/ResizeBilinearLayer.cpp	/^void ResizeBilinearLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::ResizeBilinearLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/SoftmaxLayer.cpp	/^void SoftmaxLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::SoftmaxLayer
ValidateTensorShapesFromInputs	./src/armnn/layers/SplitterLayer.cpp	/^void SplitterLayer::ValidateTensorShapesFromInputs()$/;"	f	class:armnn::SplitterLayer
ValidateTensorShapesMatch	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTensorShapesMatch(const TensorInfo& first,$/;"	f	namespace:armnn::__anon10
ValidateTensors	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTensors(const std::vector<ITensorHandle*>& vec,$/;"	f	namespace:armnn::__anon10
ValidateTwoInputs	./src/armnn/backends/WorkloadData.cpp	/^void ValidateTwoInputs(const WorkloadInfo& workloadInfo, std::string const& descName)$/;"	f	namespace:armnn::__anon10
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^        ViewOrigin() {}$/;"	f	struct:armnn::MergerQueueDescriptor::ViewOrigin
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^        ViewOrigin() {}$/;"	f	struct:armnn::SplitterQueueDescriptor::ViewOrigin
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^        ViewOrigin(const std::vector<unsigned int>& origin) : m_Origin(origin) {}$/;"	f	struct:armnn::MergerQueueDescriptor::ViewOrigin
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^        ViewOrigin(std::vector<unsigned int> const& origin) : m_Origin(origin) {}$/;"	f	struct:armnn::SplitterQueueDescriptor::ViewOrigin
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^    struct ViewOrigin$/;"	s	struct:armnn::MergerQueueDescriptor
ViewOrigin	./src/armnn/backends/WorkloadData.hpp	/^    struct ViewOrigin$/;"	s	struct:armnn::SplitterQueueDescriptor
ViewsDescriptor	./include/armnn/Descriptors.hpp	/^struct ViewsDescriptor$/;"	s	namespace:armnn
ViewsDescriptor	./src/armnn/Descriptors.cpp	/^ViewsDescriptor::ViewsDescriptor()$/;"	f	class:armnn::ViewsDescriptor
ViewsDescriptor	./src/armnn/Descriptors.cpp	/^ViewsDescriptor::ViewsDescriptor(ViewsDescriptor&& other)$/;"	f	class:armnn::ViewsDescriptor
ViewsDescriptor	./src/armnn/Descriptors.cpp	/^ViewsDescriptor::ViewsDescriptor(const ViewsDescriptor& other)$/;"	f	class:armnn::ViewsDescriptor
ViewsDescriptor	./src/armnn/Descriptors.cpp	/^ViewsDescriptor::ViewsDescriptor(uint32_t numViews, uint32_t numDimensions \/*= 4*\/)$/;"	f	class:armnn::ViewsDescriptor
Visit	./src/armnnUtils/GraphTopologicalSort.hpp	/^bool Visit($/;"	f	namespace:armnnUtils::__anon29
Visited	./src/armnnUtils/GraphTopologicalSort.hpp	/^    Visited,$/;"	m	class:armnnUtils::__anon29::NodeState
Visiting	./src/armnnUtils/GraphTopologicalSort.hpp	/^    Visiting,$/;"	m	class:armnnUtils::__anon29::NodeState
WaitForDevice	./src/armnn/Profiling.cpp	/^void Profiler::WaitForDevice(Compute compute) const$/;"	f	class:armnn::Profiler
Warning	./include/armnn/Utils.hpp	/^    Warning,$/;"	m	class:armnn::LogSeverity
WithOutputTensorIndex	./src/armnnTfParser/TfParser.hpp	/^    WithOutputTensorIndex(T && value, unsigned int index)$/;"	f	struct:armnnTfParser::WithOutputTensorIndex
WithOutputTensorIndex	./src/armnnTfParser/TfParser.hpp	/^    WithOutputTensorIndex(const T & value, unsigned int index)$/;"	f	struct:armnnTfParser::WithOutputTensorIndex
WithOutputTensorIndex	./src/armnnTfParser/TfParser.hpp	/^struct WithOutputTensorIndex$/;"	s	namespace:armnnTfParser
Within	./include/armnn/Types.hpp	/^    Within = 1$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel
WorkloadData	./src/armnn/LoadedNetwork.cpp	/^    WorkloadData(const InputTensors& inputTensors, const OutputTensors& outputTensors)$/;"	f	class:armnn::__anon2::WorkloadData
WorkloadData	./src/armnn/LoadedNetwork.cpp	/^class WorkloadData$/;"	c	namespace:armnn::__anon2	file:
WorkloadDataCollector	./src/armnn/backends/WorkloadDataCollector.hpp	/^    WorkloadDataCollector(std::vector<ITensorHandle*>& handles, std::vector<TensorInfo>& infos)$/;"	f	class:armnn::WorkloadDataCollector
WorkloadDataCollector	./src/armnn/backends/WorkloadDataCollector.hpp	/^class WorkloadDataCollector$/;"	c	namespace:armnn
WorkloadInfo	./src/armnn/backends/WorkloadInfo.hpp	/^struct WorkloadInfo$/;"	s	namespace:armnn
Write	./tests/InferenceTestImage.cpp	/^void InferenceTestImage::Write(WriteFormat format, const char* filePath) const$/;"	f	class:InferenceTestImage
WriteFormat	./tests/InferenceTestImage.hpp	/^    enum class WriteFormat$/;"	c	class:InferenceTestImage
YoloBoundingBox	./tests/YoloDatabase.hpp	/^struct YoloBoundingBox$/;"	s
YoloDatabase	./tests/YoloDatabase.cpp	/^YoloDatabase::YoloDatabase(const std::string& imageDir)$/;"	f	class:YoloDatabase
YoloDatabase	./tests/YoloDatabase.hpp	/^class YoloDatabase$/;"	c
YoloDetectedObject	./tests/YoloDatabase.hpp	/^    YoloDetectedObject(unsigned int yoloClass,$/;"	f	struct:YoloDetectedObject
YoloDetectedObject	./tests/YoloDatabase.hpp	/^struct YoloDetectedObject$/;"	s
YoloImageHeight	./tests/YoloDatabase.hpp	/^constexpr unsigned int YoloImageHeight = 448;$/;"	v
YoloImageWidth	./tests/YoloDatabase.hpp	/^constexpr unsigned int YoloImageWidth = 448;$/;"	v
YoloOutputSize	./tests/YoloInferenceTest.hpp	/^constexpr size_t YoloOutputSize = 1470;$/;"	v
YoloTestCase	./tests/YoloInferenceTest.hpp	/^    YoloTestCase(Model& model,$/;"	f	class:YoloTestCase
YoloTestCase	./tests/YoloInferenceTest.hpp	/^class YoloTestCase : public InferenceModelTestCase<Model>$/;"	c
YoloTestCaseData	./tests/YoloDatabase.hpp	/^    YoloTestCaseData(std::vector<float> inputImage,$/;"	f	class:YoloTestCaseData
YoloTestCaseData	./tests/YoloDatabase.hpp	/^class YoloTestCaseData$/;"	c
YoloTestCaseProvider	./tests/YoloInferenceTest.hpp	/^    YoloTestCaseProvider(TConstructModelCallable constructModel)$/;"	f	class:YoloTestCaseProvider
YoloTestCaseProvider	./tests/YoloInferenceTest.hpp	/^class YoloTestCaseProvider : public IInferenceTestCaseProvider$/;"	c
YoloVocClass	./tests/YoloDatabase.cpp	/^enum class YoloVocClass : unsigned int$/;"	c	namespace:__anon34	file:
a	./src/armnn/backends/test/ActivationFixture.hpp	/^    float a = 0.234f;$/;"	m	struct:ActivationFixture
armcomputetensorutils	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^namespace armcomputetensorutils$/;"	n	namespace:armnn	file:
armcomputetensorutils	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^namespace armcomputetensorutils$/;"	n	namespace:armnn
armnn	./include/armnn/Descriptors.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/DescriptorsFwd.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/Exceptions.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/INetwork.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/IRuntime.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/LayerSupport.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/NetworkFwd.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/Tensor.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/TensorFwd.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/Types.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/TypesUtils.hpp	/^namespace armnn$/;"	n
armnn	./include/armnn/Utils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Descriptors.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Exceptions.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Graph.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Graph.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/InternalTypes.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/InternalTypes.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Layer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Layer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/LayerFwd.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/LayerSupport.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/LayerSupportCommon.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/LayersFwd.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/LoadedNetwork.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/LoadedNetwork.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Network.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Network.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Optimizer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Optimizer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Profiling.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Profiling.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Runtime.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Runtime.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/SerializeLayerParameters.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/SerializeLayerParameters.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/Tensor.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/Utils.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/AclBaseMemoryManager.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/AclBaseMemoryManager.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ArmComputeTensorUtils.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ArmComputeTensorUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ArmComputeUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClContextControl.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClContextControl.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClLayerSupport.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClLayerSupport.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClTensorHandle.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloadFactory.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloadFactory.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloadUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClBaseMergerWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClBaseSplitterWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClConstantFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClConstantFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClConstantUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClConstantUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dBaseWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dBaseWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionHelper.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClMergerFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClMergerFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClMergerUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClMergerUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClSplitterFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClSplitterFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ClWorkloads/ClSplitterUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/ClWorkloads/ClSplitterUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/CpuTensorHandle.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/CpuTensorHandle.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/CpuTensorHandleFwd.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/ITensorHandle.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/MakeWorkloadHelper.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/MemCopyWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/MemCopyWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonLayerSupport.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonLayerSupport.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonTensorHandle.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloadFactory.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloadFactory.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloadUtils.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloadUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonBaseConstantWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonBaseMergerWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonBaseSplitterWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonConstantFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonConstantFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonConstantUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonConstantUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonMergerFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonMergerFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonMergerUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonMergerUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonSplitterFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonSplitterFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/NeonWorkloads/NeonSplitterUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/NeonWorkloads/NeonSplitterUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/OutputHandler.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/OutputHandler.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefLayerSupport.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefLayerSupport.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloadFactory.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloadFactory.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Activation.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Activation.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Addition.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Addition.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/BatchNormImpl.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Broadcast.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/ConvImpl.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/ConvImpl.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/FullyConnected.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/FullyConnected.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Merger.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Multiplication.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Multiplication.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Pooling2d.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Pooling2d.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefActivationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefActivationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefActivationUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefActivationUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefAdditionFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefAdditionFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefAdditionUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefAdditionUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefBatchNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefBatchNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefBatchNormalizationUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefBatchNormalizationUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefConstantFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefConstantFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefConstantUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefConstantUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefConvolution2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefConvolution2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefConvolution2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefConvolution2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefFloorFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefFloorFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefFullyConnectedFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefFullyConnectedFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefFullyConnectedUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefFullyConnectedUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefL2NormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefL2NormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefMergerFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefMergerFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefMergerUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefMergerUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefMultiplicationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefMultiplicationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefMultiplicationUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefMultiplicationUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefPooling2dFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefPooling2dFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefPooling2dUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefPooling2dUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefReshapeFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefReshapeFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefReshapeUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefReshapeUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefResizeBilinearFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefResizeBilinearFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefResizeBilinearUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefResizeBilinearUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefSoftmaxFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefSoftmaxFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefSoftmaxUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefSoftmaxUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefSplitterFloat32Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefSplitterFloat32Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefSplitterUint8Workload.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/RefSplitterUint8Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/RefWorkloadUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/ResizeBilinear.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/ResizeBilinear.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Softmax.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/RefWorkloads/Softmax.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/Splitter.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/Workload.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/WorkloadData.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/WorkloadData.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/WorkloadDataCollector.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/WorkloadDataFwd.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/WorkloadFactory.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/backends/WorkloadFactory.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/WorkloadInfo.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/test/LayerTests.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/backends/test/WorkloadTestUtils.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/ActivationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/ActivationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/AdditionLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/AdditionLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/BatchNormalizationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/BatchNormalizationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/ConstantLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/ConstantLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/Convolution2dLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/Convolution2dLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/DepthwiseConvolution2dLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/FakeQuantizationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/FakeQuantizationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/FloorLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/FloorLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/FullyConnectedLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/FullyConnectedLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/InputLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/InputLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/L2NormalizationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/L2NormalizationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/LayerCloneBase.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/LayerWithParameters.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/MemCopyLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/MemCopyLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/MergerLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/MergerLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/MultiplicationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/MultiplicationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/NormalizationLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/NormalizationLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/OutputLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/OutputLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/PermuteLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/PermuteLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/Pooling2dLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/Pooling2dLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/ReshapeLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/ReshapeLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/ResizeBilinearLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/ResizeBilinearLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/SoftmaxLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/SoftmaxLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/layers/SplitterLayer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/layers/SplitterLayer.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/MovePermuteUp.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/Optimization.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/OptimizeConsecutiveReshapes.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/OptimizeInversePermutes.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/PermuteAsReshape.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/optimizations/SquashEqualSiblings.hpp	/^namespace armnn$/;"	n
armnn	./src/armnn/test/RuntimeTests.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnn/test/TensorTest.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnnTfParser/TfParser.hpp	/^namespace armnn$/;"	n
armnn	./src/armnnUtils/DotSerializer.cpp	/^namespace armnn$/;"	n	file:
armnn	./src/armnnUtils/DotSerializer.hpp	/^namespace armnn$/;"	n
armnn	./tests/InferenceTest.cpp	/^namespace armnn$/;"	n	file:
armnn	./tests/InferenceTest.hpp	/^namespace armnn$/;"	n
armnnCaffeParser	./include/armnnCaffeParser/ICaffeParser.hpp	/^namespace armnnCaffeParser$/;"	n
armnnCaffeParser	./src/armnnCaffeParser/CaffeParser.cpp	/^namespace armnnCaffeParser$/;"	n	file:
armnnCaffeParser	./src/armnnCaffeParser/CaffeParser.hpp	/^namespace armnnCaffeParser$/;"	n
armnnTfParser	./include/armnnTfParser/ITfParser.hpp	/^namespace armnnTfParser$/;"	n
armnnTfParser	./src/armnnTfParser/TfParser.cpp	/^namespace armnnTfParser$/;"	n	file:
armnnTfParser	./src/armnnTfParser/TfParser.hpp	/^namespace armnnTfParser$/;"	n
armnnUtils	./src/armnnUtils/GraphTopologicalSort.hpp	/^namespace armnnUtils$/;"	n
armnnUtils	./src/armnnUtils/HeapProfiling.cpp	/^namespace armnnUtils$/;"	n	file:
armnnUtils	./src/armnnUtils/HeapProfiling.hpp	/^namespace armnnUtils$/;"	n
armnnUtils	./src/armnnUtils/LeakChecking.hpp	/^namespace armnnUtils$/;"	n
armnnUtils	./src/armnnUtils/Logging.cpp	/^namespace armnnUtils$/;"	n	file:
armnnUtils	./src/armnnUtils/Logging.hpp	/^namespace armnnUtils$/;"	n
armnnUtils	./src/armnnUtils/ParserFlatbuffersFixture.hpp	/^namespace armnnUtils$/;"	n
armnnUtils	./src/armnnUtils/Permute.cpp	/^namespace armnnUtils$/;"	n	file:
armnnUtils	./src/armnnUtils/Permute.hpp	/^namespace armnnUtils$/;"	n
b	./src/armnn/backends/test/ActivationFixture.hpp	/^    float b = -12.345f;$/;"	m	struct:ActivationFixture
batchSize	./src/armnn/backends/test/ActivationFixture.hpp	/^    unsigned int batchSize = 5;$/;"	m	struct:ActivationFixture
begin	./include/armnn/Types.hpp	/^    ConstIterator begin() const { return m_DimMappings.begin(); }$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
begin	./src/armnn/Graph.hpp	/^        ConstIteratorInputs begin() const$/;"	f	struct:armnn::Graph::InputLayersAccessor
begin	./src/armnn/Graph.hpp	/^        ConstIteratorOutputs begin() const$/;"	f	struct:armnn::Graph::OutputLayersAccessor
begin	./src/armnn/Graph.hpp	/^    ConstIterator begin() const { return {m_Layers.begin(), &PtrCast<const Layer>}; }$/;"	f	class:armnn::Graph
begin	./src/armnn/Graph.hpp	/^    Iterator begin() { return m_Layers.begin(); }$/;"	f	class:armnn::Graph
boost_test_print_type	./src/armnn/test/TensorTest.cpp	/^std::ostream& boost_test_print_type(std::ostream& ostr, const TensorInfo& right)$/;"	f	namespace:armnn
boost_test_print_type	./src/armnn/test/TensorTest.cpp	/^std::ostream& boost_test_print_type(std::ostream& ostr, const TensorShape& shape)$/;"	f	namespace:armnn
caffe	./src/armnnCaffeParser/CaffeParser.hpp	/^namespace caffe$/;"	n
cbegin	./src/armnn/Graph.hpp	/^    ConstIterator cbegin() const { return begin(); }$/;"	f	class:armnn::Graph
cend	./src/armnn/Graph.hpp	/^    ConstIterator cend() const { return end(); }$/;"	f	class:armnn::Graph
channels	./src/armnn/backends/test/ActivationFixture.hpp	/^    unsigned int channels  = 2;$/;"	m	struct:ActivationFixture
cl	./src/armnn/LoadedNetwork.hpp	/^namespace cl$/;"	n
cl	./src/armnn/backends/ClContextControl.cpp	/^namespace cl$/;"	n	file:
consume	./src/armnnUtils/Logging.cpp	/^    void consume(boost::log::record_view const& rec, std::string const& formatted_message)$/;"	f	struct:armnnUtils::DebugOutputSink
dummyGraph	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^armnn::Graph dummyGraph;$/;"	m	namespace:__anon16
end	./include/armnn/Types.hpp	/^    ConstIterator end() const { return m_DimMappings.end(); }$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
end	./src/armnn/Graph.hpp	/^        ConstIteratorInputs end() const$/;"	f	struct:armnn::Graph::InputLayersAccessor
end	./src/armnn/Graph.hpp	/^        ConstIteratorOutputs end() const$/;"	f	struct:armnn::Graph::OutputLayersAccessor
end	./src/armnn/Graph.hpp	/^    ConstIterator end() const { return {m_Layers.end(), &PtrCast<const Layer>}; }$/;"	f	class:armnn::Graph
end	./src/armnn/Graph.hpp	/^    Iterator end() { return m_Layers.end(); }$/;"	f	class:armnn::Graph
features	./build_arm64/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	./build_arm64/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
final	./src/armnn/Graph.hpp	/^class Graph::LayerInGraph final : public LayerInGraphBase<LayerT>$/;"	c	namespace:armnn
final	./src/armnn/Graph.hpp	/^class Graph::LayerInGraph<InputLayer> final : public LayerInGraphBase<InputLayer>$/;"	c	namespace:armnn
final	./src/armnn/Graph.hpp	/^class Graph::LayerInGraph<OutputLayer> final : public LayerInGraphBase<OutputLayer>$/;"	c	namespace:armnn
final	./src/armnn/Layer.hpp	/^class InputSlot final : public IInputSlot$/;"	c	namespace:armnn
final	./src/armnn/Layer.hpp	/^class OutputSlot final : public IOutputSlot$/;"	c	namespace:armnn
final	./src/armnn/Network.hpp	/^class Network final : public INetwork$/;"	c	namespace:armnn
final	./src/armnn/Network.hpp	/^class OptimizedNetwork final : public IOptimizedNetwork$/;"	c	namespace:armnn
final	./src/armnn/Runtime.hpp	/^class Runtime final : public IRuntime$/;"	c	namespace:armnn
final	./src/armnn/optimizations/Optimization.hpp	/^class OptimizeForConnection final$/;"	c	namespace:armnn
final	./src/armnn/optimizations/Optimization.hpp	/^class OptimizeForType final : public OptimizeForTypeImpl<BaseType, Wrapped>$/;"	c	namespace:armnn
final	./src/armnnUtils/HeapProfiling.hpp	/^class ScopedHeapProfiler final$/;"	c	namespace:armnnUtils
final	./src/armnnUtils/LeakChecking.hpp	/^class ScopedDisableLeakChecking final$/;"	c	namespace:armnnUtils
final	./src/armnnUtils/LeakChecking.hpp	/^class ScopedLeakChecker final$/;"	c	namespace:armnnUtils
g_AggregateProfilingEventsByTag	./src/armnn/Profiling.cpp	/^constexpr bool g_AggregateProfilingEventsByTag = false;$/;"	m	namespace:armnn	file:
g_DefaultImageSet	./tests/ImageNetDatabase.cpp	/^const std::vector<ImageSet> g_DefaultImageSet =$/;"	v
g_DefaultLoggingConfiguration	./src/armnn/Utils.cpp	/^static DefaultLoggingConfiguration g_DefaultLoggingConfiguration;$/;"	m	namespace:armnn	file:
g_FloatCloseToZeroTolerance	./src/armnn/test/TensorHelpers.hpp	/^constexpr float g_FloatCloseToZeroTolerance = 1.0e-6f;$/;"	v
g_PerTestCaseInputOutput	./tests/YoloDatabase.cpp	/^const std::array<YoloInputOutput,1> g_PerTestCaseInputOutput =$/;"	m	namespace:__anon34	file:
g_ProfilingEventCountHint	./src/armnn/Profiling.cpp	/^constexpr std::size_t g_ProfilingEventCountHint = 1024;$/;"	m	namespace:armnn	file:
g_ProfilingForceGpuSync	./src/armnn/Profiling.cpp	/^constexpr bool g_ProfilingForceGpuSync = true;$/;"	m	namespace:armnn	file:
g_WriteProfilingEventSequence	./src/armnn/Profiling.cpp	/^constexpr bool g_WriteProfilingEventSequence = true;$/;"	m	namespace:armnn	file:
g_WriteReportToStdOutOnProfilerDestruction	./src/armnn/Profiling.cpp	/^constexpr bool g_WriteReportToStdOutOnProfilerDestruction = true;$/;"	m	namespace:armnn	file:
g_kCifar10ImageByteSize	./tests/Cifar10Database.cpp	/^constexpr unsigned int g_kCifar10ImageByteSize = 1 + 3 * 32 * 32;$/;"	v
g_kMnistImageByteSize	./tests/MnistDatabase.cpp	/^constexpr int g_kMnistImageByteSize = 28 * 28;$/;"	v
height	./src/armnn/backends/test/ActivationFixture.hpp	/^    unsigned int height    = 29;$/;"	m	struct:ActivationFixture
info_arch	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
input	./src/armnn/backends/test/ActivationFixture.hpp	/^    boost::multi_array<float, 4> input;$/;"	m	struct:ActivationFixture
inputBatchSize	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int inputBatchSize = 2;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
inputChannels	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int inputChannels = 4u;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
inputHeight	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int inputHeight = 31u;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
inputTensorInfo	./src/armnn/backends/test/ActivationFixture.hpp	/^    armnn::TensorInfo inputTensorInfo;$/;"	m	struct:ActivationFixture
inputWidth	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int inputWidth = 19u;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
m_A	./include/armnn/Descriptors.hpp	/^    float              m_A;$/;"	m	struct:armnn::ActivationDescriptor
m_ActivationLayer	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.hpp	/^    mutable arm_compute::CLActivationLayer m_ActivationLayer;$/;"	m	class:armnn::ClActivationFloat32Workload
m_ActivationLayer	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.hpp	/^    mutable arm_compute::CLActivationLayer m_ActivationLayer;$/;"	m	class:armnn::ClActivationUint8Workload
m_ActivationLayer	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.hpp	/^    mutable arm_compute::NEActivationLayer m_ActivationLayer;$/;"	m	class:armnn::NeonActivationFloat32Workload
m_ActivationLayer	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.hpp	/^    mutable arm_compute::NEActivationLayer m_ActivationLayer;$/;"	m	class:armnn::NeonActivationUint8Workload
m_AddLayer	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.hpp	/^    mutable arm_compute::NEArithmeticAddition m_AddLayer;$/;"	m	class:armnn::NeonAdditionFloat32Workload
m_Allocator	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    mutable std::unique_ptr<arm_compute::IAllocator>            m_Allocator;$/;"	m	class:armnn::AclBaseMemoryManager
m_Alpha	./include/armnn/Descriptors.hpp	/^    float                         m_Alpha;$/;"	m	struct:armnn::NormalizationDescriptor
m_ArmnnOutputSlotForCaffeTop	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::unordered_map<std::string, armnn::IOutputSlot*> m_ArmnnOutputSlotForCaffeTop;$/;"	m	class:armnnCaffeParser::CaffeParser
m_Attributes	./src/armnnUtils/DotSerializer.hpp	/^    std::unique_ptr<DotAttributeSet> m_Attributes;$/;"	m	class:armnn::DotDefaults
m_Attributes	./src/armnnUtils/DotSerializer.hpp	/^    std::unique_ptr<DotAttributeSet> m_Attributes;$/;"	m	class:armnn::DotEdge
m_Attributes	./src/armnnUtils/DotSerializer.hpp	/^    std::unique_ptr<DotAttributeSet> m_Attributes;$/;"	m	class:armnn::DotNode
m_Attributes	./src/armnnUtils/DotSerializer.hpp	/^    std::vector<std::string> m_Attributes;$/;"	m	class:armnn::DotAttributeSet
m_B	./include/armnn/Descriptors.hpp	/^    float              m_B;$/;"	m	struct:armnn::ActivationDescriptor
m_Beta	./include/armnn/Descriptors.hpp	/^    float                         m_Beta;$/;"	m	struct:armnn::NormalizationDescriptor
m_Beta	./include/armnn/Descriptors.hpp	/^    float              m_Beta;$/;"	m	struct:armnn::SoftmaxDescriptor
m_Beta	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    arm_compute::CLTensor m_Beta;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
m_Beta	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    arm_compute::Tensor m_Beta;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
m_Beta	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Beta;$/;"	m	struct:armnn::BatchNormalizationQueueDescriptor
m_Beta	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Beta;$/;"	m	class:armnn::BatchNormalizationLayer
m_Bias	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Bias;$/;"	m	struct:armnn::Convolution2dQueueDescriptor
m_Bias	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Bias;$/;"	m	struct:armnn::DepthwiseConvolution2dQueueDescriptor
m_Bias	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Bias;$/;"	m	struct:armnn::FullyConnectedQueueDescriptor
m_Bias	./src/armnn/layers/Convolution2dLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Bias;$/;"	m	class:armnn::Convolution2dLayer
m_Bias	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Bias;$/;"	m	class:armnn::DepthwiseConvolution2dLayer
m_Bias	./src/armnn/layers/FullyConnectedLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Bias;$/;"	m	class:armnn::FullyConnectedLayer
m_BiasEnabled	./include/armnn/Descriptors.hpp	/^    bool                 m_BiasEnabled;$/;"	m	struct:armnn::Convolution2dDescriptor
m_BiasEnabled	./include/armnn/Descriptors.hpp	/^    bool     m_BiasEnabled;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_BiasEnabled	./include/armnn/Descriptors.hpp	/^    bool m_BiasEnabled;$/;"	m	struct:armnn::FullyConnectedDescriptor
m_BiasTensor	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^    arm_compute::CLTensor m_BiasTensor;$/;"	m	class:armnn::ClConvolution2dFloat32Workload
m_BiasTensor	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^    arm_compute::CLTensor m_BiasTensor;$/;"	m	class:armnn::ClConvolution2dUint8Workload
m_BiasTensor	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    arm_compute::CLTensor m_BiasTensor;$/;"	m	class:armnn::ClDepthwiseConvolutionFloat32Workload
m_BiasTensor	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    arm_compute::CLTensor m_BiasTensor;$/;"	m	class:armnn::ClDepthwiseConvolutionUint8Workload
m_BiasTensor	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^    arm_compute::Tensor m_BiasTensor;$/;"	m	class:armnn::NeonConvolution2dBaseWorkload
m_BiasTensor	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^    arm_compute::Tensor m_BiasTensor;$/;"	m	class:armnn::NeonDepthwiseConvolutionFloat32Workload
m_BiasTensor	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^    arm_compute::Tensor m_BiasTensor;$/;"	m	class:armnn::NeonDepthwiseConvolutionUint8Workload
m_BiasesTensor	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^    arm_compute::CLTensor                      m_BiasesTensor;$/;"	m	class:armnn::ClFullyConnectedFloat32Workload
m_BiasesTensor	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^    arm_compute::Tensor                        m_BiasesTensor;$/;"	m	class:armnn::NeonFullyConnectedFloat32Workload
m_BinaryDirectory	./tests/Cifar10Database.hpp	/^    std::string m_BinaryDirectory;$/;"	m	class:Cifar10Database
m_BinaryDirectory	./tests/ImageNetDatabase.hpp	/^    std::string m_BinaryDirectory;$/;"	m	class:ImageNetDatabase
m_BinaryDirectory	./tests/MnistDatabase.hpp	/^    std::string m_BinaryDirectory;$/;"	m	class:MnistDatabase
m_BinaryDirectory	./tests/MobileNetDatabase.hpp	/^    std::string m_BinaryDirectory;$/;"	m	class:MobileNetDatabase
m_Box	./tests/YoloDatabase.hpp	/^    YoloBoundingBox m_Box;$/;"	m	struct:YoloDetectedObject
m_CaffeLayersByTopName	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::map<std::string, const caffe::LayerParameter*> m_CaffeLayersByTopName;$/;"	m	class:armnnCaffeParser::CaffeParser
m_ClContextControl	./src/armnn/Runtime.hpp	/^    ClContextControl m_ClContextControl;$/;"	m	class:armnn::final
m_ClTunedParameters	./include/armnn/IRuntime.hpp	/^        IClTunedParameters* m_ClTunedParameters;$/;"	m	struct:armnn::IRuntime::CreationOptions
m_Class	./tests/YoloDatabase.hpp	/^    unsigned int m_Class;$/;"	m	struct:YoloDetectedObject
m_Compute	./src/armnn/Profiling.hpp	/^    armnn::Compute m_Compute;$/;"	m	class:armnn::ScopedProfilingEvent
m_ComputeDevice	./src/armnn/Layer.hpp	/^    Compute m_ComputeDevice;$/;"	m	class:armnn::Layer
m_ComputeDevice	./src/armnn/Profiling.hpp	/^        Compute m_ComputeDevice;$/;"	m	struct:armnn::Profiler::Marker
m_ComputeDevice	./tests/InferenceModel.hpp	/^        armnn::Compute m_ComputeDevice;$/;"	m	struct:InferenceModel::CommandLineOptions
m_ComputeDevice	./tests/InferenceModel.hpp	/^        armnn::Compute m_ComputeDevice;$/;"	m	struct:InferenceModel::Params
m_Confidence	./tests/YoloDatabase.hpp	/^    float m_Confidence;$/;"	m	struct:YoloDetectedObject
m_Connection	./src/armnn/Layer.hpp	/^    OutputSlot* m_Connection;$/;"	m	class:armnn::final
m_Connections	./src/armnn/Layer.hpp	/^    std::vector<InputSlot*> m_Connections;$/;"	m	class:armnn::final
m_ConstructDatabase	./tests/InferenceTest.hpp	/^    std::function<TDatabase(const char*)> m_ConstructDatabase;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ConstructModel	./tests/InferenceTest.hpp	/^    std::function<std::unique_ptr<InferenceModel>(typename InferenceModel::CommandLineOptions)> m_ConstructModel;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ConstructModel	./tests/YoloInferenceTest.hpp	/^    std::function<std::unique_ptr<Model>(typename Model::CommandLineOptions)> m_ConstructModel;$/;"	m	class:YoloTestCaseProvider
m_Contents	./src/armnnUtils/DotSerializer.hpp	/^    std::unique_ptr<NodeContent>     m_Contents;$/;"	m	class:armnn::DotNode
m_Contents	./src/armnnUtils/DotSerializer.hpp	/^    std::vector<std::string> m_Contents;$/;"	m	class:armnn::NodeContent
m_ConvolutionLayer	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^    mutable arm_compute::CLConvolutionLayer         m_ConvolutionLayer;$/;"	m	class:armnn::ClConvolution2dFloat32Workload
m_ConvolutionLayer	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^    mutable arm_compute::CLConvolutionLayer         m_ConvolutionLayer;$/;"	m	class:armnn::ClConvolution2dUint8Workload
m_ConvolutionLayer	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^    std::unique_ptr<arm_compute::IFunction> m_ConvolutionLayer;$/;"	m	class:armnn::NeonConvolution2dBaseWorkload
m_Count	./src/armnn/Profiling.hpp	/^        std::uint32_t m_Count;$/;"	m	struct:armnn::Profiler::ProfilingEventStats
m_CpuAcc	./src/armnn/LoadedNetwork.hpp	/^    NeonWorkloadFactory m_CpuAcc;$/;"	m	class:armnn::LoadedNetwork
m_CpuRef	./src/armnn/LoadedNetwork.hpp	/^    RefWorkloadFactory  m_CpuRef;$/;"	m	class:armnn::LoadedNetwork
m_Data	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^    DataType* m_Data;$/;"	m	class:armnn::TensorBufferArrayView
m_Data	./src/armnn/backends/Workload.hpp	/^    const QueueDescriptor m_Data;$/;"	m	class:armnn::BaseWorkload
m_Data	./tests/InferenceTestImage.hpp	/^    std::vector<uint8_t> m_Data;$/;"	m	class:InferenceTestImage
m_DataDir	./tests/InferenceTest.hpp	/^    std::string m_DataDir;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_DataDir	./tests/YoloInferenceTest.hpp	/^    std::string m_DataDir;$/;"	m	class:YoloTestCaseProvider
m_DataType	./include/armnn/Tensor.hpp	/^    DataType m_DataType;$/;"	m	class:armnn::TensorInfo
m_Database	./tests/InferenceTest.hpp	/^    std::unique_ptr<TDatabase> m_Database;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_Database	./tests/YoloInferenceTest.hpp	/^    std::unique_ptr<YoloDatabase> m_Database;$/;"	m	class:YoloTestCaseProvider
m_DebugOutputSink	./src/armnn/test/UnitTests.cpp	/^    DebugOutputSink m_DebugOutputSink;$/;"	m	class:SetupDebugOutput	file:
m_DefaultComputeDevice	./include/armnn/IRuntime.hpp	/^        Compute m_DefaultComputeDevice;$/;"	m	struct:armnn::IRuntime::CreationOptions
m_Device	./src/armnn/Profiling.hpp	/^        Compute m_Device;$/;"	m	struct:armnn::Profiler::ProfilingEvent
m_DeviceSpec	./src/armnn/Runtime.hpp	/^    DeviceSpec m_DeviceSpec;$/;"	m	class:armnn::final
m_DimData	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^    std::vector<BroadcastDimensionData> m_DimData;$/;"	m	struct:armnn::BroadcastLoop
m_DimMappings	./include/armnn/Descriptors.hpp	/^    PermutationVector m_DimMappings;$/;"	m	struct:armnn::PermuteDescriptor
m_DimMappings	./include/armnn/Types.hpp	/^    ArrayType m_DimMappings;$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
m_DimSize	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^        unsigned int m_DimSize;$/;"	m	struct:armnn::BroadcastLoop::BroadcastDimensionData
m_Dimensions	./include/armnn/Tensor.hpp	/^    std::array<unsigned int, MaxNumOfTensorDimensions> m_Dimensions;$/;"	m	class:armnn::TensorShape
m_Disabler	./src/armnnUtils/LeakChecking.cpp	/^    HeapLeakChecker::Disabler m_Disabler;$/;"	m	struct:ScopedDisableLeakChecking::Impl	file:
m_DstShape	./src/armnnUtils/Permute.cpp	/^    armnn::TensorShape m_DstShape;$/;"	m	class:__anon30::PermuteLoop	file:
m_DstStrides	./src/armnnUtils/Permute.cpp	/^    std::array<size_type, armnn::MaxNumOfTensorDimensions> m_DstStrides;$/;"	m	class:__anon30::PermuteLoop	file:
m_Eps	./include/armnn/Descriptors.hpp	/^    float m_Eps;$/;"	m	struct:armnn::BatchNormalizationDescriptor
m_EventName	./src/armnn/Profiling.hpp	/^        const std::string m_EventName;$/;"	m	struct:armnn::Profiler::Marker
m_EventSequence	./src/armnn/Profiling.hpp	/^    std::vector<ProfilingEvent> m_EventSequence;$/;"	m	class:armnn::Profiler
m_EventTag	./src/armnn/Profiling.hpp	/^    std::uint32_t m_EventTag;$/;"	m	class:armnn::Profiler
m_EventTagUpdated	./src/armnn/Profiling.hpp	/^    bool m_EventTagUpdated;$/;"	m	class:armnn::Profiler
m_FloatComparer	./tests/YoloInferenceTest.hpp	/^    boost::math::fpc::close_at_tolerance<float> m_FloatComparer;$/;"	m	class:YoloTestCase
m_FullyConnected	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^    mutable arm_compute::CLFullyConnectedLayer m_FullyConnected;$/;"	m	class:armnn::ClFullyConnectedFloat32Workload
m_FullyConnectedLayer	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^    mutable arm_compute::NEFullyConnectedLayer m_FullyConnectedLayer;$/;"	m	class:armnn::NeonFullyConnectedFloat32Workload
m_Function	./include/armnn/Descriptors.hpp	/^    ActivationFunction m_Function;$/;"	m	struct:armnn::ActivationDescriptor
m_Gamma	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    arm_compute::CLTensor m_Gamma;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
m_Gamma	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    arm_compute::Tensor m_Gamma;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
m_Gamma	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Gamma;$/;"	m	struct:armnn::BatchNormalizationQueueDescriptor
m_Gamma	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Gamma;$/;"	m	class:armnn::BatchNormalizationLayer
m_GpuAcc	./src/armnn/LoadedNetwork.hpp	/^    ClWorkloadFactory   m_GpuAcc;$/;"	m	class:armnn::LoadedNetwork
m_Graph	./src/armnn/Graph.hpp	/^        const Graph& m_Graph;$/;"	m	struct:armnn::Graph::InputLayersAccessor
m_Graph	./src/armnn/Graph.hpp	/^        const Graph& m_Graph;$/;"	m	struct:armnn::Graph::OutputLayersAccessor
m_Graph	./src/armnn/Graph.hpp	/^    Graph& m_Graph;$/;"	m	class:armnn::Graph::LayerInGraphBase
m_Graph	./src/armnn/Network.hpp	/^    std::unique_ptr<Graph> m_Graph;$/;"	m	class:armnn::final
m_Graph	./src/armnn/test/GraphTests.cpp	/^    armnn::Graph m_Graph;$/;"	m	struct:CopyLayersFixture	file:
m_Guid	./src/armnn/Layer.hpp	/^    LayerGuid m_Guid;$/;"	m	class:armnn::Layer
m_H	./tests/YoloDatabase.hpp	/^    float m_H;$/;"	m	struct:YoloBoundingBox
m_Handles	./src/armnn/backends/WorkloadDataCollector.hpp	/^    std::vector<ITensorHandle*>& m_Handles;$/;"	m	class:armnn::WorkloadDataCollector
m_Height	./tests/ImageNetDatabase.hpp	/^    unsigned int m_Height;$/;"	m	class:ImageNetDatabase
m_Height	./tests/InferenceTestImage.hpp	/^    unsigned int m_Height;$/;"	m	class:InferenceTestImage
m_Height	./tests/MobileNetDatabase.hpp	/^    unsigned int m_Height;$/;"	m	class:MobileNetDatabase
m_Id	./src/armnn/Layer.hpp	/^    LayerBindingId m_Id;$/;"	m	class:armnn::BindableLayer
m_Id	./src/armnn/LoadedNetwork.cpp	/^    LayerBindingId m_Id;$/;"	m	class:armnn::__anon2::TensorPin	file:
m_Id	./src/armnn/Profiling.hpp	/^        std::size_t m_Id;$/;"	m	struct:armnn::Profiler::Marker
m_ImageDir	./tests/YoloDatabase.hpp	/^    std::string m_ImageDir;$/;"	m	class:YoloDatabase
m_ImageSet	./tests/ImageNetDatabase.hpp	/^    const std::vector<ImageSet> m_ImageSet;$/;"	m	class:ImageNetDatabase
m_ImageSet	./tests/MobileNetDatabase.hpp	/^    const std::vector<ImageSet> m_ImageSet;$/;"	m	class:MobileNetDatabase
m_Impl	./src/armnnUtils/LeakChecking.hpp	/^    std::unique_ptr<Impl> m_Impl;$/;"	m	class:armnnUtils::final
m_Index	./src/armnnTfParser/TfParser.hpp	/^    unsigned int     m_Index;$/;"	m	struct:armnnTfParser::WithOutputTensorIndex
m_IndexedValue	./src/armnnTfParser/TfParser.hpp	/^    T                m_IndexedValue;$/;"	m	struct:armnnTfParser::WithOutputTensorIndex
m_InferenceTimesFile	./tests/InferenceTest.hpp	/^    std::string m_InferenceTimesFile;$/;"	m	struct:armnn::test::InferenceTestOptions
m_Info	./include/armnn/Tensor.hpp	/^    TensorInfo m_Info;$/;"	m	class:armnn::BaseTensor
m_Infos	./src/armnn/backends/WorkloadDataCollector.hpp	/^    std::vector<TensorInfo>& m_Infos;$/;"	m	class:armnn::WorkloadDataCollector
m_Input	./tests/InferenceTest.hpp	/^    std::vector<typename TModel::DataType> m_Input;$/;"	m	class:armnn::test::InferenceModelTestCase
m_InputBinding	./tests/InferenceModel.hpp	/^        std::string m_InputBinding;$/;"	m	struct:InferenceModel::Params
m_InputBindingInfo	./tests/InferenceModel.hpp	/^    std::pair<armnn::LayerBindingId, armnn::TensorInfo> m_InputBindingInfo;$/;"	m	class:InferenceModel
m_InputIds	./src/armnn/Graph.hpp	/^    std::unordered_set<LayerBindingId> m_InputIds;$/;"	m	class:armnn::Graph
m_InputImage	./tests/ClassifierTestCaseData.hpp	/^    std::vector<DataType> m_InputImage;$/;"	m	class:ClassifierTestCaseData
m_InputImage	./tests/YoloDatabase.hpp	/^    std::vector<float> m_InputImage;$/;"	m	class:YoloTestCaseData
m_InputShapes	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::map<std::string, armnn::TensorShape> m_InputShapes;$/;"	m	class:armnnCaffeParser::CaffeParser
m_InputShapes	./src/armnnTfParser/TfParser.hpp	/^    std::map<std::string, armnn::TensorShape> m_InputShapes;$/;"	m	class:armnnTfParser::TfParser
m_InputSlots	./src/armnn/Layer.hpp	/^    std::vector<InputSlot> m_InputSlots;$/;"	m	class:armnn::Layer
m_InputTensorInfos	./src/armnn/backends/WorkloadInfo.hpp	/^    std::vector<TensorInfo> m_InputTensorInfos;$/;"	m	struct:armnn::WorkloadInfo
m_InputTensorPins	./src/armnn/LoadedNetwork.cpp	/^    std::vector<TensorPin> m_InputTensorPins;$/;"	m	class:armnn::__anon2::WorkloadData	file:
m_InputTensorShape	./tests/InferenceModel.hpp	/^        const armnn::TensorShape* m_InputTensorShape;$/;"	m	struct:InferenceModel::Params
m_Inputs	./src/armnn/backends/WorkloadData.hpp	/^    std::vector<ITensorHandle*> m_Inputs;$/;"	m	struct:armnn::QueueDescriptor
m_IntraLayerLifetimeMgr	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    mutable std::shared_ptr<arm_compute::BlobLifetimeManager>   m_IntraLayerLifetimeMgr;$/;"	m	class:armnn::AclBaseMemoryManager
m_IntraLayerMemoryMgr	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    mutable std::shared_ptr<arm_compute::MemoryManagerOnDemand> m_IntraLayerMemoryMgr;$/;"	m	class:armnn::AclBaseMemoryManager
m_IntraLayerPoolMgr	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    mutable std::shared_ptr<arm_compute::PoolManager>           m_IntraLayerPoolMgr;$/;"	m	class:armnn::AclBaseMemoryManager
m_IsModelBinary	./tests/InferenceModel.hpp	/^        bool m_IsModelBinary;$/;"	m	struct:InferenceModel::Params
m_IterationCount	./tests/InferenceTest.hpp	/^    unsigned int m_IterationCount;$/;"	m	struct:armnn::test::InferenceTestOptions
m_K	./include/armnn/Descriptors.hpp	/^    float                         m_K;$/;"	m	struct:armnn::NormalizationDescriptor
m_KernelTensor	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^    arm_compute::CLTensor m_KernelTensor;$/;"	m	class:armnn::ClConvolution2dFloat32Workload
m_KernelTensor	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^    arm_compute::CLTensor m_KernelTensor;$/;"	m	class:armnn::ClConvolution2dUint8Workload
m_KernelTensor	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    arm_compute::CLTensor m_KernelTensor;$/;"	m	class:armnn::ClDepthwiseConvolutionFloat32Workload
m_KernelTensor	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    arm_compute::CLTensor m_KernelTensor;$/;"	m	class:armnn::ClDepthwiseConvolutionUint8Workload
m_KernelTensor	./src/armnn/backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp	/^    arm_compute::Tensor m_KernelTensor;$/;"	m	class:armnn::NeonConvolution2dBaseWorkload
m_KernelTensor	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^    arm_compute::Tensor m_KernelTensor;$/;"	m	class:armnn::NeonDepthwiseConvolutionFloat32Workload
m_KernelTensor	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^    arm_compute::Tensor m_KernelTensor;$/;"	m	class:armnn::NeonDepthwiseConvolutionUint8Workload
m_Label	./src/armnn/Profiling.hpp	/^        std::string m_Label;$/;"	m	struct:armnn::Profiler::ProfilingEvent
m_Label	./tests/ClassifierTestCaseData.hpp	/^    const unsigned int m_Label;$/;"	m	class:ClassifierTestCaseData
m_Label	./tests/InferenceTest.hpp	/^    unsigned int m_Label;$/;"	m	class:armnn::test::ClassifierTestCase
m_Layer	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.hpp	/^    mutable arm_compute::CLArithmeticAddition m_Layer;$/;"	m	class:armnn::ClAdditionFloat32Workload
m_Layer	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    mutable arm_compute::CLBatchNormalizationLayer m_Layer;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
m_Layer	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.hpp	/^    mutable arm_compute::CLFloor m_Layer;$/;"	m	class:armnn::ClFloorFloat32Workload
m_Layer	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.hpp	/^    mutable arm_compute::CLNormalizationLayer m_Layer;$/;"	m	class:armnn::ClL2NormalizationFloat32Workload
m_Layer	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.hpp	/^    mutable arm_compute::CLReshapeLayer m_Layer;$/;"	m	class:armnn::ClReshapeFloat32Workload
m_Layer	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.hpp	/^    mutable arm_compute::CLReshapeLayer m_Layer;$/;"	m	class:armnn::ClReshapeUint8Workload
m_Layer	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    mutable arm_compute::NEBatchNormalizationLayer m_Layer;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
m_Layer	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.hpp	/^    mutable arm_compute::NEFloor m_Layer;$/;"	m	class:armnn::NeonFloorFloat32Workload
m_Layer	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.hpp	/^    mutable arm_compute::NENormalizationLayer m_Layer;$/;"	m	class:armnn::NeonL2NormalizationFloat32Workload
m_Layer	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.hpp	/^    mutable arm_compute::NEReshapeLayer m_Layer;$/;"	m	class:armnn::NeonReshapeFloat32Workload
m_Layer	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.hpp	/^    mutable arm_compute::NEReshapeLayer m_Layer;$/;"	m	class:armnn::NeonReshapeUint8Workload
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    ConvolutionLayerType* m_Layer;$/;"	m	struct:__anon16::DummyConvolutionLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    LayerType* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    armnn::ConstantLayer* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    armnn::InputLayer* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    armnn::MergerLayer* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    armnn::OutputLayer* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    armnn::SplitterLayer* m_Layer;$/;"	m	struct:__anon16::DummyLayer
m_Layer	./src/armnnTfParser/TfParser.cpp	/^    IConnectableLayer* m_Layer;$/;"	m	class:armnnTfParser::SingleLayerParsedTfOperation	file:
m_LayerName	./src/armnn/Layer.hpp	/^    const std::string m_LayerName;$/;"	m	class:armnn::Layer
m_LayerOutput	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_LayerOutput;$/;"	m	struct:armnn::ConstantQueueDescriptor
m_LayerOutput	./src/armnn/layers/ConstantLayer.hpp	/^    std::shared_ptr<ScopedCpuTensorHandle> m_LayerOutput;$/;"	m	class:armnn::ConstantLayer
m_Layers	./src/armnn/Graph.hpp	/^    mutable LayersList m_Layers;$/;"	m	class:armnn::Graph
m_LayersInOrder	./src/armnn/Graph.hpp	/^    mutable bool m_LayersInOrder;$/;"	m	class:armnn::Graph
m_LeakChecker	./src/armnnUtils/LeakChecking.cpp	/^    HeapLeakChecker m_LeakChecker;$/;"	m	struct:ScopedLeakChecker::Impl	file:
m_LoadedNetworks	./src/armnn/Runtime.hpp	/^    std::unordered_map<NetworkId, std::unique_ptr<LoadedNetwork>> m_LoadedNetworks;$/;"	m	class:armnn::final
m_Location	./src/armnnUtils/HeapProfiling.hpp	/^    std::string m_Location;$/;"	m	class:armnnUtils::final
m_Max	./include/armnn/Descriptors.hpp	/^    float m_Max;$/;"	m	struct:armnn::FakeQuantizationDescriptor
m_Max	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Max;$/;"	m	struct:armnn::FakeQuantizationQueueDescriptor
m_MaxMs	./src/armnn/Profiling.hpp	/^        double m_MaxMs;$/;"	m	struct:armnn::Profiler::ProfilingEventStats
m_Mean	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    arm_compute::CLTensor m_Mean;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
m_Mean	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    arm_compute::Tensor m_Mean;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
m_Mean	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Mean;$/;"	m	struct:armnn::BatchNormalizationQueueDescriptor
m_Mean	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Mean;$/;"	m	class:armnn::BatchNormalizationLayer
m_MeanBgr	./tests/ImageNetDatabase.hpp	/^    const std::array<float, 3> m_MeanBgr = {{104.007965f, 116.669472f, 122.675102f}};$/;"	m	class:ImageNetDatabase
m_Memory	./src/armnn/backends/CpuTensorHandle.hpp	/^    const void* m_Memory;$/;"	m	class:armnn::ConstCpuTensorHandle
m_MemoryArea	./include/armnn/Tensor.hpp	/^    MemoryType m_MemoryArea;$/;"	m	class:armnn::BaseTensor
m_MemoryManager	./src/armnn/backends/ClWorkloadFactory.hpp	/^    mutable AclBaseMemoryManager m_MemoryManager;$/;"	m	class:armnn::ClWorkloadFactory
m_MemoryManager	./src/armnn/backends/NeonWorkloadFactory.hpp	/^    mutable AclBaseMemoryManager m_MemoryManager;$/;"	m	class:armnn::NeonWorkloadFactory
m_Message	./include/armnn/Exceptions.hpp	/^    std::string m_Message;$/;"	m	class:armnn::Exception
m_Min	./include/armnn/Descriptors.hpp	/^    float m_Min;$/;"	m	struct:armnn::FakeQuantizationDescriptor
m_Min	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Min;$/;"	m	struct:armnn::FakeQuantizationQueueDescriptor
m_MinMs	./src/armnn/Profiling.hpp	/^        double m_MinMs;$/;"	m	struct:armnn::Profiler::ProfilingEventStats
m_Mode	./src/armnn/backends/ClContextControl.hpp	/^    Mode m_Mode;$/;"	m	class:armnn::ClTunedParameters
m_Model	./tests/InferenceTest.hpp	/^    TModel& m_Model;$/;"	m	class:armnn::test::InferenceModelTestCase
m_Model	./tests/InferenceTest.hpp	/^    std::unique_ptr<InferenceModel> m_Model;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_Model	./tests/YoloInferenceTest.hpp	/^    std::unique_ptr<Model> m_Model;$/;"	m	class:YoloTestCaseProvider
m_ModelCommandLineOptions	./tests/InferenceTest.hpp	/^    typename InferenceModel::CommandLineOptions m_ModelCommandLineOptions;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ModelCommandLineOptions	./tests/YoloInferenceTest.hpp	/^    typename Model::CommandLineOptions m_ModelCommandLineOptions;$/;"	m	class:YoloTestCaseProvider
m_ModelDir	./tests/InferenceModel.hpp	/^        std::string m_ModelDir;$/;"	m	struct:InferenceModel::CommandLineOptions
m_ModelPath	./tests/InferenceModel.hpp	/^        std::string m_ModelPath;$/;"	m	struct:InferenceModel::Params
m_Multiplier	./src/armnn/backends/RefWorkloads/ConvImpl.hpp	/^    int32_t m_Multiplier;$/;"	m	struct:armnn::QuantizedMultiplierSmallerThanOne
m_MutableMemory	./src/armnn/backends/CpuTensorHandle.hpp	/^    void* m_MutableMemory;$/;"	m	class:armnn::CpuTensorHandle
m_Mutex	./src/armnn/Runtime.hpp	/^    mutable std::mutex m_Mutex;$/;"	m	class:armnn::final
m_Name	./src/armnnUtils/DotSerializer.hpp	/^    const char* m_Name;$/;"	m	class:armnn::HtmlSimpleTag
m_Name	./src/armnnUtils/DotSerializer.hpp	/^    std::string m_Name;$/;"	m	class:armnn::NodeContent
m_NestingLevel	./src/armnn/Profiling.hpp	/^    std::uint32_t m_NestingLevel;$/;"	m	class:armnn::Profiler
m_Network	./src/armnnCaffeParser/CaffeParser.hpp	/^    armnn::INetworkPtr m_Network;$/;"	m	class:armnnCaffeParser::CaffeParser
m_Network	./src/armnnTfParser/TfParser.hpp	/^    armnn::INetworkPtr m_Network;$/;"	m	class:armnnTfParser::TfParser
m_NetworkIdCounter	./src/armnn/Runtime.hpp	/^    int m_NetworkIdCounter;$/;"	m	class:armnn::final
m_NetworkIdentifier	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    armnn::NetworkId                                    m_NetworkIdentifier;$/;"	m	struct:ParserPrototxtFixture
m_NetworkIdentifier	./tests/InferenceModel.hpp	/^    armnn::NetworkId m_NetworkIdentifier;$/;"	m	class:InferenceModel
m_NetworkInputsBindingInfo	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::unordered_map<std::string, BindingPointInfo> m_NetworkInputsBindingInfo;$/;"	m	class:armnnCaffeParser::CaffeParser
m_NetworkInputsBindingInfo	./src/armnnTfParser/TfParser.hpp	/^    std::unordered_map<std::string, BindingPointInfo> m_NetworkInputsBindingInfo;$/;"	m	class:armnnTfParser::TfParser
m_NetworkOutputsBindingInfo	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::unordered_map<std::string, BindingPointInfo> m_NetworkOutputsBindingInfo;$/;"	m	class:armnnCaffeParser::CaffeParser
m_NetworkOutputsBindingInfo	./src/armnnTfParser/TfParser.hpp	/^    std::unordered_map<std::string, BindingPointInfo> m_NetworkOutputsBindingInfo;$/;"	m	class:armnnTfParser::TfParser
m_Node	./src/armnnTfParser/TfParser.cpp	/^    const tensorflow::NodeDef& m_Node;$/;"	m	class:armnnTfParser::ParsedTfOperation	file:
m_NodesByName	./src/armnnTfParser/TfParser.hpp	/^    std::unordered_map<std::string, const tensorflow::NodeDef*> m_NodesByName;$/;"	m	class:armnnTfParser::TfParser
m_NormChannelType	./include/armnn/Descriptors.hpp	/^    NormalizationAlgorithmChannel m_NormChannelType;$/;"	m	struct:armnn::NormalizationDescriptor
m_NormMethodType	./include/armnn/Descriptors.hpp	/^    NormalizationAlgorithmMethod  m_NormMethodType;$/;"	m	struct:armnn::NormalizationDescriptor
m_NormSize	./include/armnn/Descriptors.hpp	/^    uint32_t                      m_NormSize;$/;"	m	struct:armnn::NormalizationDescriptor
m_NormalizationLayer	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.hpp	/^    mutable arm_compute::CLNormalizationLayer    m_NormalizationLayer;$/;"	m	class:armnn::ClNormalizationFloat32Workload
m_NormalizationLayer	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.hpp	/^    mutable arm_compute::NENormalizationLayer m_NormalizationLayer;$/;"	m	class:armnn::NeonNormalizationFloat32Workload
m_NumChannels	./tests/InferenceTestImage.hpp	/^    unsigned int m_NumChannels;$/;"	m	class:InferenceTestImage
m_NumCorrectInferences	./tests/InferenceTest.hpp	/^    int m_NumCorrectInferences; \/\/ Referenced by test cases$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_NumCorrectInferencesRef	./tests/InferenceTest.hpp	/^    int& m_NumCorrectInferencesRef;$/;"	m	class:armnn::test::ClassifierTestCase
m_NumDimMappings	./include/armnn/Types.hpp	/^    SizeType m_NumDimMappings;$/;"	m	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
m_NumDimensions	./include/armnn/Descriptors.hpp	/^    uint32_t   m_NumDimensions;$/;"	m	struct:armnn::OriginsDescriptor
m_NumDimensions	./include/armnn/Tensor.hpp	/^    unsigned int m_NumDimensions;$/;"	m	class:armnn::TensorShape
m_NumInferences	./tests/InferenceTest.hpp	/^    int m_NumInferences; \/\/ Referenced by test cases$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_NumInferencesRef	./tests/InferenceTest.hpp	/^    int& m_NumInferencesRef;$/;"	m	class:armnn::test::ClassifierTestCase
m_NumViews	./include/armnn/Descriptors.hpp	/^    uint32_t   m_NumViews;$/;"	m	struct:armnn::OriginsDescriptor
m_ObservedMarkers	./src/armnn/Profiling.hpp	/^    std::stack<Marker> m_ObservedMarkers;$/;"	m	class:armnn::Profiler
m_Offset	./include/armnn/Tensor.hpp	/^        int32_t m_Offset;$/;"	m	struct:armnn::TensorInfo::Quantization
m_OperationWorkloadsAllowed	./src/armnn/backends/RefWorkloadFactory.hpp	/^    const bool m_OperationWorkloadsAllowed;$/;"	m	class:armnn::RefWorkloadFactory
m_Optimizations	./src/armnn/Optimizer.hpp	/^    std::vector<Optimization*> m_Optimizations;$/;"	m	class:armnn::Optimizer
m_OptimizedNetwork	./src/armnn/LoadedNetwork.hpp	/^    std::unique_ptr<OptimizedNetwork> m_OptimizedNetwork;$/;"	m	class:armnn::LoadedNetwork
m_Origin	./src/armnn/backends/WorkloadData.hpp	/^        std::vector<unsigned int> m_Origin;$/;"	m	struct:armnn::MergerQueueDescriptor::ViewOrigin
m_Origin	./src/armnn/backends/WorkloadData.hpp	/^        std::vector<unsigned int> m_Origin;$/;"	m	struct:armnn::SplitterQueueDescriptor::ViewOrigin
m_Origins	./include/armnn/Descriptors.hpp	/^    OriginsDescriptor m_Origins;$/;"	m	struct:armnn::ViewsDescriptor
m_Output	./tests/InferenceTest.hpp	/^    std::vector<typename TModel::DataType> m_Output;$/;"	m	class:armnn::test::InferenceModelTestCase
m_OutputBinding	./tests/InferenceModel.hpp	/^        std::string m_OutputBinding;$/;"	m	struct:InferenceModel::Params
m_OutputBindingInfo	./tests/InferenceModel.hpp	/^    std::pair<armnn::LayerBindingId, armnn::TensorInfo> m_OutputBindingInfo;$/;"	m	class:InferenceModel
m_OutputHandler	./src/armnn/Layer.hpp	/^    OutputHandler& m_OutputHandler;$/;"	m	class:armnn::final
m_OutputHandlers	./src/armnn/Layer.hpp	/^    std::vector<OutputHandler> m_OutputHandlers;$/;"	m	class:armnn::Layer
m_OutputIds	./src/armnn/Graph.hpp	/^    std::unordered_set<LayerBindingId> m_OutputIds;$/;"	m	class:armnn::Graph
m_OutputShapeRounding	./include/armnn/Descriptors.hpp	/^    OutputShapeRounding m_OutputShapeRounding;$/;"	m	struct:armnn::Pooling2dDescriptor
m_OutputSlots	./src/armnn/Layer.hpp	/^    std::vector<OutputSlot> m_OutputSlots;$/;"	m	class:armnn::Layer
m_OutputStream	./src/armnn/test/UnitTests.cpp	/^    filtering_ostream m_OutputStream;$/;"	m	class:SetupDebugOutput	file:
m_OutputTensorInfos	./src/armnn/backends/WorkloadInfo.hpp	/^    std::vector<TensorInfo> m_OutputTensorInfos;$/;"	m	struct:armnn::WorkloadInfo
m_OutputTensorPins	./src/armnn/LoadedNetwork.cpp	/^    std::vector<TensorPin> m_OutputTensorPins;$/;"	m	class:armnn::__anon2::WorkloadData	file:
m_Outputs	./src/armnn/backends/WorkloadData.hpp	/^    std::vector<ITensorHandle*> m_Outputs;$/;"	m	struct:armnn::QueueDescriptor
m_OwningLayer	./src/armnn/Layer.hpp	/^    Layer& m_OwningLayer;$/;"	m	class:armnn::final
m_PadBottom	./include/armnn/Descriptors.hpp	/^    uint32_t             m_PadBottom;$/;"	m	struct:armnn::Convolution2dDescriptor
m_PadBottom	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PadBottom;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PadBottom	./include/armnn/Descriptors.hpp	/^    uint32_t m_PadBottom;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_PadLeft	./include/armnn/Descriptors.hpp	/^    uint32_t             m_PadLeft;$/;"	m	struct:armnn::Convolution2dDescriptor
m_PadLeft	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PadLeft;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PadLeft	./include/armnn/Descriptors.hpp	/^    uint32_t m_PadLeft;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_PadRight	./include/armnn/Descriptors.hpp	/^    uint32_t             m_PadRight;$/;"	m	struct:armnn::Convolution2dDescriptor
m_PadRight	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PadRight;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PadRight	./include/armnn/Descriptors.hpp	/^    uint32_t m_PadRight;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_PadTop	./include/armnn/Descriptors.hpp	/^    uint32_t             m_PadTop;$/;"	m	struct:armnn::Convolution2dDescriptor
m_PadTop	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PadTop;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PadTop	./include/armnn/Descriptors.hpp	/^    uint32_t m_PadTop;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_PaddingMethod	./include/armnn/Descriptors.hpp	/^    PaddingMethod       m_PaddingMethod;$/;"	m	struct:armnn::Pooling2dDescriptor
m_Param	./src/armnn/layers/LayerWithParameters.hpp	/^    Parameters m_Param;$/;"	m	class:armnn::LayerWithParameters
m_Parameters	./src/armnn/backends/WorkloadData.hpp	/^    LayerDescriptor m_Parameters;$/;"	m	struct:armnn::QueueDescriptorWithParameters
m_ParsedTfOperations	./src/armnnTfParser/TfParser.hpp	/^    std::unordered_map<std::string, ParsedTfOperationPtr> m_ParsedTfOperations;$/;"	m	class:armnnTfParser::TfParser
m_Parser	./src/armnnTfParser/TfParser.cpp	/^    TfParser* m_Parser;$/;"	m	class:armnnTfParser::ParsedTfOperation	file:
m_Parser	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    std::unique_ptr<TParser, void(*)(TParser* parser)>  m_Parser;$/;"	m	struct:ParserPrototxtFixture
m_PixelWiseMultiplication	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.hpp	/^    mutable arm_compute::CLPixelWiseMultiplication   m_PixelWiseMultiplication;$/;"	m	class:armnn::ClMultiplicationFloat32Workload
m_PixelWiseMultiplication	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.hpp	/^    mutable arm_compute::NEPixelWiseMultiplication m_PixelWiseMultiplication;$/;"	m	class:armnn::NeonMultiplicationFloat32Workload
m_PoolHeight	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PoolHeight;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PoolType	./include/armnn/Descriptors.hpp	/^    PoolingAlgorithm    m_PoolType;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PoolWidth	./include/armnn/Descriptors.hpp	/^    uint32_t            m_PoolWidth;$/;"	m	struct:armnn::Pooling2dDescriptor
m_PoolingLayer	./src/armnn/backends/ClWorkloads/ClPooling2dBaseWorkload.hpp	/^    mutable arm_compute::CLPoolingLayer m_PoolingLayer;$/;"	m	class:armnn::ClPooling2dBaseWorkload
m_PoolingLayer	./src/armnn/backends/NeonWorkloads/NeonPooling2dBaseWorkload.hpp	/^    mutable arm_compute::NEPoolingLayer m_PoolingLayer;$/;"	m	class:armnn::NeonPooling2dBaseWorkload
m_PosInGraphMap	./src/armnn/Graph.hpp	/^    std::unordered_map<const Layer*, Iterator> m_PosInGraphMap;$/;"	m	class:armnn::Graph
m_Priority	./src/armnn/Layer.hpp	/^    mutable LayerPriority m_Priority = 0;$/;"	m	class:armnn::Layer
m_Prototext	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    std::string                                         m_Prototext;$/;"	m	struct:ParserPrototxtFixture
m_Quantization	./include/armnn/Tensor.hpp	/^    } m_Quantization;$/;"	m	class:armnn::TensorInfo	typeref:struct:armnn::TensorInfo::Quantization
m_RanOnce	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.hpp	/^    mutable bool m_RanOnce;$/;"	m	class:armnn::ClBaseConstantWorkload
m_RanOnce	./src/armnn/backends/NeonWorkloads/NeonBaseConstantWorkload.hpp	/^    mutable bool m_RanOnce;$/;"	m	class:armnn::NeonBaseConstantWorkload
m_RanOnce	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.hpp	/^    mutable bool m_RanOnce;$/;"	m	class:armnn::RefBaseConstantWorkload
m_Representative	./src/armnnTfParser/TfParser.cpp	/^    ParsedTfOperation* m_Representative;$/;"	m	class:armnnTfParser::ParsedIdentityTfOperation	file:
m_RequestedOutputs	./src/armnnCaffeParser/CaffeParser.hpp	/^    std::vector<std::string> m_RequestedOutputs;$/;"	m	class:armnnCaffeParser::CaffeParser
m_RequestedOutputs	./src/armnnTfParser/TfParser.hpp	/^    std::vector<std::string> m_RequestedOutputs;$/;"	m	class:armnnTfParser::TfParser
m_ResizeBilinearLayer	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.hpp	/^    mutable arm_compute::CLScale m_ResizeBilinearLayer;$/;"	m	class:armnn::ClResizeBilinearFloat32Workload
m_RgbPack	./tests/Cifar10Database.hpp	/^    bool m_RgbPack;$/;"	m	class:Cifar10Database
m_RightShift	./src/armnn/backends/RefWorkloads/ConvImpl.hpp	/^    int32_t m_RightShift;$/;"	m	struct:armnn::QuantizedMultiplierSmallerThanOne
m_Runtime	./tests/InferenceModel.hpp	/^    armnn::IRuntimePtr m_Runtime;$/;"	m	class:InferenceModel
m_Runtimes	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    std::vector<armnn::IRuntimePtr>                     m_Runtimes;$/;"	m	struct:ParserPrototxtFixture
m_Scale	./include/armnn/Tensor.hpp	/^        float m_Scale;$/;"	m	struct:armnn::TensorInfo::Quantization
m_ScaleValues	./tests/MnistDatabase.hpp	/^    bool m_ScaleValues;$/;"	m	class:MnistDatabase
m_Shape	./include/armnn/Tensor.hpp	/^    TensorShape m_Shape;$/;"	m	class:armnn::TensorInfo
m_Shape	./src/armnn/backends/RefWorkloads/TensorBufferArrayView.hpp	/^    const TensorShape m_Shape;$/;"	m	class:armnn::TensorBufferArrayView
m_SingleInputName	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    std::string m_SingleInputName;$/;"	m	struct:ParserPrototxtFixture
m_SingleOutputName	./src/armnnUtils/ParserPrototxtFixture.hpp	/^    std::string m_SingleOutputName;$/;"	m	struct:ParserPrototxtFixture
m_SlotIndex	./src/armnn/Layer.hpp	/^    const unsigned int m_SlotIndex;$/;"	m	class:armnn::final
m_SoftmaxLayer	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.hpp	/^    mutable arm_compute::CLSoftmaxLayer m_SoftmaxLayer;$/;"	m	class:armnn::ClSoftmaxFloat32Workload
m_SoftmaxLayer	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.hpp	/^    mutable arm_compute::CLSoftmaxLayer m_SoftmaxLayer;$/;"	m	class:armnn::ClSoftmaxUint8Workload
m_SoftmaxLayer	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.hpp	/^    mutable arm_compute::NESoftmaxLayer m_SoftmaxLayer;$/;"	m	class:armnn::NeonSoftmaxFloat32Workload
m_SoftmaxLayer	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.hpp	/^    mutable arm_compute::NESoftmaxLayer m_SoftmaxLayer;$/;"	m	class:armnn::NeonSoftmaxUint8Workload
m_SrcStrides	./src/armnnUtils/Permute.cpp	/^    std::array<size_type, armnn::MaxNumOfTensorDimensions> m_SrcStrides;$/;"	m	class:__anon30::PermuteLoop	file:
m_StartTime	./src/armnn/Profiling.hpp	/^        TimePoint m_StartTime;$/;"	m	struct:armnn::Profiler::ProfilingEvent
m_StopTime	./src/armnn/Profiling.hpp	/^        TimePoint m_StopTime;$/;"	m	struct:armnn::Profiler::ProfilingEvent
m_Storage	./src/armnnTfParser/TfParser.cpp	/^    std::vector<T> m_Storage;$/;"	m	class:armnnTfParser::ParsedConstTfOperation	file:
m_Stream	./src/armnnUtils/DotSerializer.hpp	/^    std::ostream& m_Stream;$/;"	m	class:armnn::DotBase
m_Stride1	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^        unsigned int m_Stride1;$/;"	m	struct:armnn::BroadcastLoop::BroadcastDimensionData
m_Stride2	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^        unsigned int m_Stride2;$/;"	m	struct:armnn::BroadcastLoop::BroadcastDimensionData
m_StrideOut	./src/armnn/backends/RefWorkloads/Broadcast.hpp	/^        unsigned int m_StrideOut;$/;"	m	struct:armnn::BroadcastLoop::BroadcastDimensionData
m_StrideX	./include/armnn/Descriptors.hpp	/^    uint32_t             m_StrideX;$/;"	m	struct:armnn::Convolution2dDescriptor
m_StrideX	./include/armnn/Descriptors.hpp	/^    uint32_t            m_StrideX;$/;"	m	struct:armnn::Pooling2dDescriptor
m_StrideX	./include/armnn/Descriptors.hpp	/^    uint32_t m_StrideX;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_StrideY	./include/armnn/Descriptors.hpp	/^    uint32_t             m_StrideY;$/;"	m	struct:armnn::Convolution2dDescriptor
m_StrideY	./include/armnn/Descriptors.hpp	/^    uint32_t            m_StrideY;$/;"	m	struct:armnn::Pooling2dDescriptor
m_StrideY	./include/armnn/Descriptors.hpp	/^    uint32_t m_StrideY;$/;"	m	struct:armnn::DepthwiseConvolution2dDescriptor
m_Tag	./src/armnn/Profiling.hpp	/^        std::uint32_t m_Tag;$/;"	m	struct:armnn::Profiler::Marker
m_Tag	./src/armnn/Profiling.hpp	/^        std::uint32_t m_Tag;$/;"	m	struct:armnn::Profiler::ProfilingEvent
m_Tag	./src/armnnUtils/HeapProfiling.hpp	/^    std::string m_Tag;$/;"	m	class:armnnUtils::final
m_TargetHeight	./include/armnn/Descriptors.hpp	/^    uint32_t m_TargetHeight;$/;"	m	struct:armnn::ResizeBilinearDescriptor
m_TargetShape	./include/armnn/Descriptors.hpp	/^    TensorShape m_TargetShape;$/;"	m	struct:armnn::ReshapeDescriptor
m_TargetWidth	./include/armnn/Descriptors.hpp	/^    uint32_t m_TargetWidth;$/;"	m	struct:armnn::ResizeBilinearDescriptor
m_Tensor	./src/armnn/backends/ClTensorHandle.hpp	/^    arm_compute::CLSubTensor m_Tensor;$/;"	m	class:armnn::ClSubTensorHandle
m_Tensor	./src/armnn/backends/ClTensorHandle.hpp	/^    arm_compute::CLTensor m_Tensor;$/;"	m	class:armnn::ClTensorHandle
m_Tensor	./src/armnn/backends/NeonTensorHandle.hpp	/^    arm_compute::SubTensor m_Tensor;   $/;"	m	class:armnn::NeonSubTensorHandle
m_Tensor	./src/armnn/backends/NeonTensorHandle.hpp	/^    arm_compute::Tensor m_Tensor;$/;"	m	class:armnn::NeonTensorHandle
m_TensorDesc	./src/armnn/test/GraphTests.cpp	/^    armnn::TensorInfo m_TensorDesc;$/;"	m	struct:CopyLayersFixture	file:
m_TensorHandle	./src/armnn/LoadedNetwork.cpp	/^    std::unique_ptr<ITensorHandle> m_TensorHandle;$/;"	m	class:armnn::__anon2::TensorPin	file:
m_TensorHandle	./src/armnn/backends/OutputHandler.hpp	/^    std::unique_ptr<ITensorHandle> m_TensorHandle;$/;"	m	class:armnn::OutputHandler
m_TensorInfo	./src/armnn/LoadedNetwork.cpp	/^    TensorInfo m_TensorInfo;$/;"	m	class:armnn::__anon2::TensorPin	file:
m_TensorInfo	./src/armnn/backends/CpuTensorHandle.hpp	/^    TensorInfo m_TensorInfo;$/;"	m	class:armnn::ConstCpuTensorHandle
m_TensorInfo	./src/armnn/backends/OutputHandler.hpp	/^    TensorInfo m_TensorInfo;$/;"	m	class:armnn::OutputHandler
m_TensorInfo	./src/armnn/test/TensorTest.cpp	/^    TensorInfo m_TensorInfo;$/;"	m	struct:TensorInfoFixture	file:
m_TensorInfo	./src/armnnTfParser/TfParser.cpp	/^    TensorInfo m_TensorInfo;$/;"	m	class:armnnTfParser::ParsedConstTfOperation	file:
m_TestCaseId	./tests/InferenceTest.hpp	/^    unsigned int m_TestCaseId;$/;"	m	class:armnn::test::InferenceModelTestCase
m_TimeStamp	./src/armnn/Profiling.hpp	/^        TimePoint m_TimeStamp;$/;"	m	struct:armnn::Profiler::Marker
m_TopObjectDetections	./tests/YoloDatabase.hpp	/^    std::vector<YoloDetectedObject> m_TopObjectDetections;$/;"	m	class:YoloTestCaseData
m_TopObjectDetections	./tests/YoloInferenceTest.hpp	/^    std::vector<YoloDetectedObject> m_TopObjectDetections;$/;"	m	class:YoloTestCase
m_TotalMs	./src/armnn/Profiling.hpp	/^        double m_TotalMs;$/;"	m	struct:armnn::Profiler::ProfilingEventStats
m_TransposeWeightMatrix	./include/armnn/Descriptors.hpp	/^    bool m_TransposeWeightMatrix;$/;"	m	struct:armnn::FullyConnectedDescriptor
m_Tuner	./src/armnn/backends/ClContextControl.hpp	/^    arm_compute::CLTuner m_Tuner;$/;"	m	class:armnn::ClTunedParameters
m_Type	./src/armnn/Layer.hpp	/^    const LayerType m_Type;$/;"	m	class:armnn::Layer
m_UseCpuRefAsFallback	./include/armnn/IRuntime.hpp	/^        bool m_UseCpuRefAsFallback;$/;"	m	struct:armnn::IRuntime::CreationOptions
m_UseCpuRefAsFallback	./src/armnn/Runtime.hpp	/^    bool m_UseCpuRefAsFallback;$/;"	m	class:armnn::final
m_ValidationFileIn	./tests/InferenceTest.hpp	/^    std::string m_ValidationFileIn;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ValidationFileOut	./tests/InferenceTest.hpp	/^    std::string m_ValidationFileOut;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ValidationPredictions	./tests/InferenceTest.hpp	/^    const std::vector<unsigned int>& m_ValidationPredictions;$/;"	m	class:armnn::test::ClassifierTestCase
m_ValidationPredictions	./tests/InferenceTest.hpp	/^    std::vector<unsigned int> m_ValidationPredictions; \/\/ Referenced by test cases$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ValidationPredictionsOut	./tests/InferenceTest.hpp	/^    std::vector<unsigned int> m_ValidationPredictionsOut; \/\/ Referenced by test cases$/;"	m	class:armnn::test::ClassifierTestCaseProvider
m_ValidationPredictionsOut	./tests/InferenceTest.hpp	/^    std::vector<unsigned int>* m_ValidationPredictionsOut;$/;"	m	class:armnn::test::ClassifierTestCase
m_Variance	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    arm_compute::CLTensor m_Variance;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
m_Variance	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    arm_compute::Tensor m_Variance;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
m_Variance	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Variance;$/;"	m	struct:armnn::BatchNormalizationQueueDescriptor
m_Variance	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Variance;$/;"	m	class:armnn::BatchNormalizationLayer
m_ViewOrigins	./include/armnn/Descriptors.hpp	/^    uint32_t** m_ViewOrigins;$/;"	m	struct:armnn::OriginsDescriptor
m_ViewOrigins	./src/armnn/backends/WorkloadData.hpp	/^    std::vector<ViewOrigin> m_ViewOrigins;$/;"	m	struct:armnn::MergerQueueDescriptor
m_ViewOrigins	./src/armnn/backends/WorkloadData.hpp	/^    std::vector<ViewOrigin> m_ViewOrigins;$/;"	m	struct:armnn::SplitterQueueDescriptor
m_ViewSizes	./include/armnn/Descriptors.hpp	/^    uint32_t** m_ViewSizes;$/;"	m	struct:armnn::ViewsDescriptor
m_Visiting	./src/armnn/Layer.hpp	/^    mutable bool m_Visiting = false;$/;"	m	class:armnn::Layer
m_VisualizePostOptimizationModel	./tests/InferenceModel.hpp	/^        bool m_VisualizePostOptimizationModel;$/;"	m	struct:InferenceModel::CommandLineOptions
m_VisualizePostOptimizationModel	./tests/InferenceModel.hpp	/^        bool m_VisualizePostOptimizationModel;$/;"	m	struct:InferenceModel::Params
m_W	./tests/YoloDatabase.hpp	/^    float m_W;$/;"	m	struct:YoloBoundingBox
m_Weight	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Weight;$/;"	m	struct:armnn::Convolution2dQueueDescriptor
m_Weight	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Weight;$/;"	m	struct:armnn::DepthwiseConvolution2dQueueDescriptor
m_Weight	./src/armnn/backends/WorkloadData.hpp	/^    const ConstCpuTensorHandle* m_Weight;$/;"	m	struct:armnn::FullyConnectedQueueDescriptor
m_Weight	./src/armnn/layers/Convolution2dLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Weight;$/;"	m	class:armnn::Convolution2dLayer
m_Weight	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Weight;$/;"	m	class:armnn::DepthwiseConvolution2dLayer
m_Weight	./src/armnn/layers/FullyConnectedLayer.hpp	/^    std::unique_ptr<ScopedCpuTensorHandle> m_Weight;$/;"	m	class:armnn::FullyConnectedLayer
m_WeightsTensor	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^    arm_compute::CLTensor                      m_WeightsTensor;$/;"	m	class:armnn::ClFullyConnectedFloat32Workload
m_WeightsTensor	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^    arm_compute::Tensor                        m_WeightsTensor;$/;"	m	class:armnn::NeonFullyConnectedFloat32Workload
m_Width	./tests/ImageNetDatabase.hpp	/^    unsigned int m_Width;$/;"	m	class:ImageNetDatabase
m_Width	./tests/InferenceTestImage.hpp	/^    unsigned int m_Width;$/;"	m	class:InferenceTestImage
m_Width	./tests/MobileNetDatabase.hpp	/^    unsigned int m_Width;$/;"	m	class:MobileNetDatabase
m_WorkloadQueue	./src/armnn/LoadedNetwork.hpp	/^    std::vector< std::unique_ptr<IWorkload> > m_WorkloadQueue;$/;"	m	class:armnn::LoadedNetwork
m_X	./tests/YoloDatabase.hpp	/^    float m_X;$/;"	m	struct:YoloBoundingBox
m_Y	./tests/YoloDatabase.hpp	/^    float m_Y;$/;"	m	struct:YoloBoundingBox
m_bTensorInfoSet	./src/armnn/backends/OutputHandler.hpp	/^    bool m_bTensorInfoSet = false;$/;"	m	class:armnn::OutputHandler
m_clTunedParameters	./src/armnn/backends/ClContextControl.hpp	/^    ClTunedParameters* m_clTunedParameters;$/;"	m	class:armnn::ClContextControl
m_pDepthwiseConvolutionLayer	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    mutable std::unique_ptr<arm_compute::IFunction> m_pDepthwiseConvolutionLayer;$/;"	m	class:armnn::ClDepthwiseConvolutionFloat32Workload
m_pDepthwiseConvolutionLayer	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    mutable std::unique_ptr<arm_compute::IFunction> m_pDepthwiseConvolutionLayer;$/;"	m	class:armnn::ClDepthwiseConvolutionUint8Workload
m_pDepthwiseConvolutionLayer	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^    mutable std::unique_ptr<arm_compute::IFunction> m_pDepthwiseConvolutionLayer;$/;"	m	class:armnn::NeonDepthwiseConvolutionFloat32Workload
m_pDepthwiseConvolutionLayer	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^    mutable std::unique_ptr<arm_compute::IFunction> m_pDepthwiseConvolutionLayer;$/;"	m	class:armnn::NeonDepthwiseConvolutionUint8Workload
main	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build_arm64/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	./build_arm64/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	./tests/CaffeAlexNet-Armnn/CaffeAlexNet-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeCifar10AcrossChannels-Armnn/CaffeCifar10AcrossChannels-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeInception_BN-Armnn/CaffeInception_BN-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeMnist-Armnn/CaffeMnist-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeResNet-Armnn/CaffeResNet-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeSqueezeNet1_0-Armnn/CaffeSqueezeNet1_0-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeVGG-Armnn/CaffeVGG-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/CaffeYolo-Armnn/CaffeYolo-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/ExecuteNetwork/ExecuteNetwork.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/MultipleNetworksCifar10/MultipleNetworksCifar10.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/TfCifar10-Armnn/TfCifar10-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/TfInceptionV3-Armnn/TfInceptionV3-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/TfMnist-Armnn/TfMnist-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/TfMobileNet-Armnn/TfMobileNet-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./tests/TfResNext_Quantized-Armnn/TfResNext_Quantized-Armnn.cpp	/^int main(int argc, char* argv[])$/;"	f
monotonic_clock	./src/armnn/Profiling.hpp	/^class monotonic_clock {$/;"	c	namespace:armnn
ms_AclConvertPolicy	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.hpp	/^    static constexpr arm_compute::ConvertPolicy ms_AclConvertPolicy = arm_compute::ConvertPolicy::SATURATE;$/;"	m	class:armnn::ClAdditionFloat32Workload
ms_CaffeLayerNameToParsingFunctions	./src/armnnCaffeParser/CaffeParser.cpp	/^const std::map<std::string, CaffeParser::OperationParsingFunction> CaffeParser::ms_CaffeLayerNameToParsingFunctions = {$/;"	m	class:armnnCaffeParser::CaffeParser	file:
ms_CaffeLayerNameToParsingFunctions	./src/armnnCaffeParser/CaffeParser.hpp	/^    static const std::map<std::string, OperationParsingFunction> ms_CaffeLayerNameToParsingFunctions;$/;"	m	class:armnnCaffeParser::CaffeParser
ms_DataType	./src/armnn/backends/Workload.hpp	/^    static constexpr armnn::DataType ms_DataType = DataType;$/;"	m	class:armnn::TypedWorkload
ms_OperationNameToParsingFunctions	./src/armnnTfParser/TfParser.cpp	/^const std::map<std::string, TfParser::OperationParsingFunction> TfParser::ms_OperationNameToParsingFunctions = {$/;"	m	class:armnnTfParser::TfParser	file:
ms_OperationNameToParsingFunctions	./src/armnnTfParser/TfParser.hpp	/^    static const std::map<std::string, OperationParsingFunction> ms_OperationNameToParsingFunctions;$/;"	m	class:armnnTfParser::TfParser
operator !=	./src/armnn/Tensor.cpp	/^bool TensorInfo::operator!=(const TensorInfo& other) const$/;"	f	class:armnn::TensorInfo
operator !=	./src/armnn/Tensor.cpp	/^bool TensorShape::operator!=(const TensorShape& other) const$/;"	f	class:armnn::TensorShape
operator *	./src/armnn/backends/RefWorkloads/ConvImpl.cpp	/^int32_t QuantizedMultiplierSmallerThanOne::operator*(int32_t rhs) const$/;"	f	class:armnn::QuantizedMultiplierSmallerThanOne
operator <<	./include/armnn/TypesUtils.hpp	/^inline std::ostream & operator<<(std::ostream & os, const armnn::TensorShape & shape)$/;"	f	namespace:armnn
operator <<	./include/armnn/TypesUtils.hpp	/^inline std::ostream& operator<<(std::ostream& os, Compute compute)$/;"	f	namespace:armnn
operator <<	./include/armnn/TypesUtils.hpp	/^inline std::ostream& operator<<(std::ostream& os, Status stat)$/;"	f	namespace:armnn
operator =	./src/armnn/Descriptors.cpp	/^OriginsDescriptor& OriginsDescriptor::operator=(OriginsDescriptor rhs)$/;"	f	class:armnn::OriginsDescriptor
operator =	./src/armnn/Descriptors.cpp	/^ViewsDescriptor& ViewsDescriptor::operator=(ViewsDescriptor rhs)$/;"	f	class:armnn::ViewsDescriptor
operator =	./src/armnn/Tensor.cpp	/^BaseTensor<MemoryType>& BaseTensor<MemoryType>::operator =(const BaseTensor<MemoryType>& other)$/;"	f	class:armnn::BaseTensor
operator =	./src/armnn/Tensor.cpp	/^TensorInfo& TensorInfo::operator=(const TensorInfo& other)$/;"	f	class:armnn::TensorInfo
operator =	./src/armnn/Tensor.cpp	/^TensorShape& TensorShape::operator =(const TensorShape& other)$/;"	f	class:armnn::TensorShape
operator =	./src/armnn/backends/CpuTensorHandle.cpp	/^ScopedCpuTensorHandle& ScopedCpuTensorHandle::operator=(const ScopedCpuTensorHandle& other)$/;"	f	class:armnn::ScopedCpuTensorHandle
operator ==	./include/armnn/Tensor.hpp	/^        bool operator==(const Quantization& o) const {return ((m_Scale == o.m_Scale) && (m_Offset == o.m_Offset));}$/;"	f	struct:armnn::TensorInfo::Quantization
operator ==	./src/armnn/Tensor.cpp	/^bool TensorInfo::operator==(const TensorInfo& other) const$/;"	f	class:armnn::TensorInfo
operator ==	./src/armnn/Tensor.cpp	/^bool TensorShape::operator==(const TensorShape& other) const$/;"	f	class:armnn::TensorShape
operator >>	./tests/InferenceTest.hpp	/^inline std::istream& operator>>(std::istream& in, armnn::Compute& compute)$/;"	f	namespace:armnn
operator []	./include/armnn/Tensor.hpp	/^    unsigned int operator[](unsigned int i) const$/;"	f	class:armnn::TensorShape
operator []	./include/armnn/Tensor.hpp	/^    unsigned int& operator[](unsigned int i)$/;"	f	class:armnn::TensorShape
operator []	./include/armnn/Types.hpp	/^    ValueType operator[](SizeType i) const { return m_DimMappings.at(i); }$/;"	f	class:armnn::Status::DataType::ActivationFunction::PoolingAlgorithm::PaddingMethod::NormalizationAlgorithmChannel::NormalizationAlgorithmMethod::OutputShapeRounding::Compute::PermutationVector
optimizations	./src/armnn/optimizations/MovePermuteUp.hpp	/^namespace optimizations$/;"	n	namespace:armnn
optimizations	./src/armnn/optimizations/OptimizeConsecutiveReshapes.hpp	/^namespace optimizations$/;"	n	namespace:armnn
optimizations	./src/armnn/optimizations/OptimizeInversePermutes.hpp	/^namespace optimizations$/;"	n	namespace:armnn
optimizations	./src/armnn/optimizations/PermuteAsReshape.hpp	/^namespace optimizations$/;"	n	namespace:armnn
optimizations	./src/armnn/optimizations/SquashEqualSiblings.hpp	/^namespace optimizations$/;"	n	namespace:armnn
other	./src/armnn/Graph.hpp	/^    Graph& operator=(const Graph& other) = delete;$/;"	m	class:armnn::Graph
other	./src/armnn/backends/CpuTensorHandle.hpp	/^    ConstCpuTensorHandle& operator=(const ConstCpuTensorHandle& other) = delete;$/;"	m	class:armnn::ConstCpuTensorHandle
other	./src/armnn/backends/CpuTensorHandle.hpp	/^    ConstCpuTensorHandle(const ConstCpuTensorHandle& other) = delete;$/;"	m	class:armnn::ConstCpuTensorHandle
other	./src/armnn/backends/CpuTensorHandle.hpp	/^    CpuTensorHandle& operator=(const CpuTensorHandle& other) = delete;$/;"	m	class:armnn::CpuTensorHandle
other	./src/armnn/backends/CpuTensorHandle.hpp	/^    CpuTensorHandle(const CpuTensorHandle& other) = delete;$/;"	m	class:armnn::CpuTensorHandle
output	./src/armnn/backends/test/ActivationFixture.hpp	/^    boost::multi_array<float, 4> output;$/;"	m	struct:ActivationFixture
output	./src/armnn/backends/test/LayerTests.hpp	/^    boost::multi_array<T, n> output;$/;"	m	struct:LayerTestResult
outputBatchSize	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int outputBatchSize = inputBatchSize;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
outputChannels	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int outputChannels = inputChannels;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
outputExpected	./src/armnn/backends/test/ActivationFixture.hpp	/^    boost::multi_array<float, 4> outputExpected;$/;"	m	struct:ActivationFixture
outputExpected	./src/armnn/backends/test/LayerTests.hpp	/^    boost::multi_array<T, n> outputExpected;$/;"	m	struct:LayerTestResult
outputHeight	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int outputHeight = inputHeight;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
outputTensorInfo	./src/armnn/backends/test/ActivationFixture.hpp	/^    armnn::TensorInfo outputTensorInfo;$/;"	m	struct:ActivationFixture
outputWidth	./src/armnn/backends/test/ActivationTestImpl.hpp	/^    constexpr static unsigned int outputWidth = inputWidth;$/;"	m	struct:__anon11::BoundedReLuRandomInputTestTraits
override	./include/armnn/Exceptions.hpp	/^    virtual const char* what() const noexcept override;$/;"	m	class:armnn::Exception
override	./src/armnn/Layer.hpp	/^    IOutputSlot* GetConnection() override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    InputSlot* GetConnection(unsigned int index) override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    bool IsTensorInfoSet() const override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    const IOutputSlot* GetConnection() const override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    const InputSlot* GetConnection(unsigned int index) const override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    const TensorInfo& GetTensorInfo() const override;$/;"	m	class:armnn::final
override	./src/armnn/Layer.hpp	/^    void SetTensorInfo(const TensorInfo& tensorInfo) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^                                                  const char*                         name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^                                              const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^                                       const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^        const char*                             name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^        const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddAdditionLayer(const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddConstantLayer(const ConstTensor& input, const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddFloorLayer(const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddInputLayer(LayerBindingId id, const char* name=nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddL2NormalizationLayer(const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddMultiplicationLayer(const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    IConnectableLayer* AddOutputLayer(LayerBindingId id, const char* name = nullptr) override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    Status PrintGraph() override;$/;"	m	class:armnn::final
override	./src/armnn/Network.hpp	/^    Status SerializeToDot(std::ostream& stream) const override;$/;"	m	class:armnn::final
override	./src/armnn/Runtime.hpp	/^        const OutputTensors& outputTensors) override;$/;"	m	class:armnn::final
override	./src/armnn/Runtime.hpp	/^    virtual Status LoadNetwork(NetworkId& networkIdOut, IOptimizedNetworkPtr network) override;$/;"	m	class:armnn::final
override	./src/armnn/Runtime.hpp	/^    virtual Status UnloadNetwork(NetworkId networkId) override;$/;"	m	class:armnn::final
override	./src/armnn/Runtime.hpp	/^    virtual TensorInfo GetInputTensorInfo(NetworkId networkId, LayerBindingId layerId) const override;$/;"	m	class:armnn::final
override	./src/armnn/Runtime.hpp	/^    virtual TensorInfo GetOutputTensorInfo(NetworkId networkId, LayerBindingId layerId) const override;$/;"	m	class:armnn::final
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                                 unsigned int const* subTensorOrigin) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                                const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                              const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                             const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                            const WorkloadInfo&                  info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                            const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                           const WorkloadInfo&                 info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                           const WorkloadInfo&               info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                        const WorkloadInfo&              info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                       const WorkloadInfo&           info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                      const WorkloadInfo&            info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                      const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                     const WorkloadInfo&           info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                     const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                    const WorkloadInfo&          info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                    const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^                                                   const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^        const DepthwiseConvolution2dQueueDescriptor& descriptor, const WorkloadInfo& info) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^    virtual std::unique_ptr<ITensorHandle> CreateTensorHandle(const TensorInfo& tensorInfo) const override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloadFactory.hpp	/^    void Finalize() override;$/;"	m	class:armnn::ClWorkloadFactory
override	./src/armnn/backends/ClWorkloads/ClActivationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClActivationFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClActivationUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClActivationUint8Workload
override	./src/armnn/backends/ClWorkloads/ClAdditionFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClAdditionFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClBaseConstantWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClBaseConstantWorkload
override	./src/armnn/backends/ClWorkloads/ClBatchNormalizationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClBatchNormalizationFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClConstantFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClConstantFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClConstantUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClConstantUint8Workload
override	./src/armnn/backends/ClWorkloads/ClConvolution2dFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClConvolution2dFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClConvolution2dUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClConvolution2dUint8Workload
override	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClDepthwiseConvolutionFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClDepthwiseConvolutionUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClDepthwiseConvolutionUint8Workload
override	./src/armnn/backends/ClWorkloads/ClFloorFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClFloorFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClFullyConnectedFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClFullyConnectedFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClL2NormalizationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClL2NormalizationFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClMergerFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::ClMergerFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClMergerUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::ClMergerUint8Workload
override	./src/armnn/backends/ClWorkloads/ClMultiplicationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClMultiplicationFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClNormalizationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClNormalizationFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClPermuteWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClPermuteWorkload
override	./src/armnn/backends/ClWorkloads/ClPooling2dFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClPooling2dFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClPooling2dUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClPooling2dUint8Workload
override	./src/armnn/backends/ClWorkloads/ClReshapeFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClReshapeFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClReshapeUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClReshapeUint8Workload
override	./src/armnn/backends/ClWorkloads/ClResizeBilinearFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClResizeBilinearFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClSoftmaxFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClSoftmaxFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClSoftmaxUint8Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::ClSoftmaxUint8Workload
override	./src/armnn/backends/ClWorkloads/ClSplitterFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::ClSplitterFloat32Workload
override	./src/armnn/backends/ClWorkloads/ClSplitterUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::ClSplitterUint8Workload
override	./src/armnn/backends/CpuTensorHandle.hpp	/^    virtual void Allocate() override;$/;"	m	class:armnn::ConstPassthroughCpuTensorHandle
override	./src/armnn/backends/CpuTensorHandle.hpp	/^    virtual void Allocate() override;$/;"	m	class:armnn::PassthroughCpuTensorHandle
override	./src/armnn/backends/CpuTensorHandle.hpp	/^    virtual void Allocate() override;$/;"	m	class:armnn::ScopedCpuTensorHandle
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromClToCpuWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromClToNeonWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromCpuToClWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromCpuToCpuWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromCpuToNeonWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromNeonToClWorkload
override	./src/armnn/backends/MemCopyWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::CopyFromNeonToCpuWorkload
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                                 unsigned int const* subTensorOrigin) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                                const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                              const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                             const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                            const WorkloadInfo&                  info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                            const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                           const WorkloadInfo&                 info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                           const WorkloadInfo&               info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                        const WorkloadInfo&              info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                       const WorkloadInfo&           info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                      const WorkloadInfo&            info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                      const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                     const WorkloadInfo&           info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                     const WorkloadInfo&        info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                     const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                    const WorkloadInfo&          info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                    const WorkloadInfo&        info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                   const WorkloadInfo&        info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^                                                   const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^        const DepthwiseConvolution2dQueueDescriptor& descriptor, const WorkloadInfo& info) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^    virtual std::unique_ptr<ITensorHandle> CreateTensorHandle(const TensorInfo& tensorInfo) const override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloadFactory.hpp	/^    void Finalize() override;$/;"	m	class:armnn::NeonWorkloadFactory
override	./src/armnn/backends/NeonWorkloads/NeonActivationFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::NeonActivationFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonActivationUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonActivationUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonAdditionFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonAdditionFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonBatchNormalizationFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonConstantFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonConstantFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonConstantUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonConstantUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::NeonConvolution2dFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonConvolution2dFloat32Workload.hpp	/^    void ValidateData() const override;$/;"	m	class:armnn::NeonConvolution2dFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonConvolution2dUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonConvolution2dUint8Workload.hpp	/^    virtual void ValidateData() const override;$/;"	m	class:armnn::NeonConvolution2dUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonDepthwiseConvolutionFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonDepthwiseConvolutionUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonFloorFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonFloorFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonFullyConnectedFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonL2NormalizationFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonMergerFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonMergerFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonMergerUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonMergerUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonMultiplicationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonMultiplicationFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonNormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonNormalizationFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonPermuteWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::NeonPermuteWorkload
override	./src/armnn/backends/NeonWorkloads/NeonPooling2dFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonPooling2dFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonPooling2dUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonPooling2dUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonReshapeFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonReshapeFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonReshapeUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonReshapeUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonSoftmaxFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonSoftmaxFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonSoftmaxUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonSoftmaxUint8Workload
override	./src/armnn/backends/NeonWorkloads/NeonSplitterFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonSplitterFloat32Workload
override	./src/armnn/backends/NeonWorkloads/NeonSplitterUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::NeonSplitterUint8Workload
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                                const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                              const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                             const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                            const WorkloadInfo&                  info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                            const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                           const WorkloadInfo&                 info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                           const WorkloadInfo&               info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                        const WorkloadInfo&              info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                       const WorkloadInfo&           info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                      const WorkloadInfo&            info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                      const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                     const WorkloadInfo&           info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                     const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                    const WorkloadInfo&          info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                    const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^                                                   const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^        const DepthwiseConvolution2dQueueDescriptor& descriptor, const WorkloadInfo& info) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloadFactory.hpp	/^    virtual std::unique_ptr<ITensorHandle> CreateTensorHandle(const TensorInfo& tensorInfo) const override;$/;"	m	class:armnn::RefWorkloadFactory
override	./src/armnn/backends/RefWorkloads/RefActivationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefActivationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefActivationUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefActivationUint8Workload
override	./src/armnn/backends/RefWorkloads/RefAdditionFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefAdditionFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefAdditionUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefAdditionUint8Workload
override	./src/armnn/backends/RefWorkloads/RefBaseConstantWorkload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefBaseConstantWorkload
override	./src/armnn/backends/RefWorkloads/RefBatchNormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefBatchNormalizationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefBatchNormalizationUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefBatchNormalizationUint8Workload
override	./src/armnn/backends/RefWorkloads/RefConstantFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefConstantFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefConstantUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefConstantUint8Workload
override	./src/armnn/backends/RefWorkloads/RefConvolution2dFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefConvolution2dFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefConvolution2dUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefConvolution2dUint8Workload
override	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefDepthwiseConvolution2dFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefDepthwiseConvolution2dUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefDepthwiseConvolution2dUint8Workload
override	./src/armnn/backends/RefWorkloads/RefFakeQuantizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefFakeQuantizationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefFloorFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefFloorFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefFullyConnectedFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefFullyConnectedFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefFullyConnectedUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefFullyConnectedUint8Workload
override	./src/armnn/backends/RefWorkloads/RefL2NormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefL2NormalizationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefMergerFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefMergerFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefMergerUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefMergerUint8Workload
override	./src/armnn/backends/RefWorkloads/RefMultiplicationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefMultiplicationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefMultiplicationUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefMultiplicationUint8Workload
override	./src/armnn/backends/RefWorkloads/RefNormalizationFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefNormalizationFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefPermuteWorkload.hpp	/^    void Execute() const override;$/;"	m	class:armnn::RefPermuteWorkload
override	./src/armnn/backends/RefWorkloads/RefPooling2dFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefPooling2dFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefPooling2dUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefPooling2dUint8Workload
override	./src/armnn/backends/RefWorkloads/RefReshapeFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefReshapeFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefReshapeUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefReshapeUint8Workload
override	./src/armnn/backends/RefWorkloads/RefResizeBilinearFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefResizeBilinearFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefResizeBilinearUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefResizeBilinearUint8Workload
override	./src/armnn/backends/RefWorkloads/RefSoftmaxFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefSoftmaxFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefSoftmaxUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefSoftmaxUint8Workload
override	./src/armnn/backends/RefWorkloads/RefSplitterFloat32Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefSplitterFloat32Workload
override	./src/armnn/backends/RefWorkloads/RefSplitterUint8Workload.hpp	/^    virtual void Execute() const override;$/;"	m	class:armnn::RefSplitterUint8Workload
override	./src/armnn/layers/ActivationLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::ActivationLayer
override	./src/armnn/layers/ActivationLayer.hpp	/^    ActivationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::ActivationLayer
override	./src/armnn/layers/ActivationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::ActivationLayer
override	./src/armnn/layers/AdditionLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::AdditionLayer
override	./src/armnn/layers/AdditionLayer.hpp	/^    AdditionLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::AdditionLayer
override	./src/armnn/layers/AdditionLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::AdditionLayer
override	./src/armnn/layers/BatchNormalizationLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::BatchNormalizationLayer
override	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    BatchNormalizationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::BatchNormalizationLayer
override	./src/armnn/layers/BatchNormalizationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::BatchNormalizationLayer
override	./src/armnn/layers/ConstantLayer.hpp	/^        const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::ConstantLayer
override	./src/armnn/layers/ConstantLayer.hpp	/^    ConstantLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::ConstantLayer
override	./src/armnn/layers/ConstantLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::ConstantLayer
override	./src/armnn/layers/Convolution2dLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::Convolution2dLayer
override	./src/armnn/layers/Convolution2dLayer.hpp	/^    Convolution2dLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::Convolution2dLayer
override	./src/armnn/layers/Convolution2dLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::Convolution2dLayer
override	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::DepthwiseConvolution2dLayer
override	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^    DepthwiseConvolution2dLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::DepthwiseConvolution2dLayer
override	./src/armnn/layers/DepthwiseConvolution2dLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::DepthwiseConvolution2dLayer
override	./src/armnn/layers/FakeQuantizationLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::FakeQuantizationLayer
override	./src/armnn/layers/FakeQuantizationLayer.hpp	/^    FakeQuantizationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::FakeQuantizationLayer
override	./src/armnn/layers/FakeQuantizationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::FakeQuantizationLayer
override	./src/armnn/layers/FloorLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::FloorLayer
override	./src/armnn/layers/FloorLayer.hpp	/^    FloorLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::FloorLayer
override	./src/armnn/layers/FloorLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::FloorLayer
override	./src/armnn/layers/FullyConnectedLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::FullyConnectedLayer
override	./src/armnn/layers/FullyConnectedLayer.hpp	/^    FullyConnectedLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::FullyConnectedLayer
override	./src/armnn/layers/FullyConnectedLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::FullyConnectedLayer
override	./src/armnn/layers/InputLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::InputLayer
override	./src/armnn/layers/InputLayer.hpp	/^    InputLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::InputLayer
override	./src/armnn/layers/InputLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::InputLayer
override	./src/armnn/layers/L2NormalizationLayer.hpp	/^        const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::L2NormalizationLayer
override	./src/armnn/layers/L2NormalizationLayer.hpp	/^    L2NormalizationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::L2NormalizationLayer
override	./src/armnn/layers/L2NormalizationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::L2NormalizationLayer
override	./src/armnn/layers/MemCopyLayer.hpp	/^    CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::MemCopyLayer
override	./src/armnn/layers/MemCopyLayer.hpp	/^    MemCopyLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::MemCopyLayer
override	./src/armnn/layers/MemCopyLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::MemCopyLayer
override	./src/armnn/layers/MergerLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::MergerLayer
override	./src/armnn/layers/MergerLayer.hpp	/^    MergerLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::MergerLayer
override	./src/armnn/layers/MergerLayer.hpp	/^    virtual void CreateTensorHandles(Graph& graph, const IWorkloadFactory& factory) override;$/;"	m	class:armnn::MergerLayer
override	./src/armnn/layers/MergerLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::MergerLayer
override	./src/armnn/layers/MultiplicationLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::MultiplicationLayer
override	./src/armnn/layers/MultiplicationLayer.hpp	/^    MultiplicationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::MultiplicationLayer
override	./src/armnn/layers/MultiplicationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::MultiplicationLayer
override	./src/armnn/layers/NormalizationLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::NormalizationLayer
override	./src/armnn/layers/NormalizationLayer.hpp	/^    NormalizationLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::NormalizationLayer
override	./src/armnn/layers/NormalizationLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::NormalizationLayer
override	./src/armnn/layers/OutputLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::OutputLayer
override	./src/armnn/layers/OutputLayer.hpp	/^    OutputLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::OutputLayer
override	./src/armnn/layers/OutputLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::OutputLayer
override	./src/armnn/layers/PermuteLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::PermuteLayer
override	./src/armnn/layers/PermuteLayer.hpp	/^    PermuteLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::PermuteLayer
override	./src/armnn/layers/PermuteLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::PermuteLayer
override	./src/armnn/layers/Pooling2dLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::SoftmaxLayer
override	./src/armnn/layers/Pooling2dLayer.hpp	/^    SoftmaxLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::SoftmaxLayer
override	./src/armnn/layers/Pooling2dLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::SoftmaxLayer
override	./src/armnn/layers/ReshapeLayer.hpp	/^        const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::ReshapeLayer
override	./src/armnn/layers/ReshapeLayer.hpp	/^    ReshapeLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::ReshapeLayer
override	./src/armnn/layers/ReshapeLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::ReshapeLayer
override	./src/armnn/layers/ResizeBilinearLayer.hpp	/^        CreateWorkload(const Graph& graph, const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::ResizeBilinearLayer
override	./src/armnn/layers/ResizeBilinearLayer.hpp	/^    ResizeBilinearLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::ResizeBilinearLayer
override	./src/armnn/layers/ResizeBilinearLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::ResizeBilinearLayer
override	./src/armnn/layers/SoftmaxLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::Pooling2dLayer
override	./src/armnn/layers/SoftmaxLayer.hpp	/^    Pooling2dLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::Pooling2dLayer
override	./src/armnn/layers/SoftmaxLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::Pooling2dLayer
override	./src/armnn/layers/SplitterLayer.hpp	/^                                                      const IWorkloadFactory& factory) const override;$/;"	m	class:armnn::SplitterLayer
override	./src/armnn/layers/SplitterLayer.hpp	/^    SplitterLayer* Clone(Graph& graph) const override;$/;"	m	class:armnn::SplitterLayer
override	./src/armnn/layers/SplitterLayer.hpp	/^    virtual void CreateTensorHandles(Graph& graph, const IWorkloadFactory& factory) override;$/;"	m	class:armnn::SplitterLayer
override	./src/armnn/layers/SplitterLayer.hpp	/^    void ValidateTensorShapesFromInputs() override;$/;"	m	class:armnn::SplitterLayer
override	./src/armnnCaffeParser/CaffeParser.hpp	/^        const std::vector<std::string>& requestedOutputs) override;$/;"	m	class:armnnCaffeParser::CaffeParser
override	./src/armnnCaffeParser/CaffeParser.hpp	/^    virtual BindingPointInfo GetNetworkInputBindingInfo(const std::string& name) const override;$/;"	m	class:armnnCaffeParser::CaffeParser
override	./src/armnnCaffeParser/CaffeParser.hpp	/^    virtual BindingPointInfo GetNetworkOutputBindingInfo(const std::string& name) const override;$/;"	m	class:armnnCaffeParser::CaffeParser
override	./src/armnnTfParser/TfParser.hpp	/^        const std::vector<std::string>& requestedOutputs) override;$/;"	m	class:armnnTfParser::TfParser
override	./src/armnnTfParser/TfParser.hpp	/^    virtual BindingPointInfo GetNetworkInputBindingInfo(const std::string& name) const override;$/;"	m	class:armnnTfParser::TfParser
override	./src/armnnTfParser/TfParser.hpp	/^    virtual BindingPointInfo GetNetworkOutputBindingInfo(const std::string& name) const override;$/;"	m	class:armnnTfParser::TfParser
override	./tests/InferenceTest.hpp	/^    virtual TestCaseResult ProcessResult(const InferenceTestOptions& params) override;$/;"	m	class:armnn::test::ClassifierTestCase
override	./tests/InferenceTest.hpp	/^    virtual bool OnInferenceTestFinished() override;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
override	./tests/InferenceTest.hpp	/^    virtual bool ProcessCommandLineOptions() override;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
override	./tests/InferenceTest.hpp	/^    virtual std::unique_ptr<IInferenceTestCase> GetTestCase(unsigned int testCaseId) override;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
override	./tests/InferenceTest.hpp	/^    virtual void AddCommandLineOptions(boost::program_options::options_description& options) override;$/;"	m	class:armnn::test::ClassifierTestCaseProvider
qnxnto	./build_arm64/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	./build_arm64/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
s_Instance	./src/armnn/Profiling.cpp	/^Profiler Profiler::s_Instance;$/;"	m	class:armnn::Profiler	file:
s_Instance	./src/armnn/Profiling.hpp	/^    static Profiler s_Instance;$/;"	m	class:armnn::Profiler
supported	./src/armnn/backends/test/LayerTests.hpp	/^    bool supported;$/;"	m	struct:LayerTestResult
swap	./src/armnn/Descriptors.cpp	/^void swap(OriginsDescriptor& first, OriginsDescriptor& second)$/;"	f	namespace:armnn
swap	./src/armnn/Descriptors.cpp	/^void swap(ViewsDescriptor& first, ViewsDescriptor& second)$/;"	f	namespace:armnn
tensorflow	./src/armnnTfParser/TfParser.hpp	/^namespace tensorflow$/;"	n
test	./tests/InferenceTest.cpp	/^namespace test$/;"	n	namespace:armnn	file:
test	./tests/InferenceTest.hpp	/^namespace test$/;"	n	namespace:armnn
to_string	./src/armnn/backends/WorkloadData.cpp	/^std::string to_string(T value)$/;"	f	namespace:armnn::__anon10
usage	./scripts/generate_tensorflow_protobuf.sh	/^usage()$/;"	f
value	./src/armnn/backends/test/QuantizeHelper.hpp	/^    static constexpr bool value=std::is_floating_point<typename std::iterator_traits<ItType>::value_type>::value;$/;"	m	struct:IsFloatingPointIterator
width	./src/armnn/backends/test/ActivationFixture.hpp	/^    unsigned int width     = 17;$/;"	m	struct:ActivationFixture
write	./src/armnn/test/UnitTests.cpp	/^    std::streamsize write(const char* s, std::streamsize n)$/;"	f	struct:DebugOutputSink
~AclBaseMemoryManager	./src/armnn/backends/AclBaseMemoryManager.hpp	/^    virtual ~AclBaseMemoryManager() { }$/;"	f	class:armnn::AclBaseMemoryManager
~BaseTensor	./include/armnn/Tensor.hpp	/^    ~BaseTensor() {}$/;"	f	class:armnn::BaseTensor
~ClContextControl	./src/armnn/backends/ClContextControl.cpp	/^ClContextControl::~ClContextControl()$/;"	f	class:armnn::ClContextControl
~DotAttributeSet	./src/armnnUtils/DotSerializer.cpp	/^DotAttributeSet::~DotAttributeSet()$/;"	f	class:armnn::DotAttributeSet
~DotDefaults	./src/armnnUtils/DotSerializer.cpp	/^DotDefaults::~DotDefaults()$/;"	f	class:armnn::DotDefaults
~DotEdge	./src/armnnUtils/DotSerializer.cpp	/^DotEdge::~DotEdge()$/;"	f	class:armnn::DotEdge
~DotGraph	./src/armnnUtils/DotSerializer.cpp	/^DotGraph::~DotGraph()$/;"	f	class:armnn::DotGraph
~DotNode	./src/armnnUtils/DotSerializer.cpp	/^DotNode::~DotNode()$/;"	f	class:armnn::DotNode
~DummyConvolutionLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    ~DummyConvolutionLayer()$/;"	f	struct:__anon16::DummyConvolutionLayer
~DummyLayer	./src/armnn/backends/test/IsLayerSupportedTestImpl.hpp	/^    ~DummyLayer()$/;"	f	struct:__anon16::DummyLayer
~Graph	./src/armnn/Graph.hpp	/^    ~Graph()$/;"	f	class:armnn::Graph
~HtmlFont	./src/armnnUtils/DotSerializer.cpp	/^HtmlFont::~HtmlFont()$/;"	f	class:armnn::HtmlFont
~HtmlSection	./src/armnnUtils/DotSerializer.hpp	/^    ~HtmlSection() { GetStream() << ">"; }$/;"	f	class:armnn::HtmlSection
~HtmlSimpleTag	./src/armnnUtils/DotSerializer.hpp	/^    ~HtmlSimpleTag() { GetStream() << "<\/" << m_Name << ">"; }$/;"	f	class:armnn::HtmlSimpleTag
~ICaffeParser	./include/armnnCaffeParser/ICaffeParser.hpp	/^    virtual ~ICaffeParser() {};$/;"	f	class:armnnCaffeParser::ICaffeParser
~IClTunedParameters	./include/armnn/IRuntime.hpp	/^    virtual ~IClTunedParameters() {};$/;"	f	class:armnn::IClTunedParameters
~IConnectableLayer	./include/armnn/INetwork.hpp	/^    ~IConnectableLayer() {} \/\/ Objects are not deletable via the handle$/;"	f	class:armnn::IConnectableLayer
~IInferenceTestCase	./tests/InferenceTest.hpp	/^    virtual ~IInferenceTestCase() {}$/;"	f	class:armnn::test::IInferenceTestCase
~IInferenceTestCaseProvider	./tests/InferenceTest.hpp	/^    virtual ~IInferenceTestCaseProvider() {}$/;"	f	class:armnn::test::IInferenceTestCaseProvider
~IInputSlot	./include/armnn/INetwork.hpp	/^    ~IInputSlot() {} \/\/\/ Not user deletable$/;"	f	class:armnn::IInputSlot
~INetwork	./include/armnn/INetwork.hpp	/^    ~INetwork() {}$/;"	f	class:armnn::INetwork
~IOptimizedNetwork	./include/armnn/INetwork.hpp	/^    ~IOptimizedNetwork() {}$/;"	f	class:armnn::IOptimizedNetwork
~IOutputSlot	./include/armnn/INetwork.hpp	/^    ~IOutputSlot() {} \/\/\/ Not user deletable$/;"	f	class:armnn::IOutputSlot
~IRuntime	./include/armnn/IRuntime.hpp	/^    ~IRuntime() {}$/;"	f	class:armnn::IRuntime
~ITensorHandle	./src/armnn/backends/ITensorHandle.hpp	/^    virtual ~ITensorHandle(){}$/;"	f	class:armnn::ITensorHandle
~ITfParser	./include/armnnTfParser/ITfParser.hpp	/^    virtual ~ITfParser() {};$/;"	f	class:armnnTfParser::ITfParser
~IWorkload	./src/armnn/backends/Workload.hpp	/^    virtual ~IWorkload(){};$/;"	f	class:armnn::IWorkload
~IWorkloadFactory	./src/armnn/backends/WorkloadFactory.hpp	/^    virtual ~IWorkloadFactory() { }$/;"	f	class:armnn::IWorkloadFactory
~InputSlot	./src/armnn/Layer.hpp	/^inline InputSlot::~InputSlot()$/;"	f	class:armnn::InputSlot
~LayerInGraphBase	./src/armnn/Graph.hpp	/^    ~LayerInGraphBase()$/;"	f	class:armnn::Graph::LayerInGraphBase
~Network	./src/armnn/Network.cpp	/^Network::~Network()$/;"	f	class:armnn::Network
~NodeContent	./src/armnnUtils/DotSerializer.cpp	/^NodeContent::~NodeContent()$/;"	f	class:armnn::NodeContent
~OptimizedNetwork	./src/armnn/Network.cpp	/^OptimizedNetwork::~OptimizedNetwork()$/;"	f	class:armnn::OptimizedNetwork
~OriginsDescriptor	./src/armnn/Descriptors.cpp	/^OriginsDescriptor::~OriginsDescriptor()$/;"	f	class:armnn::OriginsDescriptor
~OutputSlot	./src/armnn/Layer.hpp	/^    ~OutputSlot()$/;"	f	class:armnn::final
~ParsedTfOperation	./src/armnnTfParser/TfParser.cpp	/^    virtual ~ParsedTfOperation() {};$/;"	f	class:armnnTfParser::ParsedTfOperation
~Profiler	./src/armnn/Profiling.cpp	/^Profiler::~Profiler()$/;"	f	class:armnn::Profiler
~RefWorkloadFactory	./src/armnn/backends/RefWorkloadFactory.hpp	/^    virtual ~RefWorkloadFactory() { };$/;"	f	class:armnn::RefWorkloadFactory
~Runtime	./src/armnn/Runtime.cpp	/^Runtime::~Runtime()$/;"	f	class:armnn::Runtime
~ScopedCpuTensorHandle	./src/armnn/backends/CpuTensorHandle.cpp	/^ScopedCpuTensorHandle::~ScopedCpuTensorHandle()$/;"	f	class:armnn::ScopedCpuTensorHandle
~ScopedDisableLeakChecking	./src/armnnUtils/LeakChecking.cpp	/^ScopedDisableLeakChecking::~ScopedDisableLeakChecking()$/;"	f	class:ScopedDisableLeakChecking
~ScopedHeapProfiler	./src/armnnUtils/HeapProfiling.cpp	/^ScopedHeapProfiler::~ScopedHeapProfiler()$/;"	f	class:armnnUtils::ScopedHeapProfiler
~ScopedLeakChecker	./src/armnnUtils/LeakChecking.cpp	/^ScopedLeakChecker::~ScopedLeakChecker() {}$/;"	f	class:ScopedLeakChecker
~ScopedProfilingEvent	./src/armnn/Profiling.hpp	/^    ~ScopedProfilingEvent()$/;"	f	class:armnn::ScopedProfilingEvent
~TensorInfoFixture	./src/armnn/test/TensorTest.cpp	/^    ~TensorInfoFixture() {};$/;"	f	struct:TensorInfoFixture
~ViewsDescriptor	./src/armnn/Descriptors.cpp	/^ViewsDescriptor::~ViewsDescriptor()$/;"	f	class:armnn::ViewsDescriptor
